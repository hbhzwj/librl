!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACTION_OPTION	examples/problem_settings.py	/^ACTION_OPTION = 'ALWAYS'$/;"	v
ACTION_OPTION	settings.py	/^ACTION_OPTION = 'ALWAYS'$/;"	v
AC_TYPE	examples/problem_settings.py	/^AC_TYPE = 'normal'$/;"	v
AC_TYPE	settings.py	/^AC_TYPE = 'normal'$/;"	v
ALLSPHINXOPTS	tools/pybrain/docs/sphinx/Makefile	/^ALLSPHINXOPTS   = -d .build\/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .$/;"	m
AckleyFunction	pybrain/rl/environments/functions/multimodal.py	/^class AckleyFunction(MultiModalFunction):$/;"	c
AckleyFunction	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^class AckleyFunction(MultiModalFunction):$/;"	c
AcrobotEnvironment	pybrain/rl/environments/ode/instances/acrobot.py	/^class AcrobotEnvironment(ODEEnvironment):$/;"	c
AcrobotEnvironment	tools/pybrain/pybrain/rl/environments/ode/instances/acrobot.py	/^class AcrobotEnvironment(ODEEnvironment):$/;"	c
AcrobotTask	pybrain/rl/environments/classic/acrobot.py	/^class AcrobotTask(EpisodicTask): $/;"	c
AcrobotTask	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^class AcrobotTask(EpisodicTask): $/;"	c
ActionValueInterface	pybrain/rl/learners/valuebased/interface.py	/^class ActionValueInterface(object):$/;"	c
ActionValueInterface	tools/pybrain/pybrain/rl/learners/valuebased/interface.py	/^class ActionValueInterface(object):$/;"	c
ActionValueNetwork	pybrain/rl/learners/valuebased/interface.py	/^class ActionValueNetwork(Module, ActionValueInterface):$/;"	c
ActionValueNetwork	tools/pybrain/pybrain/rl/learners/valuebased/interface.py	/^class ActionValueNetwork(Module, ActionValueInterface):$/;"	c
ActionValueTable	pybrain/rl/learners/valuebased/interface.py	/^class ActionValueTable(Table, ActionValueInterface):$/;"	c
ActionValueTable	tools/pybrain/pybrain/rl/learners/valuebased/interface.py	/^class ActionValueTable(Table, ActionValueInterface):$/;"	c
Actor	learners/HessianACLearner.py	/^    def Actor(self, xkp1, ukp1, xkp1Psi, xkp1Varsigma):$/;"	m	class:HessianACLearner
Actor	learners/TDLearner.py	/^    def Actor(self, xkp1, ukp1, xkp1Psi):$/;"	m	class:TDLearner
ActorCriticLearner	learners/ActorCriticLearner.py	/^class ActorCriticLearner(object):$/;"	c
Actuator	pybrain/rl/environments/ode/actuators.py	/^class Actuator(Named):$/;"	c
Actuator	tools/pybrain/pybrain/rl/environments/ode/actuators.py	/^class Actuator(Named):$/;"	c
AdaptiveResampler	pybrain/tools/aptativeresampling.py	/^class AdaptiveResampler(object):$/;"	c
AdaptiveResampler	tools/pybrain/pybrain/tools/aptativeresampling.py	/^class AdaptiveResampler(object):$/;"	c
Agent	pybrain/rl/agents/agent.py	/^class Agent(Named):$/;"	c
Agent	tools/pybrain/pybrain/rl/agents/agent.py	/^class Agent(Named):$/;"	c
AnBnCnDataSet	tools/pybrain/examples/supervised/backprop/datasets/anbncn.py	/^class AnBnCnDataSet(SequentialDataSet):$/;"	c
Array	tools/pybrain/docs/html/_static/jquery.js	/^return jQuery(context).find(selector);}else if(jQuery.isFunction(selector))return jQuery(document)[jQuery.fn.ready?"ready":"load"](selector);return this.setArray(jQuery.makeArray(selector));},jquery:"1.2.6",size:function(){return this.length;},length:0,get:function(num){return num==undefined?jQuery.makeArray(this):this[num];},pushStack:function(elems){var ret=jQuery(elems);ret.prevObject=this;return ret;},setArray:function(elems){this.length=0;Array.prototype.push.apply(this,elems);return this;},each:function(callback,args){return jQuery.each(this,callback,args);},index:function(elem){var ret=-1;return jQuery.inArray(elem&&elem.jquery?elem[0]:elem,this);},attr:function(name,value,type){var options=name;if(name.constructor==String)if(value===undefined)return this[0]&&jQuery[type||"attr"](this[0],name);else{options={};options[name]=value;}return this.each(function(i){for(name in options)jQuery.attr(type?this.style:this,name,jQuery.prop(this,options[name],type,i,name));});},css:function(key,value){if((key=='width'||key=='height')&&parseFloat(value)<0)value=undefined;return this.attr(key,value,"curCSS");},text:function(text){if(typeof text!="object"&&text!=null)return this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(text));var ret="";jQuery.each(text||this,function(){jQuery.each(this.childNodes,function(){if(this.nodeType!=8)ret+=this.nodeType!=1?this.nodeValue:jQuery.fn.text([this]);});});return ret;},wrapAll:function(html){if(this[0])jQuery(html,this[0].ownerDocument).clone().insertBefore(this[0]).map(function(){var elem=this;while(elem.firstChild)elem=elem.firstChild;return elem;}).append(this);return this;},wrapInner:function(html){return this.each(function(){jQuery(this).contents().wrapAll(html);});},wrap:function(html){return this.each(function(){jQuery(this).wrapAll(html);});},append:function(){return this.domManip(arguments,true,false,function(elem){if(this.nodeType==1)this.appendChild(elem);});},prepend:function(){return this.domManip(arguments,true,true,function(elem){if(this.nodeType==1)this.insertBefore(elem,this.firstChild);});},before:function(){return this.domManip(arguments,false,false,function(elem){this.parentNode.insertBefore(elem,this);});},after:function(){return this.domManip(arguments,false,true,function(elem){this.parentNode.insertBefore(elem,this.nextSibling);});},end:function(){return this.prevObject||jQuery([]);},find:function(selector){var elems=jQuery.map(this,function(elem){return jQuery.find(selector,elem);});return this.pushStack(\/[^+>] [^+>]\/.test(selector)||selector.indexOf("..")>-1?jQuery.unique(elems):elems);},clone:function(events){var ret=this.map(function(){if(jQuery.browser.msie&&!jQuery.isXMLDoc(this)){var clone=this.cloneNode(true),container=document.createElement("div");container.appendChild(clone);return jQuery.clean([container.innerHTML])[0];}else$/;"	c
Array.push	tools/pybrain/docs/html/_static/jquery.js	/^return jQuery(context).find(selector);}else if(jQuery.isFunction(selector))return jQuery(document)[jQuery.fn.ready?"ready":"load"](selector);return this.setArray(jQuery.makeArray(selector));},jquery:"1.2.6",size:function(){return this.length;},length:0,get:function(num){return num==undefined?jQuery.makeArray(this):this[num];},pushStack:function(elems){var ret=jQuery(elems);ret.prevObject=this;return ret;},setArray:function(elems){this.length=0;Array.prototype.push.apply(this,elems);return this;},each:function(callback,args){return jQuery.each(this,callback,args);},index:function(elem){var ret=-1;return jQuery.inArray(elem&&elem.jquery?elem[0]:elem,this);},attr:function(name,value,type){var options=name;if(name.constructor==String)if(value===undefined)return this[0]&&jQuery[type||"attr"](this[0],name);else{options={};options[name]=value;}return this.each(function(i){for(name in options)jQuery.attr(type?this.style:this,name,jQuery.prop(this,options[name],type,i,name));});},css:function(key,value){if((key=='width'||key=='height')&&parseFloat(value)<0)value=undefined;return this.attr(key,value,"curCSS");},text:function(text){if(typeof text!="object"&&text!=null)return this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(text));var ret="";jQuery.each(text||this,function(){jQuery.each(this.childNodes,function(){if(this.nodeType!=8)ret+=this.nodeType!=1?this.nodeValue:jQuery.fn.text([this]);});});return ret;},wrapAll:function(html){if(this[0])jQuery(html,this[0].ownerDocument).clone().insertBefore(this[0]).map(function(){var elem=this;while(elem.firstChild)elem=elem.firstChild;return elem;}).append(this);return this;},wrapInner:function(html){return this.each(function(){jQuery(this).contents().wrapAll(html);});},wrap:function(html){return this.each(function(){jQuery(this).wrapAll(html);});},append:function(){return this.domManip(arguments,true,false,function(elem){if(this.nodeType==1)this.appendChild(elem);});},prepend:function(){return this.domManip(arguments,true,true,function(elem){if(this.nodeType==1)this.insertBefore(elem,this.firstChild);});},before:function(){return this.domManip(arguments,false,false,function(elem){this.parentNode.insertBefore(elem,this);});},after:function(){return this.domManip(arguments,false,true,function(elem){this.parentNode.insertBefore(elem,this.nextSibling);});},end:function(){return this.prevObject||jQuery([]);},find:function(selector){var elems=jQuery.map(this,function(elem){return jQuery.find(selector,elem);});return this.pushStack(\/[^+>] [^+>]\/.test(selector)||selector.indexOf("..")>-1?jQuery.unique(elems):elems);},clone:function(events){var ret=this.map(function(){if(jQuery.browser.msie&&!jQuery.isXMLDoc(this)){var clone=this.cloneNode(true),container=document.createElement("div");container.appendChild(clone);return jQuery.clean([container.innerHTML])[0];}else$/;"	m
AttractiveSectorFunction	pybrain/rl/environments/functions/unimodal.py	/^class AttractiveSectorFunction(FunctionEnvironment):$/;"	c
AttractiveSectorFunction	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^class AttractiveSectorFunction(FunctionEnvironment):$/;"	c
BANG_BANG	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	50;"	d	file:
BANG_BANG	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	50;"	d	file:
BBOBTransformationFunction	pybrain/rl/environments/functions/transformations.py	/^class BBOBTransformationFunction(FunctionEnvironment):$/;"	c
BBOBTransformationFunction	tools/pybrain/pybrain/rl/environments/functions/transformations.py	/^class BBOBTransformationFunction(FunctionEnvironment):$/;"	c
BEST_KNOWN_TABLE	pybrain/rl/environments/functions/lennardjones.py	/^    BEST_KNOWN_TABLE = {0:0, 1:0,$/;"	v	class:LennardJones
BEST_KNOWN_TABLE	tools/pybrain/pybrain/rl/environments/functions/lennardjones.py	/^    BEST_KNOWN_TABLE = {0:0, 1:0,$/;"	v	class:LennardJones
BIAS	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	41;"	d	file:
BIAS	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	41;"	d	file:
BLACK	pybrain/rl/environments/twoplayergames/capturegame.py	/^    BLACK = 1$/;"	v	class:CaptureGame
BLACK	pybrain/rl/environments/twoplayergames/gomoku.py	/^    BLACK = 1$/;"	v	class:GomokuGame
BLACK	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    BLACK = 1$/;"	v	class:CaptureGame
BLACK	tools/pybrain/pybrain/rl/environments/twoplayergames/gomoku.py	/^    BLACK = 1$/;"	v	class:GomokuGame
BLOCKBASELINE	pybrain/optimization/distributionbased/nes.py	/^    BLOCKBASELINE = 3$/;"	v	class:ExactNES
BLOCKBASELINE	tools/pybrain/pybrain/optimization/distributionbased/nes.py	/^    BLOCKBASELINE = 3$/;"	v	class:ExactNES
BackpropTrainer	pybrain/supervised/trainers/backprop.py	/^class BackpropTrainer(Trainer):$/;"	c
BackpropTrainer	tools/pybrain/pybrain/supervised/trainers/backprop.py	/^class BackpropTrainer(Trainer):$/;"	c
Backup	pybrain/rl/environments/mazes/tasks/shuttle.py	/^    Backup = 0$/;"	v	class:ShuttleDocking
Backup	tools/pybrain/pybrain/rl/environments/mazes/tasks/shuttle.py	/^    Backup = 0$/;"	v	class:ShuttleDocking
BalanceTask	pybrain/rl/environments/cartpole/balancetask.py	/^class BalanceTask(EpisodicTask):$/;"	c
BalanceTask	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^class BalanceTask(EpisodicTask):$/;"	c
BenchmarkDataSet	pybrain/tools/benchmark.py	/^class BenchmarkDataSet(DataSet):$/;"	c
BenchmarkDataSet	tools/pybrain/pybrain/tools/benchmark.py	/^class BenchmarkDataSet(DataSet):$/;"	c
BenchmarkingAgent	pybrain/tools/rlgluebridge.py	/^class BenchmarkingAgent(object):$/;"	c
BenchmarkingAgent	tools/pybrain/pybrain/tools/rlgluebridge.py	/^class BenchmarkingAgent(object):$/;"	c
BernoulliLayer	pybrain/structure/modules/samplelayer.py	/^class BernoulliLayer(SampleLayer):$/;"	c
BernoulliLayer	tools/pybrain/pybrain/structure/modules/samplelayer.py	/^class BernoulliLayer(SampleLayer):$/;"	c
BiasUnit	pybrain/structure/modules/biasunit.py	/^class BiasUnit(NeuronLayer):$/;"	c
BiasUnit	tools/pybrain/pybrain/structure/modules/biasunit.py	/^class BiasUnit(NeuronLayer):$/;"	c
BidirectionalNetwork	pybrain/structure/networks/bidirectional.py	/^class BidirectionalNetwork(FeedForwardNetwork):$/;"	c
BidirectionalNetwork	tools/pybrain/pybrain/structure/networks/bidirectional.py	/^class BidirectionalNetwork(FeedForwardNetwork):$/;"	c
BilinearRanking	pybrain/tools/rankingfunctions.py	/^class BilinearRanking(RankingFunction):$/;"	c
BilinearRanking	tools/pybrain/pybrain/tools/rankingfunctions.py	/^class BilinearRanking(RankingFunction):$/;"	c
BlackBoxOptimizer	pybrain/optimization/optimizer.py	/^class BlackBoxOptimizer(DirectSearchLearner):$/;"	c
BlackBoxOptimizer	tools/pybrain/pybrain/optimization/optimizer.py	/^class BlackBoxOptimizer(DirectSearchLearner):$/;"	c
Body	pybrain/rl/environments/ode/xode_changes/body.py	/^class Body(node.TreeNode):$/;"	c
Body	tools/pybrain/pybrain/rl/environments/ode/xode_changes/body.py	/^class Body(node.TreeNode):$/;"	c
BodyDistanceSensor	pybrain/rl/environments/ode/sensors.py	/^class BodyDistanceSensor(Sensor):$/;"	c
BodyDistanceSensor	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^class BodyDistanceSensor(Sensor):$/;"	c
BodyPositionSensor	pybrain/rl/environments/ode/sensors.py	/^class BodyPositionSensor(Sensor):$/;"	c
BodyPositionSensor	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^class BodyPositionSensor(Sensor):$/;"	c
BoltzmanPolicy	policy/BoltzmanAC.py	/^class BoltzmanPolicy(Module, ParameterContainer, PolicyInterface):$/;"	c
BoltzmanPolicyTestCase	policy/BoltzmanAC.py	/^class BoltzmanPolicyTestCase(unittest.TestCase):$/;"	c
BoltzmannExplorer	pybrain/rl/explorers/discrete/boltzmann.py	/^class BoltzmannExplorer(DiscreteExplorer):$/;"	c
BoltzmannExplorer	tools/pybrain/pybrain/rl/explorers/discrete/boltzmann.py	/^class BoltzmannExplorer(DiscreteExplorer):$/;"	c
BorderSwipingNetwork	pybrain/structure/networks/borderswiping.py	/^class BorderSwipingNetwork(SwipingNetwork):$/;"	c
BorderSwipingNetwork	tools/pybrain/pybrain/structure/networks/borderswiping.py	/^class BorderSwipingNetwork(SwipingNetwork):$/;"	c
BoundedLinear	pybrain/rl/environments/functions/unimodal.py	/^class BoundedLinear(FunctionEnvironment):$/;"	c
BoundedLinear	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^class BoundedLinear(FunctionEnvironment):$/;"	c
BraninFunction	pybrain/rl/environments/functions/multimodal.py	/^class BraninFunction(MultiModalFunction):$/;"	c
BraninFunction	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^class BraninFunction(MultiModalFunction):$/;"	c
BucheRastriginFunction	pybrain/rl/environments/functions/multimodal.py	/^class BucheRastriginFunction(MultiModalFunction):$/;"	c
BucheRastriginFunction	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^class BucheRastriginFunction(MultiModalFunction):$/;"	c
C	pybrain/optimization/populationbased/coevolution/competitivecoevolution.py	/^    C = CompetitiveCoevolution(None, [1, 2, 3, 4, 5, 6, 7, 8], populationSize=4)$/;"	v	class:CompetitiveCoevolution
C	pybrain/tools/kwargsprocessor.py	/^    class C(object):$/;"	c	class:KWArgsProcessor
C	tools/pybrain/pybrain/optimization/populationbased/coevolution/competitivecoevolution.py	/^    C = CompetitiveCoevolution(None, [1, 2, 3, 4, 5, 6, 7, 8], populationSize=4)$/;"	v	class:CompetitiveCoevolution
C	tools/pybrain/pybrain/tools/kwargsprocessor.py	/^    class C(object):$/;"	c	class:KWArgsProcessor
CALW_OPTION	examples/problem_settings.py	/^CALW_OPTION = 'EXP'$/;"	v
CALW_OPTION	settings.py	/^CALW_OPTION = 'EXP'$/;"	v
CAL_EXACT_PROB	examples/problem_settings.py	/^CAL_EXACT_PROB = True$/;"	v
CAL_EXACT_PROB	settings.py	/^CAL_EXACT_PROB = True$/;"	v
CAUCHY	pybrain/optimization/distributionbased/distributionbased.py	/^    CAUCHY = 2$/;"	v	class:DistributionBasedOptimizer
CAUCHY	tools/pybrain/pybrain/optimization/distributionbased/distributionbased.py	/^    CAUCHY = 2$/;"	v	class:DistributionBasedOptimizer
CCRLEnvironment	pybrain/rl/environments/ode/instances/ccrl.py	/^class CCRLEnvironment(ODEEnvironment):$/;"	c
CCRLEnvironment	tools/pybrain/pybrain/rl/environments/ode/instances/ccrl.py	/^class CCRLEnvironment(ODEEnvironment):$/;"	c
CCRLGlasTask	pybrain/rl/environments/ode/tasks/ccrl.py	/^class CCRLGlasTask(CCRLTask):$/;"	c
CCRLGlasTask	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^class CCRLGlasTask(CCRLTask):$/;"	c
CCRLGlasVarRandTask	pybrain/rl/environments/ode/tasks/ccrl.py	/^class CCRLGlasVarRandTask(CCRLGlasVarTask):$/;"	c
CCRLGlasVarRandTask	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^class CCRLGlasVarRandTask(CCRLGlasVarTask):$/;"	c
CCRLGlasVarTask	pybrain/rl/environments/ode/tasks/ccrl.py	/^class CCRLGlasVarTask(CCRLGlasTask):$/;"	c
CCRLGlasVarTask	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^class CCRLGlasVarTask(CCRLGlasTask):$/;"	c
CCRLPlateTask	pybrain/rl/environments/ode/tasks/ccrl.py	/^class CCRLPlateTask(CCRLTask):$/;"	c
CCRLPlateTask	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^class CCRLPlateTask(CCRLTask):$/;"	c
CCRLPointTask	pybrain/rl/environments/ode/tasks/ccrl.py	/^class CCRLPointTask(CCRLGlasVarTask):$/;"	c
CCRLPointTask	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^class CCRLPointTask(CCRLGlasVarTask):$/;"	c
CCRLPointVarTask	pybrain/rl/environments/ode/tasks/ccrl.py	/^class CCRLPointVarTask(CCRLPointTask):$/;"	c
CCRLPointVarTask	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^class CCRLPointVarTask(CCRLPointTask):$/;"	c
CCRLTask	pybrain/rl/environments/ode/tasks/ccrl.py	/^class CCRLTask(EpisodicTask):$/;"	c
CCRLTask	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^class CCRLTask(EpisodicTask):$/;"	c
CENTERS	pybrain/rl/environments/cartpole/balancetask.py	/^    CENTERS = array(crossproduct([[-pi\/4, 0, pi\/4], [1, 0, -1]]))$/;"	v	class:DiscreteBalanceTaskRBF
CENTERS	pybrain/rl/environments/cartpole/balancetask.py	/^    CENTERS = array(crossproduct([[-pi\/4, 0, pi\/4], [1, 0, -1]]*2))  $/;"	v	class:DiscreteDoubleBalanceTaskRBF
CENTERS	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    CENTERS = array(crossproduct([[-pi\/4, 0, pi\/4], [1, 0, -1]]))$/;"	v	class:DiscreteBalanceTaskRBF
CENTERS	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    CENTERS = array(crossproduct([[-pi\/4, 0, pi\/4], [1, 0, -1]]*2))  $/;"	v	class:DiscreteDoubleBalanceTaskRBF
CMAES	pybrain/optimization/distributionbased/cmaes.py	/^class CMAES(ContinuousOptimizer):$/;"	c
CMAES	tools/pybrain/pybrain/optimization/distributionbased/cmaes.py	/^class CMAES(ContinuousOptimizer):$/;"	c
COMP_FIG_FILE	compare.py	/^COMP_FIG_FILE = '.\/res\/comp.eps'$/;"	v
COMP_FIG_FILE	multirun.py	/^COMP_FIG_FILE = '.\/res\/comp.eps'$/;"	v
COMP_FIG_FILE_REAL_T	compare.py	/^COMP_FIG_FILE_REAL_T = '.\/res\/com-rt.eps'$/;"	v
CS	tools/pybrain/examples/supervised/neuralnets+svm/example_fnn.py	/^        CS = contourf(X, Y, out)$/;"	v
CalW	examples/problem_settings.py	/^CalW = CalWDict[CALW_OPTION]$/;"	v
CalW	policy/BoltzmanAC.py	/^    CalW = CalW_EXP$/;"	v	class:BoltzmanPolicy
CalW	settings.py	/^CalW = CalWDict[CALW_OPTION]$/;"	v
CalWDict	examples/problem_settings.py	/^CalWDict = {'EXP':CalW_EXP, 'TANH':CalW_TANH}$/;"	v
CalWDict	settings.py	/^CalWDict = {'EXP':CalW_EXP, 'TANH':CalW_TANH}$/;"	v
CalW_EXP	examples/problem_settings.py	/^def CalW_EXP(score, theta):$/;"	f
CalW_EXP	policy/BoltzmanAC.py	/^    def CalW_EXP(score, theta, T):$/;"	m	class:BoltzmanPolicy
CalW_EXP	settings.py	/^def CalW_EXP(score, theta):$/;"	f
CalW_TANH	examples/problem_settings.py	/^def CalW_TANH(score, theta):$/;"	f
CalW_TANH	settings.py	/^def CalW_TANH(score, theta):$/;"	f
CaptureGame	pybrain/rl/environments/twoplayergames/capturegame.py	/^class CaptureGame(TwoPlayerGame):$/;"	c
CaptureGame	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^class CaptureGame(TwoPlayerGame):$/;"	c
CaptureGameNetwork	pybrain/structure/networks/custom/capturegame.py	/^class CaptureGameNetwork(BorderSwipingNetwork):$/;"	c
CaptureGameNetwork	tools/pybrain/pybrain/structure/networks/custom/capturegame.py	/^class CaptureGameNetwork(BorderSwipingNetwork):$/;"	c
CaptureGameTask	pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^class CaptureGameTask(EpisodicTask, Named):$/;"	c
CaptureGameTask	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^class CaptureGameTask(EpisodicTask, Named):$/;"	c
CapturePlayer	pybrain/rl/environments/twoplayergames/capturegameplayers/captureplayer.py	/^class CapturePlayer(Agent):$/;"	c
CapturePlayer	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/captureplayer.py	/^class CapturePlayer(Agent):$/;"	c
CartPoleEnvironment	pybrain/rl/environments/cartpole/cartpole.py	/^class CartPoleEnvironment(GraphicalEnvironment):$/;"	c
CartPoleEnvironment	tools/pybrain/pybrain/rl/environments/cartpole/cartpole.py	/^class CartPoleEnvironment(GraphicalEnvironment):$/;"	c
CartPoleLinEnvironment	pybrain/rl/environments/cartpole/cartpole.py	/^class CartPoleLinEnvironment(CartPoleEnvironment):$/;"	c
CartPoleLinEnvironment	tools/pybrain/pybrain/rl/environments/cartpole/cartpole.py	/^class CartPoleLinEnvironment(CartPoleEnvironment):$/;"	c
CartPoleRenderer	pybrain/rl/environments/cartpole/renderer.py	/^class CartPoleRenderer(Renderer):$/;"	c
CartPoleRenderer	tools/pybrain/pybrain/rl/environments/cartpole/renderer.py	/^class CartPoleRenderer(Renderer):$/;"	c
CauchyVariate	pybrain/supervised/evolino/variate.py	/^class CauchyVariate:$/;"	c
CauchyVariate	tools/pybrain/pybrain/supervised/evolino/variate.py	/^class CauchyVariate:$/;"	c
CheaplyCopiable	pybrain/structure/evolvables/cheaplycopiable.py	/^class CheaplyCopiable(ParameterContainer, Module):$/;"	c
CheaplyCopiable	tools/pybrain/pybrain/structure/evolvables/cheaplycopiable.py	/^class CheaplyCopiable(ParameterContainer, Module):$/;"	c
CheckMember	util.py	/^def CheckMember(obj, mSet):$/;"	f
CheeseMaze	pybrain/rl/environments/mazes/tasks/cheesemaze.py	/^class CheeseMaze(MazeTask):$/;"	c
CheeseMaze	tools/pybrain/pybrain/rl/environments/mazes/tasks/cheesemaze.py	/^class CheeseMaze(MazeTask):$/;"	c
CiaoPlot	pybrain/tools/plotting/ciaoplot.py	/^class CiaoPlot(ColorMap):$/;"	c
CiaoPlot	tools/pybrain/pybrain/tools/plotting/ciaoplot.py	/^class CiaoPlot(ColorMap):$/;"	c
CigarFunction	pybrain/rl/environments/functions/unimodal.py	/^class CigarFunction(FunctionEnvironment):$/;"	c
CigarFunction	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^class CigarFunction(FunctionEnvironment):$/;"	c
ClassificationDataSet	pybrain/datasets/classification.py	/^class ClassificationDataSet(SupervisedDataSet):$/;"	c
ClassificationDataSet	tools/pybrain/pybrain/datasets/classification.py	/^class ClassificationDataSet(SupervisedDataSet):$/;"	c
ClassificationHelper	pybrain/tools/validation.py	/^class ClassificationHelper(object):$/;"	c
ClassificationHelper	tools/pybrain/pybrain/tools/validation.py	/^class ClassificationHelper(object):$/;"	c
ClientCapturePlayer	pybrain/rl/environments/twoplayergames/capturegameplayers/clientwrapper.py	/^class ClientCapturePlayer(CapturePlayer):$/;"	c
ClientCapturePlayer	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/clientwrapper.py	/^class ClientCapturePlayer(CapturePlayer):$/;"	c
Coevolution	pybrain/optimization/populationbased/coevolution/coevolution.py	/^class Coevolution(Named):$/;"	c
Coevolution	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^class Coevolution(Named):$/;"	c
ColorMap	pybrain/tools/plotting/colormaps.py	/^class ColorMap:$/;"	c
ColorMap	tools/pybrain/pybrain/tools/plotting/colormaps.py	/^class ColorMap:$/;"	c
CompetitiveCoevolution	pybrain/optimization/populationbased/coevolution/competitivecoevolution.py	/^class CompetitiveCoevolution(Coevolution):$/;"	c
CompetitiveCoevolution	tools/pybrain/pybrain/optimization/populationbased/coevolution/competitivecoevolution.py	/^class CompetitiveCoevolution(Coevolution):$/;"	c
CompetitiveEnvironment	pybrain/rl/environments/twoplayergames/twoplayergame.py	/^class CompetitiveEnvironment(Environment):$/;"	c
CompetitiveEnvironment	tools/pybrain/pybrain/rl/environments/twoplayergames/twoplayergame.py	/^class CompetitiveEnvironment(Environment):$/;"	c
ConTest	compare.py	/^def ConTest(experiment, task, agent, learner, reachProb, traceFile):$/;"	f
ConfigGrabber	pybrain/rl/environments/ode/tools/configgrab.py	/^class ConfigGrabber:$/;"	c
ConfigGrabber	tools/pybrain/pybrain/rl/environments/ode/tools/configgrab.py	/^class ConfigGrabber:$/;"	c
Connection	pybrain/structure/connections/connection.py	/^class Connection(Named):$/;"	c
Connection	tools/pybrain/pybrain/structure/connections/connection.py	/^class Connection(Named):$/;"	c
ContinuousExperiment	pybrain/rl/experiments/continuous.py	/^class ContinuousExperiment(Experiment):$/;"	c
ContinuousExperiment	tools/pybrain/pybrain/rl/experiments/continuous.py	/^class ContinuousExperiment(Experiment):$/;"	c
ContinuousOptimizer	pybrain/optimization/optimizer.py	/^class ContinuousOptimizer(BlackBoxOptimizer):$/;"	c
ContinuousOptimizer	tools/pybrain/pybrain/optimization/optimizer.py	/^class ContinuousOptimizer(BlackBoxOptimizer):$/;"	c
ConvolutionalBoardNetwork	pybrain/structure/networks/custom/convboard.py	/^class ConvolutionalBoardNetwork(SimpleConvolutionalNetwork):$/;"	c
ConvolutionalBoardNetwork	tools/pybrain/pybrain/structure/networks/custom/convboard.py	/^class ConvolutionalBoardNetwork(SimpleConvolutionalNetwork):$/;"	c
CopyJointActuator	pybrain/rl/environments/ode/actuators.py	/^class CopyJointActuator(JointActuator):$/;"	c
CopyJointActuator	tools/pybrain/pybrain/rl/environments/ode/actuators.py	/^class CopyJointActuator(JointActuator):$/;"	c
Critic	learners/HessianACLearner.py	/^    def Critic(self, xk, uk, gk, xkp1, ukp1, xkPsi, xkp1Psi, xkVarsigma, xkp1Varsigma):$/;"	m	class:HessianACLearner
Critic	learners/LSTDACLearner.py	/^    def Critic(self, xk, uk, gk, xkp1, ukp1, xkPsi, xkp1Psi):$/;"	m	class:LSTDACLearner
Critic	learners/TDLearner.py	/^    def Critic(self, xk, uk, gk, xkPsi, xkp1, ukp1, gkp1, xkp1Psi):$/;"	m	class:TDLearner
CrossValidator	pybrain/tools/validation.py	/^class CrossValidator(object):$/;"	c
CrossValidator	tools/pybrain/pybrain/tools/validation.py	/^class CrossValidator(object):$/;"	c
D	examples/LSTDAC.py	/^        D=2,$/;"	v
D	examples/problem_settings.py	/^D = 10$/;"	v
D	settings.py	/^D = 10$/;"	v
DF	examples/problem_settings.py	/^DF = lambda x, y: abs(x[0] - y[0]) + abs(x[1] - y[1])$/;"	v
DF	settings.py	/^DF = lambda x, y: abs(x[0] - y[0]) + abs(x[1] - y[1])$/;"	v
DRAW	pybrain/rl/environments/twoplayergames/twoplayergame.py	/^    DRAW = 'draw'$/;"	v	class:TwoPlayerGame
DRAW	tools/pybrain/pybrain/rl/environments/twoplayergames/twoplayergame.py	/^    DRAW = 'draw'$/;"	v	class:TwoPlayerGame
DS	tools/pybrain/examples/supervised/backprop/parityrnn.py	/^    DS = ParityDataSet()$/;"	v
DataSet	pybrain/datasets/dataset.py	/^class DataSet(Serializable):$/;"	c
DataSet	tools/pybrain/pybrain/datasets/dataset.py	/^class DataSet(Serializable):$/;"	c
DataSetLearner	pybrain/rl/learners/learner.py	/^class DataSetLearner(EpisodicLearner):$/;"	c
DataSetLearner	tools/pybrain/pybrain/rl/learners/learner.py	/^class DataSetLearner(EpisodicLearner):$/;"	c
DataSetNormalizer	pybrain/tools/datasettools.py	/^class DataSetNormalizer(object):$/;"	c
DataSetNormalizer	tools/pybrain/pybrain/tools/datasettools.py	/^class DataSetNormalizer(object):$/;"	c
DeepBeliefTrainer	pybrain/unsupervised/trainers/deepbelief.py	/^class DeepBeliefTrainer(Trainer):$/;"	c
DeepBeliefTrainer	tools/pybrain/pybrain/unsupervised/trainers/deepbelief.py	/^class DeepBeliefTrainer(Trainer):$/;"	c
DesiredFoundException	pybrain/optimization/neldermead.py	/^class DesiredFoundException(Exception):$/;"	c
DesiredFoundException	tools/pybrain/pybrain/optimization/neldermead.py	/^class DesiredFoundException(Exception):$/;"	c
DiffPowFunction	pybrain/rl/environments/functions/unimodal.py	/^class DiffPowFunction(FunctionEnvironment):$/;"	c
DiffPowFunction	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^class DiffPowFunction(FunctionEnvironment):$/;"	c
DirectSearchLearner	pybrain/rl/learners/directsearch/directsearch.py	/^class DirectSearchLearner(Learner):$/;"	c
DirectSearchLearner	tools/pybrain/pybrain/rl/learners/directsearch/directsearch.py	/^class DirectSearchLearner(Learner):$/;"	c
DiscreteBalanceTask	pybrain/rl/environments/cartpole/balancetask.py	/^class DiscreteBalanceTask(BalanceTask):$/;"	c
DiscreteBalanceTask	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^class DiscreteBalanceTask(BalanceTask):$/;"	c
DiscreteBalanceTaskRBF	pybrain/rl/environments/cartpole/balancetask.py	/^class DiscreteBalanceTaskRBF(DiscreteBalanceTask):$/;"	c
DiscreteBalanceTaskRBF	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^class DiscreteBalanceTaskRBF(DiscreteBalanceTask):$/;"	c
DiscreteDoubleBalanceTaskRBF	pybrain/rl/environments/cartpole/balancetask.py	/^class DiscreteDoubleBalanceTaskRBF(DiscreteBalanceTaskRBF):$/;"	c
DiscreteDoubleBalanceTaskRBF	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^class DiscreteDoubleBalanceTaskRBF(DiscreteBalanceTaskRBF):$/;"	c
DiscreteExplorer	pybrain/rl/explorers/discrete/discrete.py	/^class DiscreteExplorer(Explorer):$/;"	c
DiscreteExplorer	tools/pybrain/pybrain/rl/explorers/discrete/discrete.py	/^class DiscreteExplorer(Explorer):$/;"	c
DiscreteNoHelpTask	pybrain/rl/environments/cartpole/balancetask.py	/^class DiscreteNoHelpTask(DiscreteBalanceTask):$/;"	c
DiscreteNoHelpTask	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^class DiscreteNoHelpTask(DiscreteBalanceTask):$/;"	c
DiscretePOMDPTask	pybrain/rl/environments/cartpole/balancetask.py	/^class DiscretePOMDPTask(DiscreteBalanceTask):$/;"	c
DiscretePOMDPTask	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^class DiscretePOMDPTask(DiscreteBalanceTask):$/;"	c
DiscreteStateDependentExplorer	pybrain/rl/explorers/discrete/discretesde.py	/^class DiscreteStateDependentExplorer(DiscreteExplorer):$/;"	c
DiscreteStateDependentExplorer	tools/pybrain/pybrain/rl/explorers/discrete/discretesde.py	/^class DiscreteStateDependentExplorer(DiscreteExplorer):$/;"	c
DistToOrigin	pybrain/rl/environments/flexcube/sensors.py	/^class DistToOrigin(defaultSensor):$/;"	c
DistToOrigin	tools/pybrain/pybrain/rl/environments/flexcube/sensors.py	/^class DistToOrigin(defaultSensor):$/;"	c
DistToPointSensor	pybrain/rl/environments/ode/sensors.py	/^class DistToPointSensor(Sensor):$/;"	c
DistToPointSensor	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^class DistToPointSensor(Sensor):$/;"	c
DistributionBasedOptimizer	pybrain/optimization/distributionbased/distributionbased.py	/^class DistributionBasedOptimizer(ContinuousOptimizer):$/;"	c
DistributionBasedOptimizer	tools/pybrain/pybrain/optimization/distributionbased/distributionbased.py	/^class DistributionBasedOptimizer(ContinuousOptimizer):$/;"	c
DivergenceError	pybrain/utilities.py	/^class DivergenceError(Exception):$/;"	c
DivergenceError	tools/pybrain/pybrain/utilities.py	/^class DivergenceError(Exception):$/;"	c
DoAction	pybrain/rl/environments/classic/acrobot.py	/^    def DoAction(self, a, x):$/;"	m	class:AcrobotTask
DoAction	pybrain/rl/environments/classic/mountaincar.py	/^    def DoAction(self, a, s):$/;"	m	class:MountainCar
DoAction	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    def DoAction(self, a, x):$/;"	m	class:AcrobotTask
DoAction	tools/pybrain/pybrain/rl/environments/classic/mountaincar.py	/^    def DoAction(self, a, s):$/;"	m	class:MountainCar
Documentation.TRANSLATIONS	tools/pybrain/docs/html/_static/doctools.js	/^  },$/;"	p
Documentation.init	tools/pybrain/docs/html/_static/doctools.js	/^var Documentation = {$/;"	m
DoubleGateLayer	pybrain/structure/modules/gate.py	/^class DoubleGateLayer(NeuronLayer):$/;"	c
DoubleGateLayer	tools/pybrain/pybrain/structure/modules/gate.py	/^class DoubleGateLayer(NeuronLayer):$/;"	c
DoublePoleEnvironment	pybrain/rl/environments/cartpole/doublepole.py	/^class DoublePoleEnvironment(Environment):$/;"	c
DoublePoleEnvironment	tools/pybrain/pybrain/rl/environments/cartpole/doublepole.py	/^class DoublePoleEnvironment(Environment):$/;"	c
E	pybrain/rl/environments/mazes/maze.py	/^    E = (0, 1)$/;"	v	class:Maze
E	tools/pybrain/pybrain/rl/environments/mazes/maze.py	/^    E = (0, 1)$/;"	v	class:Maze
EMPTY	pybrain/rl/environments/twoplayergames/capturegame.py	/^    EMPTY = 0$/;"	v	class:CaptureGame
EMPTY	pybrain/rl/environments/twoplayergames/gomoku.py	/^    EMPTY = 0$/;"	v	class:GomokuGame
EMPTY	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    EMPTY = 0$/;"	v	class:CaptureGame
EMPTY	tools/pybrain/pybrain/rl/environments/twoplayergames/gomoku.py	/^    EMPTY = 0$/;"	v	class:GomokuGame
ENAC	learners/ENACLearner.py	/^class ENAC(ActorCriticLearner):$/;"	c
ENAC	pybrain/rl/learners/directsearch/enac.py	/^class ENAC(PolicyGradientLearner):$/;"	c
ENAC	tools/pybrain/pybrain/rl/learners/directsearch/enac.py	/^class ENAC(PolicyGradientLearner):$/;"	c
ENACAC_TEST	compare.py	/^def ENACAC_TEST():$/;"	f
ENAC_TRACE_FILE	compare.py	/^ENAC_TRACE_FILE = '.\/res\/enac.p'$/;"	v
ENAC_TRACE_FILE	multirun.py	/^ENAC_TRACE_FILE = '.\/res\/enac.p'$/;"	v
ES	pybrain/optimization/populationbased/es.py	/^class ES(BlackBoxOptimizer):$/;"	c
ES	tools/pybrain/pybrain/optimization/populationbased/es.py	/^class ES(BlackBoxOptimizer):$/;"	c
ESS	pybrain/tools/validation.py	/^    def ESS(cls, output, target):$/;"	m	class:Validator
ESS	tools/pybrain/pybrain/tools/validation.py	/^    def ESS(cls, output, target):$/;"	m	class:Validator
EULER_TAU	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	281;"	d	file:
EULER_TAU	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	281;"	d	file:
EasyBalanceTask	pybrain/rl/environments/cartpole/balancetask.py	/^class EasyBalanceTask(BalanceTask):$/;"	c
EasyBalanceTask	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^class EasyBalanceTask(BalanceTask):$/;"	c
EdgesReal	pybrain/rl/environments/flexcube/sensors.py	/^class EdgesReal(defaultSensor):$/;"	c
EdgesReal	tools/pybrain/pybrain/rl/environments/flexcube/sensors.py	/^class EdgesReal(defaultSensor):$/;"	c
EdgesSumReal	pybrain/rl/environments/flexcube/sensors.py	/^class EdgesSumReal(defaultSensor):$/;"	c
EdgesSumReal	tools/pybrain/pybrain/rl/environments/flexcube/sensors.py	/^class EdgesSumReal(defaultSensor):$/;"	c
EdgesTarget	pybrain/rl/environments/flexcube/sensors.py	/^class EdgesTarget(defaultSensor):$/;"	c
EdgesTarget	tools/pybrain/pybrain/rl/environments/flexcube/sensors.py	/^class EdgesTarget(defaultSensor):$/;"	c
EightyNineStateMaze	pybrain/rl/environments/mazes/tasks/maze89state.py	/^class EightyNineStateMaze(MazeTask):$/;"	c
EightyNineStateMaze	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze89state.py	/^class EightyNineStateMaze(MazeTask):$/;"	c
ElliFunction	pybrain/rl/environments/functions/unimodal.py	/^class ElliFunction(FunctionEnvironment):$/;"	c
ElliFunction	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^class ElliFunction(FunctionEnvironment):$/;"	c
EmptySequenceError	pybrain/datasets/sequential.py	/^class EmptySequenceError(Exception): pass$/;"	c
EmptySequenceError	tools/pybrain/pybrain/datasets/sequential.py	/^class EmptySequenceError(Exception): pass$/;"	c
Environment	pybrain/rl/environments/environment.py	/^class Environment(object):$/;"	c
Environment	tools/pybrain/pybrain/rl/environments/environment.py	/^class Environment(object):$/;"	c
EpisodicExperiment	pybrain/rl/experiments/episodic.py	/^class EpisodicExperiment(Experiment):$/;"	c
EpisodicExperiment	tools/pybrain/pybrain/rl/experiments/episodic.py	/^class EpisodicExperiment(Experiment):$/;"	c
EpisodicLearner	pybrain/rl/learners/learner.py	/^class EpisodicLearner(Learner):$/;"	c
EpisodicLearner	tools/pybrain/pybrain/rl/learners/learner.py	/^class EpisodicLearner(Learner):$/;"	c
EpisodicTask	pybrain/rl/environments/episodic.py	/^class EpisodicTask(Task, FitnessEvaluator):$/;"	c
EpisodicTask	tools/pybrain/pybrain/rl/environments/episodic.py	/^class EpisodicTask(Task, FitnessEvaluator):$/;"	c
EpsilonGreedyExplorer	pybrain/rl/explorers/discrete/egreedy.py	/^class EpsilonGreedyExplorer(DiscreteExplorer):$/;"	c
EpsilonGreedyExplorer	tools/pybrain/pybrain/rl/explorers/discrete/egreedy.py	/^class EpsilonGreedyExplorer(DiscreteExplorer):$/;"	c
EvolinoBurstMutation	pybrain/supervised/evolino/filter.py	/^class EvolinoBurstMutation(Filter):$/;"	c
EvolinoBurstMutation	tools/pybrain/pybrain/supervised/evolino/filter.py	/^class EvolinoBurstMutation(Filter):$/;"	c
EvolinoEvaluation	pybrain/supervised/evolino/filter.py	/^class EvolinoEvaluation(Filter):$/;"	c
EvolinoEvaluation	tools/pybrain/pybrain/supervised/evolino/filter.py	/^class EvolinoEvaluation(Filter):$/;"	c
EvolinoIndividual	pybrain/supervised/evolino/individual.py	/^class EvolinoIndividual(Individual):$/;"	c
EvolinoIndividual	tools/pybrain/pybrain/supervised/evolino/individual.py	/^class EvolinoIndividual(Individual):$/;"	c
EvolinoNetwork	pybrain/structure/modules/evolinonetwork.py	/^class EvolinoNetwork(Module):$/;"	c
EvolinoNetwork	pybrain/supervised/evolino/networkwrapper.py	/^class EvolinoNetwork(Module):$/;"	c
EvolinoNetwork	tools/pybrain/pybrain/structure/modules/evolinonetwork.py	/^class EvolinoNetwork(Module):$/;"	c
EvolinoNetwork	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^class EvolinoNetwork(Module):$/;"	c
EvolinoPopulation	pybrain/supervised/evolino/population.py	/^class EvolinoPopulation(Population):$/;"	c
EvolinoPopulation	tools/pybrain/pybrain/supervised/evolino/population.py	/^class EvolinoPopulation(Population):$/;"	c
EvolinoReproduction	pybrain/supervised/evolino/filter.py	/^class EvolinoReproduction(Filter):$/;"	c
EvolinoReproduction	tools/pybrain/pybrain/supervised/evolino/filter.py	/^class EvolinoReproduction(Filter):$/;"	c
EvolinoSelection	pybrain/supervised/evolino/filter.py	/^class EvolinoSelection(Filter):$/;"	c
EvolinoSelection	tools/pybrain/pybrain/supervised/evolino/filter.py	/^class EvolinoSelection(Filter):$/;"	c
EvolinoSubIndividual	pybrain/supervised/evolino/individual.py	/^class EvolinoSubIndividual(Individual):$/;"	c
EvolinoSubIndividual	tools/pybrain/pybrain/supervised/evolino/individual.py	/^class EvolinoSubIndividual(Individual):$/;"	c
EvolinoSubMutation	pybrain/supervised/evolino/filter.py	/^class EvolinoSubMutation(SimpleMutation):$/;"	c
EvolinoSubMutation	tools/pybrain/pybrain/supervised/evolino/filter.py	/^class EvolinoSubMutation(SimpleMutation):$/;"	c
EvolinoSubPopulation	pybrain/supervised/evolino/population.py	/^class EvolinoSubPopulation(SimplePopulation):$/;"	c
EvolinoSubPopulation	tools/pybrain/pybrain/supervised/evolino/population.py	/^class EvolinoSubPopulation(SimplePopulation):$/;"	c
EvolinoSubReproduction	pybrain/supervised/evolino/filter.py	/^class EvolinoSubReproduction(Filter):$/;"	c
EvolinoSubReproduction	tools/pybrain/pybrain/supervised/evolino/filter.py	/^class EvolinoSubReproduction(Filter):$/;"	c
EvolinoSubSelection	pybrain/supervised/evolino/filter.py	/^class EvolinoSubSelection(Filter):$/;"	c
EvolinoSubSelection	tools/pybrain/pybrain/supervised/evolino/filter.py	/^class EvolinoSubSelection(Filter):$/;"	c
EvolinoTrainer	pybrain/supervised/trainers/evolino.py	/^class EvolinoTrainer(Trainer):$/;"	c
EvolinoTrainer	tools/pybrain/pybrain/supervised/trainers/evolino.py	/^class EvolinoTrainer(Trainer):$/;"	c
Evolution	pybrain/optimization/populationbased/evolution.py	/^class Evolution(BlackBoxOptimizer):$/;"	c
Evolution	tools/pybrain/pybrain/optimization/populationbased/evolution.py	/^class Evolution(BlackBoxOptimizer):$/;"	c
Evolvable	pybrain/structure/evolvables/evolvable.py	/^class Evolvable(Named):$/;"	c
Evolvable	tools/pybrain/pybrain/structure/evolvables/evolvable.py	/^class Evolvable(Named):$/;"	c
ExTools	pybrain/tools/example_tools.py	/^class ExTools():$/;"	c
ExTools	tools/pybrain/pybrain/tools/example_tools.py	/^class ExTools():$/;"	c
ExactNES	pybrain/optimization/distributionbased/nes.py	/^class ExactNES(VanillaGradientEvolutionStrategies):$/;"	c
ExactNES	tools/pybrain/pybrain/optimization/distributionbased/nes.py	/^class ExactNES(VanillaGradientEvolutionStrategies):$/;"	c
Expect	util.py	/^Expect = lambda X, P: sum( x * p for x, p in zip(X, P) )$/;"	v
Experiment	pybrain/rl/experiments/experiment.py	/^class Experiment(object):$/;"	c
Experiment	tools/pybrain/pybrain/rl/experiments/experiment.py	/^class Experiment(object):$/;"	c
Explorer	pybrain/rl/explorers/explorer.py	/^class Explorer(Module):$/;"	c
Explorer	tools/pybrain/pybrain/rl/explorers/explorer.py	/^class Explorer(Module):$/;"	c
ExplorerLearningAgent	agents/ExplorerLearningAgent.py	/^class ExplorerLearningAgent(LearningAgent):$/;"	c
ExploringLearner	pybrain/rl/learners/learner.py	/^class ExploringLearner(Learner):$/;"	c
ExploringLearner	tools/pybrain/pybrain/rl/learners/learner.py	/^class ExploringLearner(Learner):$/;"	c
ExponentialRanking	pybrain/tools/rankingfunctions.py	/^class ExponentialRanking(RankingFunction):$/;"	c
ExponentialRanking	tools/pybrain/pybrain/tools/rankingfunctions.py	/^class ExponentialRanking(RankingFunction):$/;"	c
FEM	pybrain/optimization/distributionbased/fem.py	/^class FEM(DistributionBasedOptimizer):$/;"	c
FEM	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^class FEM(DistributionBasedOptimizer):$/;"	c
FORCE_MAG	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^static const double FORCE_MAG   = 10.0;  \/\/magnitude of max force$/;"	v	file:
FORCE_MAG	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^static const double FORCE_MAG   = 10.0;  \/\/magnitude of max force$/;"	v	file:
FORCE_MAG2	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^static const double FORCE_MAG2   = 20.0;  \/\/magnitude of max force times 2$/;"	v	file:
FORCE_MAG2	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^static const double FORCE_MAG2   = 20.0;  \/\/magnitude of max force times 2$/;"	v	file:
FastCartPoleTask	pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^class FastCartPoleTask(EpisodicTask):$/;"	c
FastCartPoleTask	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^class FastCartPoleTask(EpisodicTask):$/;"	c
FeedForwardDecomposableNetwork	pybrain/structure/networks/neurondecomposable.py	/^class FeedForwardDecomposableNetwork(NeuronDecomposableNetwork, FeedForwardNetwork):$/;"	c
FeedForwardDecomposableNetwork	tools/pybrain/pybrain/structure/networks/neurondecomposable.py	/^class FeedForwardDecomposableNetwork(NeuronDecomposableNetwork, FeedForwardNetwork):$/;"	c
FeedForwardNetwork	pybrain/structure/networks/feedforward.py	/^class FeedForwardNetwork(FeedForwardNetworkComponent, Network):$/;"	c
FeedForwardNetwork	tools/pybrain/pybrain/structure/networks/feedforward.py	/^class FeedForwardNetwork(FeedForwardNetworkComponent, Network):$/;"	c
FeedForwardNetworkComponent	pybrain/structure/networks/feedforward.py	/^class FeedForwardNetworkComponent(object):$/;"	c
FeedForwardNetworkComponent	tools/pybrain/pybrain/structure/networks/feedforward.py	/^class FeedForwardNetworkComponent(object):$/;"	c
Filter	pybrain/supervised/evolino/gfilter.py	/^class Filter(object):$/;"	c
Filter	tools/pybrain/pybrain/supervised/evolino/gfilter.py	/^class Filter(object):$/;"	c
FiniteDifferences	pybrain/optimization/finitedifference/fd.py	/^class FiniteDifferences(ContinuousOptimizer):$/;"	c
FiniteDifferences	tools/pybrain/pybrain/optimization/finitedifference/fd.py	/^class FiniteDifferences(ContinuousOptimizer):$/;"	c
FitnessEvaluator	pybrain/rl/environments/fitnessevaluator.py	/^class FitnessEvaluator(object):$/;"	c
FitnessEvaluator	tools/pybrain/pybrain/rl/environments/fitnessevaluator.py	/^class FitnessEvaluator(object):$/;"	c
FitnessPlotter	pybrain/tools/plotting/fitnesslandscapes.py	/^class FitnessPlotter:$/;"	c
FitnessPlotter	tools/pybrain/pybrain/tools/plotting/fitnesslandscapes.py	/^class FitnessPlotter:$/;"	c
FlexCubeEnvironment	pybrain/rl/environments/flexcube/environment.py	/^class FlexCubeEnvironment(Environment):$/;"	c
FlexCubeEnvironment	tools/pybrain/pybrain/rl/environments/flexcube/environment.py	/^class FlexCubeEnvironment(Environment):$/;"	c
FlexCubeRenderer	pybrain/rl/environments/flexcube/viewer.py	/^class FlexCubeRenderer(object): $/;"	c
FlexCubeRenderer	pybrain/rl/environments/shipsteer/viewer.py	/^class FlexCubeRenderer(object):$/;"	c
FlexCubeRenderer	tools/pybrain/pybrain/rl/environments/flexcube/viewer.py	/^class FlexCubeRenderer(object): $/;"	c
FlexCubeRenderer	tools/pybrain/pybrain/rl/environments/shipsteer/viewer.py	/^class FlexCubeRenderer(object):$/;"	c
FonBenchmark	pybrain/rl/environments/functions/multiobjective.py	/^class FonBenchmark(MultiObjectiveFunction):$/;"	c
FonBenchmark	tools/pybrain/pybrain/rl/environments/functions/multiobjective.py	/^class FonBenchmark(MultiObjectiveFunction):$/;"	c
Forward	pybrain/rl/environments/mazes/polarmaze.py	/^    Forward = 1$/;"	v	class:PolarMaze
Forward	pybrain/rl/environments/mazes/tasks/shuttle.py	/^    Forward = 1$/;"	v	class:ShuttleDocking
Forward	tools/pybrain/pybrain/rl/environments/mazes/polarmaze.py	/^    Forward = 1$/;"	v	class:PolarMaze
Forward	tools/pybrain/pybrain/rl/environments/mazes/tasks/shuttle.py	/^    Forward = 1$/;"	v	class:ShuttleDocking
FourByThreeMaze	pybrain/rl/environments/mazes/tasks/maze4x3.py	/^class FourByThreeMaze(MazeTask):$/;"	c
FourByThreeMaze	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze4x3.py	/^class FourByThreeMaze(MazeTask):$/;"	c
FullConnection	pybrain/structure/connections/full.py	/^class FullConnection(Connection, ParameterContainer):$/;"	c
FullConnection	tools/pybrain/pybrain/structure/connections/full.py	/^class FullConnection(Connection, ParameterContainer):$/;"	c
FullNotSelfConnection	pybrain/structure/connections/fullnotself.py	/^class FullNotSelfConnection(FullConnection):$/;"	c
FullNotSelfConnection	tools/pybrain/pybrain/structure/connections/fullnotself.py	/^class FullNotSelfConnection(FullConnection):$/;"	c
FunctionEnvironment	pybrain/rl/environments/functions/function.py	/^class FunctionEnvironment(Environment, FitnessEvaluator):$/;"	c
FunctionEnvironment	tools/pybrain/pybrain/rl/environments/functions/function.py	/^class FunctionEnvironment(Environment, FitnessEvaluator):$/;"	c
FunnelFunction	pybrain/rl/environments/functions/multimodal.py	/^class FunnelFunction(MultiModalFunction):$/;"	c
FunnelFunction	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^class FunnelFunction(MultiModalFunction):$/;"	c
GA	pybrain/optimization/populationbased/ga.py	/^class GA(ContinuousOptimizer, Evolution):$/;"	c
GA	tools/pybrain/pybrain/optimization/populationbased/ga.py	/^class GA(ContinuousOptimizer, Evolution):$/;"	c
GAUSSIAN	pybrain/optimization/distributionbased/distributionbased.py	/^    GAUSSIAN = 1$/;"	v	class:DistributionBasedOptimizer
GAUSSIAN	tools/pybrain/pybrain/optimization/distributionbased/distributionbased.py	/^    GAUSSIAN = 1$/;"	v	class:DistributionBasedOptimizer
GENERALIZEDGAUSSIAN	pybrain/optimization/distributionbased/distributionbased.py	/^    GENERALIZEDGAUSSIAN = 3$/;"	v	class:DistributionBasedOptimizer
GENERALIZEDGAUSSIAN	tools/pybrain/pybrain/optimization/distributionbased/distributionbased.py	/^    GENERALIZEDGAUSSIAN = 3$/;"	v	class:DistributionBasedOptimizer
GPOMDP	pybrain/rl/learners/directsearch/gpomdp.py	/^class GPOMDP(PolicyGradientLearner):$/;"	c
GPOMDP	tools/pybrain/pybrain/rl/learners/directsearch/gpomdp.py	/^class GPOMDP(PolicyGradientLearner):$/;"	c
GQLambda	pybrain/rl/learners/valuebased/linearfa.py	/^class GQLambda(QLambda_LinFA):$/;"	c
GQLambda	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^class GQLambda(QLambda_LinFA):$/;"	c
GRAVITY	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^static const double GRAVITY     = -9.8;$/;"	v	file:
GRAVITY	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^static const double GRAVITY     = -9.8;$/;"	v	file:
GallagherGauss101MeFunction	pybrain/rl/environments/functions/multimodal.py	/^class GallagherGauss101MeFunction(MultiModalFunction):$/;"	c
GallagherGauss101MeFunction	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^class GallagherGauss101MeFunction(MultiModalFunction):$/;"	c
GallagherGauss21HiFunction	pybrain/rl/environments/functions/multimodal.py	/^class GallagherGauss21HiFunction(GallagherGauss101MeFunction):$/;"	c
GallagherGauss21HiFunction	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^class GallagherGauss21HiFunction(GallagherGauss101MeFunction):$/;"	c
GateLayer	pybrain/structure/modules/gate.py	/^class GateLayer(NeuronLayer):$/;"	c
GateLayer	tools/pybrain/pybrain/structure/modules/gate.py	/^class GateLayer(NeuronLayer):$/;"	c
GaussianLayer	pybrain/structure/modules/gaussianlayer.py	/^class GaussianLayer(NeuronLayer, ParameterContainer):$/;"	c
GaussianLayer	tools/pybrain/pybrain/structure/modules/gaussianlayer.py	/^class GaussianLayer(NeuronLayer, ParameterContainer):$/;"	c
GaussianProcess	pybrain/auxiliary/gaussprocess.py	/^class GaussianProcess:$/;"	c
GaussianProcess	tools/pybrain/pybrain/auxiliary/gaussprocess.py	/^class GaussianProcess:$/;"	c
GaussianVariate	pybrain/supervised/evolino/variate.py	/^class GaussianVariate:$/;"	c
GaussianVariate	tools/pybrain/pybrain/supervised/evolino/variate.py	/^class GaussianVariate:$/;"	c
GenRand	util.py	/^def GenRand(dist, select=False):$/;"	f
Geom	pybrain/rl/environments/ode/xode_changes/geom.py	/^class Geom(node.TreeNode):$/;"	c
Geom	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^class Geom(node.TreeNode):$/;"	c
GetActionProb	ReachProbCalculator.py	/^    def GetActionProb(self, state, theta):$/;"	m	class:ReachProbCalculator
GetInitialState	pybrain/rl/environments/classic/acrobot.py	/^    def GetInitialState(self):$/;"	m	class:AcrobotTask
GetInitialState	pybrain/rl/environments/classic/acrobot.py	/^    def GetInitialState(self):$/;"	m	class:SingleArmSwinger
GetInitialState	pybrain/rl/environments/classic/mountaincar.py	/^    def GetInitialState(self):$/;"	m	class:MountainCar
GetInitialState	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    def GetInitialState(self):$/;"	m	class:AcrobotTask
GetInitialState	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    def GetInitialState(self):$/;"	m	class:SingleArmSwinger
GetInitialState	tools/pybrain/pybrain/rl/environments/classic/mountaincar.py	/^    def GetInitialState(self):$/;"	m	class:MountainCar
GetMultiStepNSC	environments/TrapMaze.py	/^    def GetMultiStepNSC(self, k):$/;"	m	class:TrapMaze
GetNSC	environments/TrapMaze.py	/^    def GetNSC(self):$/;"	m	class:TrapMaze
GetReachProb	ReachProbCalculator.py	/^    def GetReachProb(self, theta):$/;"	m	class:ReachProbCalculator
GetReward	pybrain/rl/environments/classic/acrobot.py	/^    def GetReward(self, x):$/;"	m	class:AcrobotTask
GetReward	pybrain/rl/environments/classic/mountaincar.py	/^    def GetReward(self, s):$/;"	m	class:MountainCar
GetReward	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    def GetReward(self, x):$/;"	m	class:AcrobotTask
GetReward	tools/pybrain/pybrain/rl/environments/classic/mountaincar.py	/^    def GetReward(self, s):$/;"	m	class:MountainCar
GlasmachersFunction	pybrain/rl/environments/functions/unimodal.py	/^class GlasmachersFunction(FunctionEnvironment):$/;"	c
GlasmachersFunction	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^class GlasmachersFunction(FunctionEnvironment):$/;"	c
GoNorthwardTask	pybrain/rl/environments/shipsteer/northwardtask.py	/^class GoNorthwardTask(EpisodicTask):$/;"	c
GoNorthwardTask	tools/pybrain/pybrain/rl/environments/shipsteer/northwardtask.py	/^class GoNorthwardTask(EpisodicTask):$/;"	c
GomokuGame	pybrain/rl/environments/twoplayergames/gomoku.py	/^class GomokuGame(TwoPlayerGame):$/;"	c
GomokuGame	tools/pybrain/pybrain/rl/environments/twoplayergames/gomoku.py	/^class GomokuGame(TwoPlayerGame):$/;"	c
GomokuPlayer	pybrain/rl/environments/twoplayergames/gomokuplayers/gomokuplayer.py	/^class GomokuPlayer(Agent):$/;"	c
GomokuPlayer	tools/pybrain/pybrain/rl/environments/twoplayergames/gomokuplayers/gomokuplayer.py	/^class GomokuPlayer(Agent):$/;"	c
GomokuTask	pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^class GomokuTask(EpisodicTask, Named):$/;"	c
GomokuTask	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^class GomokuTask(EpisodicTask, Named):$/;"	c
GradientDescent	pybrain/auxiliary/gradientdescent.py	/^class GradientDescent(object):$/;"	c
GradientDescent	tools/pybrain/pybrain/auxiliary/gradientdescent.py	/^class GradientDescent(object):$/;"	c
GradualRewardTask	pybrain/rl/environments/ode/tasks/acrobot.py	/^class GradualRewardTask(EpisodicTask):$/;"	c
GradualRewardTask	tools/pybrain/pybrain/rl/environments/ode/tasks/acrobot.py	/^class GradualRewardTask(EpisodicTask):$/;"	c
GraphicalEnvironment	pybrain/rl/environments/graphical.py	/^class GraphicalEnvironment(Environment):$/;"	c
GraphicalEnvironment	pybrain/rl/environments/serverinterface.py	/^class GraphicalEnvironment(Environment):$/;"	c
GraphicalEnvironment	tools/pybrain/pybrain/rl/environments/graphical.py	/^class GraphicalEnvironment(Environment):$/;"	c
GraphicalEnvironment	tools/pybrain/pybrain/rl/environments/serverinterface.py	/^class GraphicalEnvironment(Environment):$/;"	c
GridSearch	pybrain/supervised/trainers/svmtrainer.py	/^class GridSearch(svm_model):$/;"	c
GridSearch	tools/pybrain/pybrain/supervised/trainers/svmtrainer.py	/^class GridSearch(svm_model):$/;"	c
GridSearch2D	pybrain/tools/gridsearch.py	/^class GridSearch2D:$/;"	c
GridSearch2D	tools/pybrain/pybrain/tools/gridsearch.py	/^class GridSearch2D:$/;"	c
GridSearchCostGamma	pybrain/tools/gridsearch.py	/^class GridSearchCostGamma(GridSearch2D):$/;"	c
GridSearchCostGamma	tools/pybrain/pybrain/tools/gridsearch.py	/^class GridSearchCostGamma(GridSearch2D):$/;"	c
GridSearchDOE	pybrain/supervised/trainers/svmtrainer.py	/^class GridSearchDOE(GridSearch):$/;"	c
GridSearchDOE	pybrain/tools/gridsearch.py	/^class GridSearchDOE:$/;"	c
GridSearchDOE	tools/pybrain/pybrain/supervised/trainers/svmtrainer.py	/^class GridSearchDOE(GridSearch):$/;"	c
GridSearchDOE	tools/pybrain/pybrain/tools/gridsearch.py	/^class GridSearchDOE:$/;"	c
GridSearchDOECostGamma	pybrain/tools/gridsearch.py	/^class GridSearchDOECostGamma(GridSearchDOE):$/;"	c
GridSearchDOECostGamma	tools/pybrain/pybrain/tools/gridsearch.py	/^class GridSearchDOECostGamma(GridSearchDOE):$/;"	c
GriewankFunction	pybrain/rl/environments/functions/multimodal.py	/^class GriewankFunction(MultiModalFunction):$/;"	c
GriewankFunction	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^class GriewankFunction(MultiModalFunction):$/;"	c
GriewankRosenbrockFunction	pybrain/rl/environments/functions/multimodal.py	/^class GriewankRosenbrockFunction(MultiModalFunction):$/;"	c
GriewankRosenbrockFunction	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^class GriewankRosenbrockFunction(MultiModalFunction):$/;"	c
GrowTask	pybrain/rl/environments/flexcube/tasks.py	/^class GrowTask(NoRewardTask):$/;"	c
GrowTask	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^class GrowTask(NoRewardTask):$/;"	c
HESSIANAC_TRACE_FILE	compare.py	/^HESSIANAC_TRACE_FILE = '.\/res\/hessian.p'$/;"	v
HESSIANAC_TRACE_FILE	multirun.py	/^HESSIANAC_TRACE_FILE = '.\/res\/hessian.p'$/;"	v
HandicapCaptureTask	pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^class HandicapCaptureTask(CaptureGameTask):$/;"	c
HandicapCaptureTask	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^class HandicapCaptureTask(CaptureGameTask):$/;"	c
HansenRanking	pybrain/tools/rankingfunctions.py	/^class HansenRanking(RankingFunction):$/;"	c
HansenRanking	tools/pybrain/pybrain/tools/rankingfunctions.py	/^class HansenRanking(RankingFunction):$/;"	c
HapticTestSetupWithRidges	pybrain/rl/environments/ode/tools/xodetools.py	/^class HapticTestSetupWithRidges(XODEfinger):$/;"	c
HapticTestSetupWithRidges	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^class HapticTestSetupWithRidges(XODEfinger):$/;"	c
HapticTestSetupWithSine	pybrain/rl/environments/ode/tools/xodetools.py	/^class HapticTestSetupWithSine(XODEfinger):$/;"	c
HapticTestSetupWithSine	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^class HapticTestSetupWithSine(XODEfinger):$/;"	c
HapticTestSetupWithSpheres	pybrain/rl/environments/ode/tools/xodetools.py	/^class HapticTestSetupWithSpheres(XODEfinger):$/;"	c
HapticTestSetupWithSpheres	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^class HapticTestSetupWithSpheres(XODEfinger):$/;"	c
HapticTestSetupWithSpirals	pybrain/rl/environments/ode/tools/xodetools.py	/^class HapticTestSetupWithSpirals(XODEfinger):$/;"	c
HapticTestSetupWithSpirals	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^class HapticTestSetupWithSpirals(XODEfinger):$/;"	c
HessianACAgent	agents/HessianACAgent.py	/^class HessianACAgent(LSTDACAgent):$/;"	c
HessianACLearner	learners/HessianACLearner.py	/^class HessianACLearner(LSTDACLearner):$/;"	c
HessianAC_TEST	compare.py	/^def HessianAC_TEST():$/;"	f
HillClimber	pybrain/optimization/hillclimber.py	/^class HillClimber(BlackBoxOptimizer):$/;"	c
HillClimber	tools/pybrain/pybrain/optimization/hillclimber.py	/^class HillClimber(BlackBoxOptimizer):$/;"	c
I	pybrain/rl/environments/shipsteer/shipsteer.py	/^    I = 1000.      # rotational inertia of ship in unclear units$/;"	v	class:ShipSteeringEnvironment
I	tools/pybrain/pybrain/rl/environments/shipsteer/shipsteer.py	/^    I = 1000.      # rotational inertia of ship in unclear units$/;"	v	class:ShipSteeringEnvironment
I1	pybrain/rl/environments/classic/acrobot.py	/^    I1 = 1.0$/;"	v	class:AcrobotTask
I1	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    I1 = 1.0$/;"	v	class:AcrobotTask
I2	pybrain/rl/environments/classic/acrobot.py	/^    I2 = 1.0$/;"	v	class:AcrobotTask
I2	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    I2 = 1.0$/;"	v	class:AcrobotTask
IRpropPlus	pybrain/auxiliary/gradientdescent.py	/^class IRpropPlus(object):$/;"	c
IRpropPlus	tools/pybrain/pybrain/auxiliary/gradientdescent.py	/^class IRpropPlus(object):$/;"	c
IdentityConnection	pybrain/structure/connections/identity.py	/^class IdentityConnection(Connection):$/;"	c
IdentityConnection	tools/pybrain/pybrain/structure/connections/identity.py	/^class IdentityConnection(Connection):$/;"	c
ImportanceDataSet	pybrain/datasets/importance.py	/^class ImportanceDataSet(SequentialDataSet):$/;"	c
ImportanceDataSet	tools/pybrain/pybrain/datasets/importance.py	/^class ImportanceDataSet(SequentialDataSet):$/;"	c
Individual	pybrain/supervised/evolino/gindividual.py	/^class Individual(object):$/;"	c
Individual	tools/pybrain/pybrain/supervised/evolino/gindividual.py	/^class Individual(object):$/;"	c
InnerInverseMemeticSearch	pybrain/optimization/memetic/innerinversememetic.py	/^class InnerInverseMemeticSearch(InnerMemeticSearch, InverseMemeticSearch):$/;"	c
InnerInverseMemeticSearch	tools/pybrain/pybrain/optimization/memetic/innerinversememetic.py	/^class InnerInverseMemeticSearch(InnerMemeticSearch, InverseMemeticSearch):$/;"	c
InnerMemeticSearch	pybrain/optimization/memetic/innermemetic.py	/^class InnerMemeticSearch(ES, MemeticSearch):$/;"	c
InnerMemeticSearch	tools/pybrain/pybrain/optimization/memetic/innermemetic.py	/^class InnerMemeticSearch(ES, MemeticSearch):$/;"	c
InverseMemeticSearch	pybrain/optimization/memetic/inversememetic.py	/^class InverseMemeticSearch(MemeticSearch):$/;"	c
InverseMemeticSearch	tools/pybrain/pybrain/optimization/memetic/inversememetic.py	/^class InverseMemeticSearch(MemeticSearch):$/;"	c
IsSafe	examples/problem_settings.py	/^    def IsSafe(st):$/;"	f
IsSafe	settings.py	/^    def IsSafe(st):$/;"	f
JohnnieEnvironment	pybrain/rl/environments/ode/instances/johnnie.py	/^class JohnnieEnvironment(ODEEnvironment):$/;"	c
JohnnieEnvironment	tools/pybrain/pybrain/rl/environments/ode/instances/johnnie.py	/^class JohnnieEnvironment(ODEEnvironment):$/;"	c
JohnnieTask	pybrain/rl/environments/ode/tasks/johnnie.py	/^class JohnnieTask(EpisodicTask):$/;"	c
JohnnieTask	tools/pybrain/pybrain/rl/environments/ode/tasks/johnnie.py	/^class JohnnieTask(EpisodicTask):$/;"	c
JointActuator	pybrain/rl/environments/ode/actuators.py	/^class JointActuator(Actuator):$/;"	c
JointActuator	tools/pybrain/pybrain/rl/environments/ode/actuators.py	/^class JointActuator(Actuator):$/;"	c
JointSensor	pybrain/rl/environments/ode/sensors.py	/^class JointSensor(Sensor):$/;"	c
JointSensor	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^class JointSensor(Sensor):$/;"	c
JointVelocitySensor	pybrain/rl/environments/ode/sensors.py	/^class JointVelocitySensor(JointSensor):$/;"	c
JointVelocitySensor	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^class JointVelocitySensor(JointSensor):$/;"	c
JumpTask	pybrain/rl/environments/flexcube/tasks.py	/^class JumpTask(NoRewardTask):$/;"	c
JumpTask	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^class JumpTask(NoRewardTask):$/;"	c
JumpingTask	pybrain/rl/environments/ode/tasks/johnnie.py	/^class JumpingTask(JohnnieTask):$/;"	c
JumpingTask	tools/pybrain/pybrain/rl/environments/ode/tasks/johnnie.py	/^class JumpingTask(JohnnieTask):$/;"	c
JustBalanceTask	pybrain/rl/environments/cartpole/balancetask.py	/^class JustBalanceTask(BalanceTask):$/;"	c
JustBalanceTask	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^class JustBalanceTask(BalanceTask):$/;"	c
KWArgDsc	pybrain/tools/kwargsprocessor.py	/^class KWArgDsc(object):$/;"	c
KWArgDsc	tools/pybrain/pybrain/tools/kwargsprocessor.py	/^class KWArgDsc(object):$/;"	c
KWArgsProcessor	pybrain/tools/kwargsprocessor.py	/^class KWArgsProcessor(object):$/;"	c
KWArgsProcessor	tools/pybrain/pybrain/tools/kwargsprocessor.py	/^class KWArgsProcessor(object):$/;"	c
KatsuuraFunction	pybrain/rl/environments/functions/multimodal.py	/^class KatsuuraFunction(MultiModalFunction):$/;"	c
KatsuuraFunction	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^class KatsuuraFunction(MultiModalFunction):$/;"	c
KillingGomokuPlayer	pybrain/rl/environments/twoplayergames/gomokuplayers/killing.py	/^class KillingGomokuPlayer(RandomGomokuPlayer):$/;"	c
KillingGomokuPlayer	tools/pybrain/pybrain/rl/environments/twoplayergames/gomokuplayers/killing.py	/^class KillingGomokuPlayer(RandomGomokuPlayer):$/;"	c
KillingPlayer	pybrain/rl/environments/twoplayergames/capturegameplayers/killing.py	/^class KillingPlayer(NonSuicidePlayer):$/;"	c
KillingPlayer	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/killing.py	/^class KillingPlayer(NonSuicidePlayer):$/;"	c
KohonenMap	pybrain/structure/modules/kohonen.py	/^class KohonenMap(Module):$/;"	c
KohonenMap	tools/pybrain/pybrain/structure/modules/kohonen.py	/^class KohonenMap(Module):$/;"	c
KurBenchmark	pybrain/rl/environments/functions/multiobjective.py	/^class KurBenchmark(MultiObjectiveFunction):$/;"	c
KurBenchmark	tools/pybrain/pybrain/rl/environments/functions/multiobjective.py	/^class KurBenchmark(MultiObjectiveFunction):$/;"	c
LENGTH_1	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^static const double LENGTH_1    = 0.5;	 \/\/ actually half the pole's length$/;"	v	file:
LENGTH_1	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^static const double LENGTH_1    = 0.5;	 \/\/ actually half the pole's length$/;"	v	file:
LENGTH_2	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^double LENGTH_2          = 0.05;$/;"	v
LENGTH_2	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^double LENGTH_2          = 0.05;$/;"	v
LR	compare.py	/^LR = 0.3$/;"	v
LSPI	pybrain/rl/learners/valuebased/linearfa.py	/^class LSPI(LinearFALearner):$/;"	c
LSPI	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^class LSPI(LinearFALearner):$/;"	c
LSPILambda	pybrain/rl/learners/valuebased/linearfa.py	/^class LSPILambda(LSTDQLambda):$/;"	c
LSPILambda	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^class LSPILambda(LSTDQLambda):$/;"	c
LSTDACAgent	agents/LSTDACAgent.py	/^class LSTDACAgent(LoggingAgent):$/;"	c
LSTDACLearner	learners/LSTDACLearner.py	/^class LSTDACLearner(TDLearner):$/;"	c
LSTDACLearnerTestCase	learners/LSTDACLearner.py	/^class LSTDACLearnerTestCase(unittest.TestCase):$/;"	c
LSTDAC_TEST	compare.py	/^def LSTDAC_TEST():$/;"	f
LSTDAC_TRACE_FILE	compare.py	/^LSTDAC_TRACE_FILE = '.\/res\/lstdac.p'$/;"	v
LSTDAC_TRACE_FILE	multirun.py	/^LSTDAC_TRACE_FILE = '.\/res\/lstdac.p'$/;"	v
LSTDQLambda	pybrain/rl/learners/valuebased/linearfa.py	/^class LSTDQLambda(QLambda_LinFA):$/;"	c
LSTDQLambda	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^class LSTDQLambda(QLambda_LinFA):$/;"	c
LSTMLayer	pybrain/structure/modules/lstm.py	/^class LSTMLayer(NeuronLayer, ParameterContainer):$/;"	c
LSTMLayer	tools/pybrain/pybrain/structure/modules/lstm.py	/^class LSTMLayer(NeuronLayer, ParameterContainer):$/;"	c
Learner	pybrain/rl/learners/learner.py	/^class Learner(object):$/;"	c
Learner	tools/pybrain/pybrain/rl/learners/learner.py	/^class Learner(object):$/;"	c
LearningAgent	pybrain/rl/agents/learning.py	/^class LearningAgent(LoggingAgent):$/;"	c
LearningAgent	tools/pybrain/pybrain/rl/agents/learning.py	/^class LearningAgent(LoggingAgent):$/;"	c
LearningTester	pybrain/rl/learners/valuebased/linearfa.py	/^class LearningTester(unittest.TestCase):$/;"	c
LearningTester	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^class LearningTester(unittest.TestCase):$/;"	c
LennardJones	pybrain/rl/environments/functions/lennardjones.py	/^class LennardJones(MultiModalFunction):$/;"	c
LennardJones	tools/pybrain/pybrain/rl/environments/functions/lennardjones.py	/^class LennardJones(MultiModalFunction):$/;"	c
LevinSeach	pybrain/rl/learners/meta/levinsearch.py	/^class LevinSeach:$/;"	c
LevinSeach	tools/pybrain/pybrain/rl/learners/meta/levinsearch.py	/^class LevinSeach:$/;"	c
LinFA_QAgent	tools/pybrain/examples/rl/environments/linear_fa/xor.py	/^class LinFA_QAgent(LearningAgent):$/;"	c
LinearConnection	pybrain/structure/connections/linear.py	/^class LinearConnection(Connection, ParameterContainer):$/;"	c
LinearConnection	tools/pybrain/pybrain/structure/connections/linear.py	/^class LinearConnection(Connection, ParameterContainer):$/;"	c
LinearFALearner	pybrain/rl/learners/valuebased/linearfa.py	/^class LinearFALearner(ValueBasedLearner):$/;"	c
LinearFALearner	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^class LinearFALearner(ValueBasedLearner):$/;"	c
LinearFA_Agent	pybrain/rl/agents/linearfa.py	/^class LinearFA_Agent(LoggingAgent):$/;"	c
LinearFA_Agent	tools/pybrain/pybrain/rl/agents/linearfa.py	/^class LinearFA_Agent(LoggingAgent):$/;"	c
LinearFunction	pybrain/rl/environments/functions/unbounded.py	/^class LinearFunction(UnboundedFunctionEnvironment):$/;"	c
LinearFunction	tools/pybrain/pybrain/rl/environments/functions/unbounded.py	/^class LinearFunction(UnboundedFunctionEnvironment):$/;"	c
LinearLayer	pybrain/structure/modules/linearlayer.py	/^class LinearLayer(NeuronLayer):$/;"	c
LinearLayer	tools/pybrain/pybrain/structure/modules/linearlayer.py	/^class LinearLayer(NeuronLayer):$/;"	c
LinearizedBalanceTask	pybrain/rl/environments/cartpole/balancetask.py	/^class LinearizedBalanceTask(BalanceTask):$/;"	c
LinearizedBalanceTask	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^class LinearizedBalanceTask(BalanceTask):$/;"	c
Listen	pybrain/rl/environments/mazes/tasks/tiger.py	/^    Listen = 0$/;"	v	class:TigerTask
Listen	tools/pybrain/pybrain/rl/environments/mazes/tasks/tiger.py	/^    Listen = 0$/;"	v	class:TigerTask
LoggingAgent	pybrain/rl/agents/logging.py	/^class LoggingAgent(Agent):$/;"	c
LoggingAgent	tools/pybrain/pybrain/rl/agents/logging.py	/^class LoggingAgent(Agent):$/;"	c
LoglhDataSet	pybrain/rl/learners/directsearch/policygradient.py	/^class LoglhDataSet(DataSet):$/;"	c
LoglhDataSet	tools/pybrain/pybrain/rl/learners/directsearch/policygradient.py	/^class LoglhDataSet(DataSet):$/;"	c
LunacekBiRastriginFunction	pybrain/rl/environments/functions/multimodal.py	/^class LunacekBiRastriginFunction(MultiModalFunction):$/;"	c
LunacekBiRastriginFunction	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^class LunacekBiRastriginFunction(MultiModalFunction):$/;"	c
MASSCART	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^static const double MASSCART    = 1.0;$/;"	v	file:
MASSCART	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^static const double MASSCART    = 1.0;$/;"	v	file:
MASSPOLE_1	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^static const double MASSPOLE_1  = 0.1;$/;"	v	file:
MASSPOLE_1	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^static const double MASSPOLE_1  = 0.1;$/;"	v	file:
MASSPOLE_2	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^double MASSPOLE_2        = 0.01;$/;"	v
MASSPOLE_2	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^double MASSPOLE_2        = 0.01;$/;"	v
MArray	pybrain/rl/environments/flexcube/masspoint.py	/^class MArray:$/;"	c
MArray	tools/pybrain/pybrain/rl/environments/flexcube/masspoint.py	/^class MArray:$/;"	c
MDLSTMLayer	pybrain/structure/modules/mdlstm.py	/^class MDLSTMLayer(NeuronLayer, ParameterContainer):$/;"	c
MDLSTMLayer	tools/pybrain/pybrain/structure/modules/mdlstm.py	/^class MDLSTMLayer(NeuronLayer, ParameterContainer):$/;"	c
MDPMazeTask	pybrain/rl/environments/mazes/tasks/mdp.py	/^class MDPMazeTask(Task):$/;"	c
MDPMazeTask	tools/pybrain/pybrain/rl/environments/mazes/tasks/mdp.py	/^class MDPMazeTask(Task):$/;"	c
MSE	pybrain/tools/validation.py	/^    def MSE(cls, module, dataset):$/;"	m	class:ModuleValidator
MSE	pybrain/tools/validation.py	/^    def MSE(cls, output, target, importance=None):$/;"	m	class:Validator
MSE	tools/pybrain/pybrain/tools/validation.py	/^    def MSE(cls, module, dataset):$/;"	m	class:ModuleValidator
MSE	tools/pybrain/pybrain/tools/validation.py	/^    def MSE(cls, output, target, importance=None):$/;"	m	class:Validator
MUC	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^static const double MUC         = 0.0005;$/;"	v	file:
MUC	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^static const double MUC         = 0.0005;$/;"	v	file:
MUP	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^static const double MUP         = 0.000002;$/;"	v	file:
MUP	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^static const double MUP         = 0.000002;$/;"	v	file:
MaskedModule	pybrain/structure/evolvables/maskedmodule.py	/^class MaskedModule(MaskedParameters, Module):$/;"	c
MaskedModule	tools/pybrain/pybrain/structure/evolvables/maskedmodule.py	/^class MaskedModule(MaskedParameters, Module):$/;"	c
MaskedParameters	pybrain/structure/evolvables/maskedparameters.py	/^class MaskedParameters(TopologyEvolvable):$/;"	c
MaskedParameters	tools/pybrain/pybrain/structure/evolvables/maskedparameters.py	/^class MaskedParameters(TopologyEvolvable):$/;"	c
Mass	pybrain/rl/environments/ode/xode_changes/body.py	/^class Mass(node.TreeNode):$/;"	c
Mass	tools/pybrain/pybrain/rl/environments/ode/xode_changes/body.py	/^class Mass(node.TreeNode):$/;"	c
MassPoint	pybrain/rl/environments/flexcube/masspoint.py	/^class MassPoint:$/;"	c
MassPoint	tools/pybrain/pybrain/rl/environments/flexcube/masspoint.py	/^class MassPoint:$/;"	c
Maze	pybrain/rl/environments/mazes/maze.py	/^class Maze(Environment, Named):$/;"	c
Maze	tools/pybrain/pybrain/rl/environments/mazes/maze.py	/^class Maze(Environment, Named):$/;"	c
MazeTask	pybrain/rl/environments/mazes/tasks/maze.py	/^class MazeTask(POMDPTask):$/;"	c
MazeTask	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze.py	/^class MazeTask(POMDPTask):$/;"	c
MdrnnLayer	pybrain/structure/modules/mdrnnlayer.py	/^class MdrnnLayer(NeuronLayer, ParameterContainer):$/;"	c
MdrnnLayer	tools/pybrain/pybrain/structure/modules/mdrnnlayer.py	/^class MdrnnLayer(NeuronLayer, ParameterContainer):$/;"	c
MemeticSearch	pybrain/optimization/memetic/memetic.py	/^class MemeticSearch(HillClimber, TopologyOptimizer):$/;"	c
MemeticSearch	tools/pybrain/pybrain/optimization/memetic/memetic.py	/^class MemeticSearch(HillClimber, TopologyOptimizer):$/;"	c
MetaLearner	pybrain/rl/learners/meta/meta.py	/^class MetaLearner(Learner):$/;"	c
MetaLearner	tools/pybrain/pybrain/rl/learners/meta/meta.py	/^class MetaLearner(Learner):$/;"	c
MinHash	pybrain/supervised/knn/lsh/minhash.py	/^class MinHash(object):$/;"	c
MinHash	tools/pybrain/pybrain/supervised/knn/lsh/minhash.py	/^class MinHash(object):$/;"	c
MinimizeTask	pybrain/rl/environments/simple/tasks.py	/^class MinimizeTask(EpisodicTask):$/;"	c
MinimizeTask	tools/pybrain/pybrain/rl/environments/simple/tasks.py	/^class MinimizeTask(EpisodicTask):$/;"	c
MixtureOfGaussians	pybrain/tools/mixtures/mixtureofgaussian.py	/^class MixtureOfGaussians:$/;"	c
MixtureOfGaussians	pybrain/tools/mixtures/mogpuremax.py	/^class MixtureOfGaussians:$/;"	c
MixtureOfGaussians	tools/pybrain/pybrain/tools/mixtures/mixtureofgaussian.py	/^class MixtureOfGaussians:$/;"	c
MixtureOfGaussians	tools/pybrain/pybrain/tools/mixtures/mogpuremax.py	/^class MixtureOfGaussians:$/;"	c
Module	pybrain/structure/modules/module.py	/^class Module(Named):$/;"	c
Module	tools/pybrain/pybrain/structure/modules/module.py	/^class Module(Named):$/;"	c
ModuleDecidingPlayer	pybrain/rl/environments/twoplayergames/capturegameplayers/moduledecision.py	/^class ModuleDecidingPlayer(RandomCapturePlayer):$/;"	c
ModuleDecidingPlayer	pybrain/rl/environments/twoplayergames/gomokuplayers/moduledecision.py	/^class ModuleDecidingPlayer(RandomGomokuPlayer):$/;"	c
ModuleDecidingPlayer	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/moduledecision.py	/^class ModuleDecidingPlayer(RandomCapturePlayer):$/;"	c
ModuleDecidingPlayer	tools/pybrain/pybrain/rl/environments/twoplayergames/gomokuplayers/moduledecision.py	/^class ModuleDecidingPlayer(RandomGomokuPlayer):$/;"	c
ModuleMesh	pybrain/structure/modulemesh.py	/^class ModuleMesh(Named):$/;"	c
ModuleMesh	tools/pybrain/pybrain/structure/modulemesh.py	/^class ModuleMesh(Named):$/;"	c
ModuleSlice	pybrain/structure/moduleslice.py	/^class ModuleSlice(Named):$/;"	c
ModuleSlice	tools/pybrain/pybrain/structure/moduleslice.py	/^class ModuleSlice(Named):$/;"	c
ModuleValidator	pybrain/tools/validation.py	/^class ModuleValidator(object):$/;"	c
ModuleValidator	tools/pybrain/pybrain/tools/validation.py	/^class ModuleValidator(object):$/;"	c
MotherConnection	pybrain/structure/connections/shared.py	/^class MotherConnection(ParameterContainer):$/;"	c
MotherConnection	tools/pybrain/pybrain/structure/connections/shared.py	/^class MotherConnection(ParameterContainer):$/;"	c
MountainCar	pybrain/rl/environments/classic/mountaincar.py	/^class MountainCar(EpisodicTask): $/;"	c
MountainCar	tools/pybrain/pybrain/rl/environments/classic/mountaincar.py	/^class MountainCar(EpisodicTask): $/;"	c
MultiDimHash	pybrain/supervised/knn/lsh/nearoptimal.py	/^class MultiDimHash(object):$/;"	c
MultiDimHash	tools/pybrain/pybrain/supervised/knn/lsh/nearoptimal.py	/^class MultiDimHash(object):$/;"	c
MultiDimensionalLSTM	pybrain/structure/networks/multidimensional.py	/^class MultiDimensionalLSTM(MultiDimensionalRNN):$/;"	c
MultiDimensionalLSTM	tools/pybrain/pybrain/structure/networks/multidimensional.py	/^class MultiDimensionalLSTM(MultiDimensionalRNN):$/;"	c
MultiDimensionalRNN	pybrain/structure/networks/multidimensional.py	/^class MultiDimensionalRNN(SwipingNetwork):$/;"	c
MultiDimensionalRNN	tools/pybrain/pybrain/structure/networks/multidimensional.py	/^class MultiDimensionalRNN(SwipingNetwork):$/;"	c
MultiModalFunction	pybrain/rl/environments/functions/multimodal.py	/^class MultiModalFunction(FunctionEnvironment):$/;"	c
MultiModalFunction	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^class MultiModalFunction(FunctionEnvironment):$/;"	c
MultiObjectiveFunction	pybrain/rl/environments/functions/multiobjective.py	/^class MultiObjectiveFunction(FunctionEnvironment):$/;"	c
MultiObjectiveFunction	tools/pybrain/pybrain/rl/environments/functions/multiobjective.py	/^class MultiObjectiveFunction(FunctionEnvironment):$/;"	c
MultiObjectiveGA	pybrain/optimization/populationbased/multiobjective/nsga2.py	/^class MultiObjectiveGA(GA):$/;"	c
MultiObjectiveGA	tools/pybrain/pybrain/optimization/populationbased/multiobjective/nsga2.py	/^class MultiObjectiveGA(GA):$/;"	c
MultiPopulationCoevolution	pybrain/optimization/populationbased/coevolution/multipopulationcoevolution.py	/^class MultiPopulationCoevolution(Coevolution):$/;"	c
MultiPopulationCoevolution	tools/pybrain/pybrain/optimization/populationbased/coevolution/multipopulationcoevolution.py	/^class MultiPopulationCoevolution(Coevolution):$/;"	c
MultilinePlotter	pybrain/tools/plotting/multiline.py	/^class MultilinePlotter:$/;"	c
MultilinePlotter	tools/pybrain/pybrain/tools/plotting/multiline.py	/^class MultilinePlotter:$/;"	c
MultiplicationLayer	pybrain/structure/modules/gate.py	/^class MultiplicationLayer(NeuronLayer):$/;"	c
MultiplicationLayer	tools/pybrain/pybrain/structure/modules/gate.py	/^class MultiplicationLayer(NeuronLayer):$/;"	c
N	pybrain/rl/environments/mazes/maze.py	/^    N = (1, 0)$/;"	v	class:Maze
N	pybrain/structure/networks/convolutional.py	/^    N = ConvolutionalBoardNetwork(4, 3, 5)$/;"	v	class:SimpleConvolutionalNetwork
N	tools/pybrain/examples/supervised/backprop/parityrnn.py	/^    N = buildParityNet()$/;"	v
N	tools/pybrain/pybrain/rl/environments/mazes/maze.py	/^    N = (1, 0)$/;"	v	class:Maze
N	tools/pybrain/pybrain/structure/networks/convolutional.py	/^    N = ConvolutionalBoardNetwork(4, 3, 5)$/;"	v	class:SimpleConvolutionalNetwork
NFQ	pybrain/rl/learners/valuebased/nfq.py	/^class NFQ(ValueBasedLearner):$/;"	c
NFQ	tools/pybrain/pybrain/rl/learners/valuebased/nfq.py	/^class NFQ(ValueBasedLearner):$/;"	c
NNclassifier	pybrain/tools/neuralnets.py	/^class NNclassifier(NNtools):$/;"	c
NNclassifier	tools/pybrain/pybrain/tools/neuralnets.py	/^class NNclassifier(NNtools):$/;"	c
NNregression	pybrain/tools/neuralnets.py	/^class NNregression(NNtools):$/;"	c
NNregression	tools/pybrain/pybrain/tools/neuralnets.py	/^class NNregression(NNtools):$/;"	c
NNtools	pybrain/tools/neuralnets.py	/^class NNtools(object):$/;"	c
NNtools	tools/pybrain/pybrain/tools/neuralnets.py	/^class NNtools(object):$/;"	c
NOBASELINE	pybrain/optimization/distributionbased/nes.py	/^    NOBASELINE = 0$/;"	v	class:ExactNES
NOBASELINE	tools/pybrain/pybrain/optimization/distributionbased/nes.py	/^    NOBASELINE = 0$/;"	v	class:ExactNES
Named	pybrain/utilities.py	/^class Named(XMLBuildable):$/;"	c
Named	tools/pybrain/pybrain/utilities.py	/^class Named(XMLBuildable):$/;"	c
NaturalGradient	pybrain/auxiliary/gradientdescent.py	/^class NaturalGradient(object):$/;"	c
NaturalGradient	tools/pybrain/pybrain/auxiliary/gradientdescent.py	/^class NaturalGradient(object):$/;"	c
NelderMead	pybrain/optimization/neldermead.py	/^class NelderMead(ContinuousOptimizer):$/;"	c
NelderMead	tools/pybrain/pybrain/optimization/neldermead.py	/^class NelderMead(ContinuousOptimizer):$/;"	c
Network	pybrain/structure/networks/network.py	/^class Network(Module, ParameterContainer):$/;"	c
Network	tools/pybrain/pybrain/structure/networks/network.py	/^class Network(Module, ParameterContainer):$/;"	c
NetworkConstructionException	pybrain/structure/networks/network.py	/^class NetworkConstructionException(Exception):$/;"	c
NetworkConstructionException	tools/pybrain/pybrain/structure/networks/network.py	/^class NetworkConstructionException(Exception):$/;"	c
NetworkError	pybrain/tools/shortcuts.py	/^class NetworkError(Exception): pass$/;"	c
NetworkError	tools/pybrain/pybrain/tools/shortcuts.py	/^class NetworkError(Exception): pass$/;"	c
NetworkReader	pybrain/tools/customxml/networkreader.py	/^class NetworkReader(XMLHandling):$/;"	c
NetworkReader	tools/pybrain/pybrain/tools/customxml/networkreader.py	/^class NetworkReader(XMLHandling):$/;"	c
NetworkWrapper	pybrain/supervised/evolino/networkwrapper.py	/^class NetworkWrapper(object):$/;"	c
NetworkWrapper	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^class NetworkWrapper(object):$/;"	c
NetworkWriter	pybrain/tools/customxml/networkwriter.py	/^class NetworkWriter(XMLHandling):$/;"	c
NetworkWriter	tools/pybrain/pybrain/tools/customxml/networkwriter.py	/^class NetworkWriter(XMLHandling):$/;"	c
NeuronDecomposableNetwork	pybrain/structure/networks/neurondecomposable.py	/^class NeuronDecomposableNetwork(object):$/;"	c
NeuronDecomposableNetwork	tools/pybrain/pybrain/structure/networks/neurondecomposable.py	/^class NeuronDecomposableNetwork(object):$/;"	c
NeuronLayer	pybrain/structure/modules/neuronlayer.py	/^class NeuronLayer(Module):$/;"	c
NeuronLayer	tools/pybrain/pybrain/structure/modules/neuronlayer.py	/^class NeuronLayer(Module):$/;"	c
NoLinkedFieldsError	pybrain/datasets/dataset.py	/^class NoLinkedFieldsError(Exception): pass$/;"	c
NoLinkedFieldsError	tools/pybrain/pybrain/datasets/dataset.py	/^class NoLinkedFieldsError(Exception): pass$/;"	c
NoRewardTask	pybrain/rl/environments/flexcube/tasks.py	/^class NoRewardTask(EpisodicTask):$/;"	c
NoRewardTask	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^class NoRewardTask(EpisodicTask):$/;"	c
NonMarkovDoublePoleEnvironment	pybrain/rl/environments/cartpole/nonmarkovdoublepole.py	/^class NonMarkovDoublePoleEnvironment(DoublePoleEnvironment, NonMarkovPoleEnvironment):$/;"	c
NonMarkovDoublePoleEnvironment	tools/pybrain/pybrain/rl/environments/cartpole/nonmarkovdoublepole.py	/^class NonMarkovDoublePoleEnvironment(DoublePoleEnvironment, NonMarkovPoleEnvironment):$/;"	c
NonMarkovPoleEnvironment	pybrain/rl/environments/cartpole/nonmarkovpole.py	/^class NonMarkovPoleEnvironment(CartPoleEnvironment):$/;"	c
NonMarkovPoleEnvironment	tools/pybrain/pybrain/rl/environments/cartpole/nonmarkovpole.py	/^class NonMarkovPoleEnvironment(CartPoleEnvironment):$/;"	c
NonSuicidePlayer	pybrain/rl/environments/twoplayergames/capturegameplayers/nonsuicide.py	/^class NonSuicidePlayer(RandomCapturePlayer):$/;"	c
NonSuicidePlayer	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/nonsuicide.py	/^class NonSuicidePlayer(RandomCapturePlayer):$/;"	c
NormalExplorer	pybrain/rl/explorers/continuous/normal.py	/^class NormalExplorer(Explorer, ParameterContainer):$/;"	c
NormalExplorer	tools/pybrain/pybrain/rl/explorers/continuous/normal.py	/^class NormalExplorer(Explorer, ParameterContainer):$/;"	c
ODEEnvironment	pybrain/rl/environments/ode/environment.py	/^class ODEEnvironment(Environment):$/;"	c
ODEEnvironment	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^class ODEEnvironment(Environment):$/;"	c
ODEViewer	pybrain/rl/environments/ode/viewer.py	/^class ODEViewer(object):$/;"	c
ODEViewer	tools/pybrain/pybrain/rl/environments/ode/viewer.py	/^class ODEViewer(object):$/;"	c
Objects3D	pybrain/rl/environments/flexcube/objects3d.py	/^class Objects3D:$/;"	c
Objects3D	tools/pybrain/pybrain/rl/environments/flexcube/objects3d.py	/^class Objects3D:$/;"	c
OpenLeft	pybrain/rl/environments/mazes/tasks/tiger.py	/^    OpenLeft = 1$/;"	v	class:TigerTask
OpenLeft	tools/pybrain/pybrain/rl/environments/mazes/tasks/tiger.py	/^    OpenLeft = 1$/;"	v	class:TigerTask
OpenRight	pybrain/rl/environments/mazes/tasks/tiger.py	/^    OpenRight = 2$/;"	v	class:TigerTask
OpenRight	tools/pybrain/pybrain/rl/environments/mazes/tasks/tiger.py	/^    OpenRight = 2$/;"	v	class:TigerTask
OptimizationAgent	pybrain/rl/agents/optimization.py	/^class OptimizationAgent(Agent):$/;"	c
OptimizationAgent	tools/pybrain/pybrain/rl/agents/optimization.py	/^class OptimizationAgent(Agent):$/;"	c
OriginalNES	pybrain/optimization/distributionbased/nes.py	/^class OriginalNES(VanillaGradientEvolutionStrategies):$/;"	c
OriginalNES	tools/pybrain/pybrain/optimization/distributionbased/nes.py	/^class OriginalNES(VanillaGradientEvolutionStrategies):$/;"	c
OutOfSyncError	pybrain/datasets/dataset.py	/^class OutOfSyncError(Exception): pass$/;"	c
OutOfSyncError	tools/pybrain/pybrain/datasets/dataset.py	/^class OutOfSyncError(Exception): pass$/;"	c
OwnershipViolation	pybrain/structure/connections/shared.py	/^class OwnershipViolation(Exception):$/;"	c
OwnershipViolation	tools/pybrain/pybrain/structure/connections/shared.py	/^class OwnershipViolation(Exception):$/;"	c
P	pybrain/tests/unittests/test_utilities.py	/^class P(Serializable):$/;"	c
P	tools/pybrain/pybrain/tests/unittests/test_utilities.py	/^class P(Serializable):$/;"	c
PAPER	tools/pybrain/docs/sphinx/Makefile	/^PAPER         =$/;"	m
PAPEROPT_a4	tools/pybrain/docs/sphinx/Makefile	/^PAPEROPT_a4     = -D latex_paper_size=a4$/;"	m
PAPEROPT_letter	tools/pybrain/docs/sphinx/Makefile	/^PAPEROPT_letter = -D latex_paper_size=letter$/;"	m
PGACController	policy/PGACController.py	/^class PGACController(object):$/;"	c
PGPE	pybrain/optimization/finitedifference/pgpe.py	/^class PGPE(FiniteDifferences):$/;"	c
PGPE	tools/pybrain/pybrain/optimization/finitedifference/pgpe.py	/^class PGPE(FiniteDifferences):$/;"	c
PLURAL_EXPR	tools/pybrain/docs/html/_static/doctools.js	/^    this.PLURAL_EXPR = new Function('n', 'return +(' + catalog.plural_expr + ')');$/;"	f
POMDPTask	pybrain/rl/environments/mazes/tasks/pomdp.py	/^class POMDPTask(EpisodicTask, Named):$/;"	c
POMDPTask	tools/pybrain/pybrain/rl/environments/mazes/tasks/pomdp.py	/^class POMDPTask(EpisodicTask, Named):$/;"	c
ParabRFunction	pybrain/rl/environments/functions/unbounded.py	/^class ParabRFunction(UnboundedFunctionEnvironment):$/;"	c
ParabRFunction	tools/pybrain/pybrain/rl/environments/functions/unbounded.py	/^class ParabRFunction(UnboundedFunctionEnvironment):$/;"	c
ParameterContainer	pybrain/structure/parametercontainer.py	/^class ParameterContainer(Evolvable):$/;"	c
ParameterContainer	tools/pybrain/pybrain/structure/parametercontainer.py	/^class ParameterContainer(Evolvable):$/;"	c
ParityDataSet	tools/pybrain/examples/supervised/backprop/datasets/parity.py	/^class ParityDataSet(SequentialDataSet):$/;"	c
PartialSoftmaxLayer	pybrain/structure/modules/softmax.py	/^class PartialSoftmaxLayer(NeuronLayer):$/;"	c
PartialSoftmaxLayer	tools/pybrain/pybrain/structure/modules/softmax.py	/^class PartialSoftmaxLayer(NeuronLayer):$/;"	c
Particle	pybrain/optimization/populationbased/pso.py	/^class Particle(object):$/;"	c
Particle	tools/pybrain/pybrain/optimization/populationbased/pso.py	/^class Particle(object):$/;"	c
ParticleSwarmOptimizer	pybrain/optimization/populationbased/pso.py	/^class ParticleSwarmOptimizer(ContinuousOptimizer):$/;"	c
ParticleSwarmOptimizer	tools/pybrain/pybrain/optimization/populationbased/pso.py	/^class ParticleSwarmOptimizer(ContinuousOptimizer):$/;"	c
PenteGame	pybrain/rl/environments/twoplayergames/pente.py	/^class PenteGame(GomokuGame):$/;"	c
PenteGame	tools/pybrain/pybrain/rl/environments/twoplayergames/pente.py	/^class PenteGame(GomokuGame):$/;"	c
PenteTask	pybrain/rl/environments/twoplayergames/tasks/pentetask.py	/^class PenteTask(GomokuTask):$/;"	c
PenteTask	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/pentetask.py	/^class PenteTask(GomokuTask):$/;"	c
PermutationConnection	pybrain/structure/connections/permutation.py	/^class PermutationConnection(Connection):$/;"	c
PermutationConnection	tools/pybrain/pybrain/structure/connections/permutation.py	/^class PermutationConnection(Connection):$/;"	c
PlotCostSurface	PlotCostSurface.py	/^def PlotCostSurface():$/;"	f
PolBenchmark	pybrain/rl/environments/functions/multiobjective.py	/^class PolBenchmark(MultiObjectiveFunction):$/;"	c
PolBenchmark	tools/pybrain/pybrain/rl/environments/functions/multiobjective.py	/^class PolBenchmark(MultiObjectiveFunction):$/;"	c
PolarMaze	pybrain/rl/environments/mazes/polarmaze.py	/^class PolarMaze(Maze):$/;"	c
PolarMaze	tools/pybrain/pybrain/rl/environments/mazes/polarmaze.py	/^class PolarMaze(Maze):$/;"	c
PolicyGradientLearner	pybrain/rl/learners/directsearch/policygradient.py	/^class PolicyGradientLearner(DirectSearchLearner, DataSetLearner, ExploringLearner):$/;"	c
PolicyGradientLearner	tools/pybrain/pybrain/rl/learners/directsearch/policygradient.py	/^class PolicyGradientLearner(DirectSearchLearner, DataSetLearner, ExploringLearner):$/;"	c
PolicyInterface	policy/BoltzmanAC.py	/^class PolicyInterface(object):$/;"	c
Population	pybrain/supervised/evolino/gpopulation.py	/^class Population:$/;"	c
Population	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^class Population:$/;"	c
PorterStemmer	tools/pybrain/docs/html/_static/searchtools.js	/^var PorterStemmer = function() {$/;"	c
PorterStemmer.stemWord	tools/pybrain/docs/html/_static/searchtools.js	/^  this.stemWord = function (w) {$/;"	m
PorterStemmer.step2list.alism	tools/pybrain/docs/html/_static/searchtools.js	/^    ator: 'ate',$/;"	p
PorterStemmer.step2list.aliti	tools/pybrain/docs/html/_static/searchtools.js	/^    ousness: 'ous',$/;"	p
PorterStemmer.step2list.alli	tools/pybrain/docs/html/_static/searchtools.js	/^    bli: 'ble',$/;"	p
PorterStemmer.step2list.anci	tools/pybrain/docs/html/_static/searchtools.js	/^    enci: 'ence',$/;"	p
PorterStemmer.step2list.ation	tools/pybrain/docs/html/_static/searchtools.js	/^    ization: 'ize',$/;"	p
PorterStemmer.step2list.ational	tools/pybrain/docs/html/_static/searchtools.js	/^  var step2list = {$/;"	p
PorterStemmer.step2list.ator	tools/pybrain/docs/html/_static/searchtools.js	/^    ation: 'ate',$/;"	p
PorterStemmer.step2list.biliti	tools/pybrain/docs/html/_static/searchtools.js	/^    iviti: 'ive',$/;"	p
PorterStemmer.step2list.bli	tools/pybrain/docs/html/_static/searchtools.js	/^    izer: 'ize',$/;"	p
PorterStemmer.step2list.eli	tools/pybrain/docs/html/_static/searchtools.js	/^    entli: 'ent',$/;"	p
PorterStemmer.step2list.enci	tools/pybrain/docs/html/_static/searchtools.js	/^    tional: 'tion',$/;"	p
PorterStemmer.step2list.entli	tools/pybrain/docs/html/_static/searchtools.js	/^    alli: 'al',$/;"	p
PorterStemmer.step2list.fulness	tools/pybrain/docs/html/_static/searchtools.js	/^    iveness: 'ive',$/;"	p
PorterStemmer.step2list.iveness	tools/pybrain/docs/html/_static/searchtools.js	/^    alism: 'al',$/;"	p
PorterStemmer.step2list.iviti	tools/pybrain/docs/html/_static/searchtools.js	/^    aliti: 'al',$/;"	p
PorterStemmer.step2list.ization	tools/pybrain/docs/html/_static/searchtools.js	/^    ousli: 'ous',$/;"	p
PorterStemmer.step2list.izer	tools/pybrain/docs/html/_static/searchtools.js	/^    anci: 'ance',$/;"	p
PorterStemmer.step2list.logi	tools/pybrain/docs/html/_static/searchtools.js	/^    biliti: 'ble',$/;"	p
PorterStemmer.step2list.ousli	tools/pybrain/docs/html/_static/searchtools.js	/^    eli: 'e',$/;"	p
PorterStemmer.step2list.ousness	tools/pybrain/docs/html/_static/searchtools.js	/^    fulness: 'ful',$/;"	p
PorterStemmer.step2list.tional	tools/pybrain/docs/html/_static/searchtools.js	/^    ational: 'ate',$/;"	p
PorterStemmer.step3list.alize	tools/pybrain/docs/html/_static/searchtools.js	/^    ative: '',$/;"	p
PorterStemmer.step3list.ative	tools/pybrain/docs/html/_static/searchtools.js	/^    icate: 'ic',$/;"	p
PorterStemmer.step3list.ful	tools/pybrain/docs/html/_static/searchtools.js	/^    ical: 'ic',$/;"	p
PorterStemmer.step3list.ical	tools/pybrain/docs/html/_static/searchtools.js	/^    iciti: 'ic',$/;"	p
PorterStemmer.step3list.icate	tools/pybrain/docs/html/_static/searchtools.js	/^  var step3list = {$/;"	p
PorterStemmer.step3list.iciti	tools/pybrain/docs/html/_static/searchtools.js	/^    alize: 'al',$/;"	p
PorterStemmer.step3list.ness	tools/pybrain/docs/html/_static/searchtools.js	/^    ful: '',$/;"	p
ProgressShowInterval	examples/problem_settings.py	/^ProgressShowInterval = 100$/;"	v
ProgressShowInterval	settings.py	/^ProgressShowInterval = 100$/;"	v
PseudoPybrainAgent	pybrain/tests/unittests/tools/test_rlgluebridge.py	/^class PseudoPybrainAgent(LearningAgent):$/;"	c
PseudoPybrainAgent	tools/pybrain/pybrain/tests/unittests/tools/test_rlgluebridge.py	/^class PseudoPybrainAgent(LearningAgent):$/;"	c
Q	pybrain/rl/environments/cartpole/balancetask.py	/^    Q = array([12., 0.25, 1.25, 1.0])$/;"	v	class:LinearizedBalanceTask
Q	pybrain/rl/learners/valuebased/q.py	/^class Q(ValueBasedLearner):$/;"	c
Q	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    Q = array([12., 0.25, 1.25, 1.0])$/;"	v	class:LinearizedBalanceTask
Q	tools/pybrain/pybrain/rl/learners/valuebased/q.py	/^class Q(ValueBasedLearner):$/;"	c
QLambda	pybrain/rl/learners/valuebased/qlambda.py	/^class QLambda(ValueBasedLearner):$/;"	c
QLambda	tools/pybrain/pybrain/rl/learners/valuebased/qlambda.py	/^class QLambda(ValueBasedLearner):$/;"	c
QLambda_LinFA	pybrain/rl/learners/valuebased/linearfa.py	/^class QLambda_LinFA(LinearFALearner):$/;"	c
QLambda_LinFA	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^class QLambda_LinFA(LinearFALearner):$/;"	c
Q_LinFA	pybrain/rl/learners/valuebased/linearfa.py	/^class Q_LinFA(LinearFALearner):$/;"	c
Q_LinFA	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^class Q_LinFA(LinearFALearner):$/;"	c
QueuedExperiment	pybrain/rl/experiments/queued.py	/^class QueuedExperiment(EpisodicExperiment):$/;"	c
QueuedExperiment	tools/pybrain/pybrain/rl/experiments/queued.py	/^class QueuedExperiment(EpisodicExperiment):$/;"	c
REACH_PROB_FIG_PATH	examples/problem_settings.py	/^REACH_PROB_FIG_PATH = '.\/res\/reachProb.eps'$/;"	v
REACH_PROB_FIG_PATH	settings.py	/^REACH_PROB_FIG_PATH = '.\/res\/reachProb.eps'$/;"	v
RK4	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	280;"	d	file:
RK4	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	280;"	d	file:
RLCExperiment	pybrain/tools/rlgluebridge.py	/^class RLCExperiment(object):$/;"	c
RLCExperiment	tools/pybrain/pybrain/tools/rlgluebridge.py	/^class RLCExperiment(object):$/;"	c
RLCompetitionNotFound	pybrain/tools/rlgluebridge.py	/^class RLCompetitionNotFound(RLGlueError): pass$/;"	c
RLCompetitionNotFound	tools/pybrain/pybrain/tools/rlgluebridge.py	/^class RLCompetitionNotFound(RLGlueError): pass$/;"	c
RLGlueError	pybrain/tools/rlgluebridge.py	/^class RLGlueError(Exception): pass$/;"	c
RLGlueError	tools/pybrain/pybrain/tools/rlgluebridge.py	/^class RLGlueError(Exception): pass$/;"	c
ROOT	examples/problem_settings.py	/^ROOT = '.'$/;"	v
ROOT	settings.py	/^ROOT = '.'$/;"	v
RP_FILE	examples/problem_settings.py	/^RP_FILE = ROOT + '\/res\/rp.txt'$/;"	v
RP_FILE	settings.py	/^RP_FILE = ROOT + '\/res\/rp.txt'$/;"	v
RPropMinusTrainer	pybrain/supervised/trainers/rprop.py	/^class RPropMinusTrainer(BackpropTrainer):$/;"	c
RPropMinusTrainer	tools/pybrain/pybrain/supervised/trainers/rprop.py	/^class RPropMinusTrainer(BackpropTrainer):$/;"	c
RStandingTask	pybrain/rl/environments/ode/tasks/johnnie.py	/^class RStandingTask(StandingTask):$/;"	c
RStandingTask	tools/pybrain/pybrain/rl/environments/ode/tasks/johnnie.py	/^class RStandingTask(StandingTask):$/;"	c
RWR	pybrain/rl/learners/directsearch/rwr.py	/^class RWR(DirectSearchLearner):$/;"	c
RWR	tools/pybrain/pybrain/rl/learners/directsearch/rwr.py	/^class RWR(DirectSearchLearner):$/;"	c
RandomCapturePlayer	pybrain/rl/environments/twoplayergames/capturegameplayers/randomplayer.py	/^class RandomCapturePlayer(CapturePlayer):$/;"	c
RandomCapturePlayer	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/randomplayer.py	/^class RandomCapturePlayer(CapturePlayer):$/;"	c
RandomGomokuPlayer	pybrain/rl/environments/twoplayergames/gomokuplayers/randomplayer.py	/^class RandomGomokuPlayer(GomokuPlayer):$/;"	c
RandomGomokuPlayer	tools/pybrain/pybrain/rl/environments/twoplayergames/gomokuplayers/randomplayer.py	/^class RandomGomokuPlayer(GomokuPlayer):$/;"	c
RandomSearch	pybrain/optimization/randomsearch.py	/^class RandomSearch(BlackBoxOptimizer):$/;"	c
RandomSearch	tools/pybrain/pybrain/optimization/randomsearch.py	/^class RandomSearch(BlackBoxOptimizer):$/;"	c
Randomization	pybrain/supervised/evolino/gfilter.py	/^class Randomization(SimpleGenomeManipulation):$/;"	c
Randomization	tools/pybrain/pybrain/supervised/evolino/gfilter.py	/^class Randomization(SimpleGenomeManipulation):$/;"	c
Rank1NES	pybrain/optimization/distributionbased/rank1.py	/^class Rank1NES(DistributionBasedOptimizer):$/;"	c
Rank1NES	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^class Rank1NES(DistributionBasedOptimizer):$/;"	c
RankingFunction	pybrain/tools/rankingfunctions.py	/^class RankingFunction(Named):$/;"	c
RankingFunction	tools/pybrain/pybrain/tools/rankingfunctions.py	/^class RankingFunction(Named):$/;"	c
RastriginFunction	pybrain/rl/environments/functions/multimodal.py	/^class RastriginFunction(MultiModalFunction):$/;"	c
RastriginFunction	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^class RastriginFunction(MultiModalFunction):$/;"	c
Rbm	pybrain/structure/networks/rbm.py	/^class Rbm(object):$/;"	c
Rbm	tools/pybrain/pybrain/structure/networks/rbm.py	/^class Rbm(object):$/;"	c
RbmBernoulliTrainer	pybrain/unsupervised/trainers/rbm.py	/^class RbmBernoulliTrainer(RbmGibbsTrainer):$/;"	c
RbmBernoulliTrainer	tools/pybrain/pybrain/unsupervised/trainers/rbm.py	/^class RbmBernoulliTrainer(RbmGibbsTrainer):$/;"	c
RbmGaussTrainer	pybrain/unsupervised/trainers/rbm.py	/^class RbmGaussTrainer(RbmGibbsTrainer):$/;"	c
RbmGaussTrainer	tools/pybrain/pybrain/unsupervised/trainers/rbm.py	/^class RbmGaussTrainer(RbmGibbsTrainer):$/;"	c
RbmGibbsTrainer	pybrain/unsupervised/trainers/rbm.py	/^class RbmGibbsTrainer(Trainer):$/;"	c
RbmGibbsTrainer	tools/pybrain/pybrain/unsupervised/trainers/rbm.py	/^class RbmGibbsTrainer(Trainer):$/;"	c
RbmGibbsTrainerConfig	pybrain/unsupervised/trainers/rbm.py	/^class RbmGibbsTrainerConfig:$/;"	c
RbmGibbsTrainerConfig	tools/pybrain/pybrain/unsupervised/trainers/rbm.py	/^class RbmGibbsTrainerConfig:$/;"	c
ReachProbCalculator	ReachProbCalculator.py	/^class ReachProbCalculator:$/;"	c
RecurrentDecomposableNetwork	pybrain/structure/networks/neurondecomposable.py	/^class RecurrentDecomposableNetwork(NeuronDecomposableNetwork, RecurrentNetwork):$/;"	c
RecurrentDecomposableNetwork	tools/pybrain/pybrain/structure/networks/neurondecomposable.py	/^class RecurrentDecomposableNetwork(NeuronDecomposableNetwork, RecurrentNetwork):$/;"	c
RecurrentNetwork	pybrain/structure/networks/recurrent.py	/^class RecurrentNetwork(RecurrentNetworkComponent, Network):$/;"	c
RecurrentNetwork	tools/pybrain/pybrain/structure/networks/recurrent.py	/^class RecurrentNetwork(RecurrentNetworkComponent, Network):$/;"	c
RecurrentNetworkComponent	pybrain/structure/networks/recurrent.py	/^class RecurrentNetworkComponent(object):$/;"	c
RecurrentNetworkComponent	tools/pybrain/pybrain/structure/networks/recurrent.py	/^class RecurrentNetworkComponent(object):$/;"	c
Reinforce	pybrain/rl/learners/directsearch/reinforce.py	/^class Reinforce(PolicyGradientLearner):$/;"	c
Reinforce	tools/pybrain/pybrain/rl/learners/directsearch/reinforce.py	/^class Reinforce(PolicyGradientLearner):$/;"	c
ReinforcementDataSet	pybrain/datasets/reinforcement.py	/^class ReinforcementDataSet(SequentialDataSet):$/;"	c
ReinforcementDataSet	tools/pybrain/pybrain/datasets/reinforcement.py	/^class ReinforcementDataSet(SequentialDataSet):$/;"	c
RelativeCaptureTask	pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^class RelativeCaptureTask(CaptureGameTask):$/;"	c
RelativeCaptureTask	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^class RelativeCaptureTask(CaptureGameTask):$/;"	c
RelativeGomokuTask	pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^class RelativeGomokuTask(GomokuTask):$/;"	c
RelativeGomokuTask	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^class RelativeGomokuTask(GomokuTask):$/;"	c
Renderer	pybrain/rl/environments/renderer.py	/^class Renderer(threading.Thread):$/;"	c
Renderer	tools/pybrain/pybrain/rl/environments/renderer.py	/^class Renderer(threading.Thread):$/;"	c
RlCompBenchmark	pybrain/tools/rlgluebridge.py	/^class RlCompBenchmark(object):$/;"	c
RlCompBenchmark	tools/pybrain/pybrain/tools/rlgluebridge.py	/^class RlCompBenchmark(object):$/;"	c
RlglueAgentAdapter	pybrain/tools/rlgluebridge.py	/^class RlglueAgentAdapter(object):$/;"	c
RlglueAgentAdapter	tools/pybrain/pybrain/tools/rlgluebridge.py	/^class RlglueAgentAdapter(object):$/;"	c
RobStandingTask	pybrain/rl/environments/ode/tasks/johnnie.py	/^class RobStandingTask(RStandingTask):$/;"	c
RobStandingTask	tools/pybrain/pybrain/rl/environments/ode/tasks/johnnie.py	/^class RobStandingTask(RStandingTask):$/;"	c
RobotMotionTask	task/RobotMotionTask.py	/^class RobotMotionTask(MDPMazeTask):$/;"	c
RobotMotionTaskTestCase	task/RobotMotionTask.py	/^class RobotMotionTaskTestCase(unittest.TestCase):$/;"	c
RobustStandingTask	pybrain/rl/environments/ode/tasks/johnnie.py	/^class RobustStandingTask(RobStandingTask):$/;"	c
RobustStandingTask	tools/pybrain/pybrain/rl/environments/ode/tasks/johnnie.py	/^class RobustStandingTask(RobStandingTask):$/;"	c
RollingUpTask	pybrain/rl/environments/flexcube/tasks.py	/^class RollingUpTask(WalkTask):$/;"	c
RollingUpTask	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^class RollingUpTask(WalkTask):$/;"	c
RosenbrockFunction	pybrain/rl/environments/functions/unimodal.py	/^class RosenbrockFunction(FunctionEnvironment):$/;"	c
RosenbrockFunction	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^class RosenbrockFunction(FunctionEnvironment):$/;"	c
RotateFunction	pybrain/rl/environments/functions/transformations.py	/^class RotateFunction(FunctionEnvironment):$/;"	c
RotateFunction	tools/pybrain/pybrain/rl/environments/functions/transformations.py	/^class RotateFunction(FunctionEnvironment):$/;"	c
S	pybrain/rl/environments/mazes/maze.py	/^    S = (-1, 0)$/;"	v	class:Maze
S	tools/pybrain/pybrain/rl/environments/mazes/maze.py	/^    S = (-1, 0)$/;"	v	class:Maze
SARSA	pybrain/rl/learners/valuebased/sarsa.py	/^class SARSA(ValueBasedLearner):$/;"	c
SARSA	tools/pybrain/pybrain/rl/learners/valuebased/sarsa.py	/^class SARSA(ValueBasedLearner):$/;"	c
SARSALambda_LinFA	pybrain/rl/learners/valuebased/linearfa.py	/^class SARSALambda_LinFA(QLambda_LinFA):$/;"	c
SARSALambda_LinFA	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^class SARSALambda_LinFA(QLambda_LinFA):$/;"	c
SCENE_SELECT	examples/problem_settings.py	/^SCENE_SELECT = 'small'$/;"	v
SCENE_SELECT	settings.py	/^SCENE_SELECT = 'small'$/;"	v
SNES	pybrain/optimization/distributionbased/snes.py	/^class SNES(DistributionBasedOptimizer):$/;"	c
SNES	tools/pybrain/pybrain/optimization/distributionbased/snes.py	/^class SNES(DistributionBasedOptimizer):$/;"	c
SPECIFICBASELINE	pybrain/optimization/distributionbased/nes.py	/^    SPECIFICBASELINE = 2$/;"	v	class:ExactNES
SPECIFICBASELINE	tools/pybrain/pybrain/optimization/distributionbased/nes.py	/^    SPECIFICBASELINE = 2$/;"	v	class:ExactNES
SPHINXBUILD	tools/pybrain/docs/sphinx/Makefile	/^SPHINXBUILD   = sphinx-build$/;"	m
SPHINXOPTS	tools/pybrain/docs/sphinx/Makefile	/^SPHINXOPTS    =$/;"	m
STUDENTT	pybrain/optimization/distributionbased/distributionbased.py	/^    STUDENTT = 4$/;"	v	class:DistributionBasedOptimizer
STUDENTT	tools/pybrain/pybrain/optimization/distributionbased/distributionbased.py	/^    STUDENTT = 4$/;"	v	class:DistributionBasedOptimizer
SVMData	pybrain/tools/svmdata.py	/^class SVMData(SupervisedDataSet):$/;"	c
SVMData	tools/pybrain/pybrain/tools/svmdata.py	/^class SVMData(SupervisedDataSet):$/;"	c
SVMTrainer	pybrain/supervised/trainers/svmtrainer.py	/^class SVMTrainer(object):$/;"	c
SVMTrainer	tools/pybrain/pybrain/supervised/trainers/svmtrainer.py	/^class SVMTrainer(object):$/;"	c
SVMUnit	pybrain/structure/modules/svmunit.py	/^class SVMUnit(object):$/;"	c
SVMUnit	tools/pybrain/pybrain/structure/modules/svmunit.py	/^class SVMUnit(object):$/;"	c
SampleLayer	pybrain/structure/modules/samplelayer.py	/^class SampleLayer(NeuronLayer):$/;"	c
SampleLayer	tools/pybrain/pybrain/structure/modules/samplelayer.py	/^class SampleLayer(NeuronLayer):$/;"	c
SchBenchmark	pybrain/rl/environments/functions/multiobjective.py	/^class SchBenchmark(MultiObjectiveFunction):$/;"	c
SchBenchmark	tools/pybrain/pybrain/rl/environments/functions/multiobjective.py	/^class SchBenchmark(MultiObjectiveFunction):$/;"	c
SchaffersF7Function	pybrain/rl/environments/functions/multimodal.py	/^class SchaffersF7Function(MultiModalFunction):$/;"	c
SchaffersF7Function	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^class SchaffersF7Function(MultiModalFunction):$/;"	c
Schwefel20Function	pybrain/rl/environments/functions/multimodal.py	/^class Schwefel20Function(MultiModalFunction):$/;"	c
Schwefel20Function	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^class Schwefel20Function(MultiModalFunction):$/;"	c
SchwefelFunction	pybrain/rl/environments/functions/unimodal.py	/^class SchwefelFunction(FunctionEnvironment):$/;"	c
SchwefelFunction	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^class SchwefelFunction(FunctionEnvironment):$/;"	c
Schwefel_2_13Function	pybrain/rl/environments/functions/multimodal.py	/^class Schwefel_2_13Function(MultiModalFunction):$/;"	c
Schwefel_2_13Function	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^class Schwefel_2_13Function(MultiModalFunction):$/;"	c
Search._index	tools/pybrain/docs/html/_static/searchtools.js	/^var Search = {$/;"	p
Search._pulse_status	tools/pybrain/docs/html/_static/searchtools.js	/^  _queued_query : null,$/;"	p
Search._queued_query	tools/pybrain/docs/html/_static/searchtools.js	/^  _index : null,$/;"	p
SecondBasisDataSet	learners/HessianACLearner.py	/^class SecondBasisDataSet(DataSet):$/;"	c
Sensor	pybrain/rl/environments/ode/sensors.py	/^class Sensor(Named):$/;"	c
Sensor	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^class Sensor(Named):$/;"	c
Sensors	pybrain/rl/environments/flexcube/sensors.py	/^class Sensors:$/;"	c
Sensors	tools/pybrain/pybrain/rl/environments/flexcube/sensors.py	/^class Sensors:$/;"	c
SequenceClassificationDataSet	pybrain/datasets/classification.py	/^class SequenceClassificationDataSet(SequentialDataSet, ClassificationDataSet):$/;"	c
SequenceClassificationDataSet	tools/pybrain/pybrain/datasets/classification.py	/^class SequenceClassificationDataSet(SequentialDataSet, ClassificationDataSet):$/;"	c
SequenceHelper	pybrain/tools/validation.py	/^class SequenceHelper(object):$/;"	c
SequenceHelper	tools/pybrain/pybrain/tools/validation.py	/^class SequenceHelper(object):$/;"	c
SequentialDataSet	pybrain/datasets/sequential.py	/^class SequentialDataSet(SupervisedDataSet):$/;"	c
SequentialDataSet	tools/pybrain/pybrain/datasets/sequential.py	/^class SequentialDataSet(SupervisedDataSet):$/;"	c
SequentialXORDataSet	tools/pybrain/examples/supervised/backprop/datasets/xor.py	/^class SequentialXORDataSet(ImportanceDataSet):$/;"	c
Serializable	pybrain/utilities.py	/^class Serializable(object):$/;"	c
Serializable	tools/pybrain/pybrain/utilities.py	/^class Serializable(object):$/;"	c
SharedConnection	pybrain/structure/connections/shared.py	/^class SharedConnection(Connection):$/;"	c
SharedConnection	tools/pybrain/pybrain/structure/connections/shared.py	/^class SharedConnection(Connection):$/;"	c
SharedFullConnection	pybrain/structure/connections/shared.py	/^class SharedFullConnection(SharedConnection, FullConnection):$/;"	c
SharedFullConnection	tools/pybrain/pybrain/structure/connections/shared.py	/^class SharedFullConnection(SharedConnection, FullConnection):$/;"	c
SharedSubsamplingConnection	pybrain/structure/connections/shared.py	/^class SharedSubsamplingConnection(SharedConnection, SubsamplingConnection):$/;"	c
SharedSubsamplingConnection	tools/pybrain/pybrain/structure/connections/shared.py	/^class SharedSubsamplingConnection(SharedConnection, SubsamplingConnection):$/;"	c
SharpRFunction	pybrain/rl/environments/functions/unbounded.py	/^class SharpRFunction(UnboundedFunctionEnvironment):$/;"	c
SharpRFunction	tools/pybrain/pybrain/rl/environments/functions/unbounded.py	/^class SharpRFunction(UnboundedFunctionEnvironment):$/;"	c
SharpRFunctionBis	pybrain/rl/environments/functions/unimodal.py	/^class SharpRFunctionBis(FunctionEnvironment):$/;"	c
SharpRFunctionBis	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^class SharpRFunctionBis(FunctionEnvironment):$/;"	c
ShipSteeringEnvironment	pybrain/rl/environments/shipsteer/shipsteer.py	/^class ShipSteeringEnvironment(Environment):$/;"	c
ShipSteeringEnvironment	tools/pybrain/pybrain/rl/environments/shipsteer/shipsteer.py	/^class ShipSteeringEnvironment(Environment):$/;"	c
ShuttleDocking	pybrain/rl/environments/mazes/tasks/shuttle.py	/^class ShuttleDocking(MazeTask):$/;"	c
ShuttleDocking	tools/pybrain/pybrain/rl/environments/mazes/tasks/shuttle.py	/^class ShuttleDocking(MazeTask):$/;"	c
SigmoidLayer	pybrain/structure/modules/sigmoidlayer.py	/^class SigmoidLayer(NeuronLayer):$/;"	c
SigmoidLayer	tools/pybrain/pybrain/structure/modules/sigmoidlayer.py	/^class SigmoidLayer(NeuronLayer):$/;"	c
SimpleAcrobot	pybrain/rl/environments/classic/acrobot.py	/^class SimpleAcrobot(AcrobotTask):$/;"	c
SimpleAcrobot	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^class SimpleAcrobot(AcrobotTask):$/;"	c
SimpleController	pybrain/rl/environments/simplerace/simplecontroller.py	/^class SimpleController(Agent):$/;"	c
SimpleController	tools/pybrain/pybrain/rl/environments/simplerace/simplecontroller.py	/^class SimpleController(Agent):$/;"	c
SimpleConvolutionalNetwork	pybrain/structure/networks/convolutional.py	/^class SimpleConvolutionalNetwork(FeedForwardNetwork):$/;"	c
SimpleConvolutionalNetwork	tools/pybrain/pybrain/structure/networks/convolutional.py	/^class SimpleConvolutionalNetwork(FeedForwardNetwork):$/;"	c
SimpleEnvironment	pybrain/rl/environments/simple/environment.py	/^class SimpleEnvironment(Environment):$/;"	c
SimpleEnvironment	tools/pybrain/pybrain/rl/environments/simple/environment.py	/^class SimpleEnvironment(Environment):$/;"	c
SimpleEvo	pybrain/tests/optimizationtest.py	/^class SimpleEvo(Evolvable):$/;"	c
SimpleEvo	tools/pybrain/pybrain/tests/optimizationtest.py	/^class SimpleEvo(Evolvable):$/;"	c
SimpleGenomeManipulation	pybrain/supervised/evolino/gfilter.py	/^class SimpleGenomeManipulation(Filter):$/;"	c
SimpleGenomeManipulation	tools/pybrain/pybrain/supervised/evolino/gfilter.py	/^class SimpleGenomeManipulation(Filter):$/;"	c
SimpleMutation	pybrain/supervised/evolino/gfilter.py	/^class SimpleMutation(SimpleGenomeManipulation):$/;"	c
SimpleMutation	tools/pybrain/pybrain/supervised/evolino/gfilter.py	/^class SimpleMutation(SimpleGenomeManipulation):$/;"	c
SimplePopulation	pybrain/supervised/evolino/gpopulation.py	/^class SimplePopulation(Population):$/;"	c
SimplePopulation	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^class SimplePopulation(Population):$/;"	c
SimpleRenderer	pybrain/rl/environments/simple/renderer.py	/^class SimpleRenderer(Renderer):$/;"	c
SimpleRenderer	tools/pybrain/pybrain/rl/environments/simple/renderer.py	/^class SimpleRenderer(Renderer):$/;"	c
SimpleSPSA	pybrain/optimization/finitedifference/spsa.py	/^class SimpleSPSA(FiniteDifferences):$/;"	c
SimpleSPSA	tools/pybrain/pybrain/optimization/finitedifference/spsa.py	/^class SimpleSPSA(FiniteDifferences):$/;"	c
SimpleTemporalLogic	task/SimpleTemporalLogic.py	/^class SimpleTemporalLogic(RobotMotionTask):$/;"	c
SimpleraceEnvironment	pybrain/rl/environments/simplerace/simpleracetcp.py	/^class SimpleraceEnvironment(Environment):$/;"	c
SimpleraceEnvironment	tools/pybrain/pybrain/rl/environments/simplerace/simpleracetcp.py	/^class SimpleraceEnvironment(Environment):$/;"	c
SimpleraceTask	pybrain/rl/environments/simplerace/simpleracetask.py	/^class SimpleraceTask(EpisodicTask):$/;"	c
SimpleraceTask	tools/pybrain/pybrain/rl/environments/simplerace/simpleracetask.py	/^class SimpleraceTask(EpisodicTask):$/;"	c
SingleArmSwinger	pybrain/rl/environments/classic/acrobot.py	/^class SingleArmSwinger(AcrobotTask):$/;"	c
SingleArmSwinger	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^class SingleArmSwinger(AcrobotTask):$/;"	c
SizeError	pybrain/rl/environments/ode/sensors.py	/^class SizeError(Exception):$/;"	c
SizeError	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^class SizeError(Exception):$/;"	c
SmoothGiniRanking	pybrain/tools/rankingfunctions.py	/^class SmoothGiniRanking(RankingFunction):$/;"	c
SmoothGiniRanking	tools/pybrain/pybrain/tools/rankingfunctions.py	/^class SmoothGiniRanking(RankingFunction):$/;"	c
SoftConstrainedFunction	pybrain/rl/environments/functions/transformations.py	/^class SoftConstrainedFunction(FunctionEnvironment):$/;"	c
SoftConstrainedFunction	tools/pybrain/pybrain/rl/environments/functions/transformations.py	/^class SoftConstrainedFunction(FunctionEnvironment):$/;"	c
SoftSignLayer	pybrain/structure/modules/softsign.py	/^class SoftSignLayer(NeuronLayer):$/;"	c
SoftSignLayer	tools/pybrain/pybrain/structure/modules/softsign.py	/^class SoftSignLayer(NeuronLayer):$/;"	c
SoftmaxLayer	pybrain/structure/modules/softmax.py	/^class SoftmaxLayer(NeuronLayer):$/;"	c
SoftmaxLayer	tools/pybrain/pybrain/structure/modules/softmax.py	/^class SoftmaxLayer(NeuronLayer):$/;"	c
SpecificBodyPositionSensor	pybrain/rl/environments/ode/sensors.py	/^class SpecificBodyPositionSensor(BodyPositionSensor):$/;"	c
SpecificBodyPositionSensor	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^class SpecificBodyPositionSensor(BodyPositionSensor):$/;"	c
SpecificJointActuator	pybrain/rl/environments/ode/actuators.py	/^class SpecificJointActuator(JointActuator):$/;"	c
SpecificJointActuator	tools/pybrain/pybrain/rl/environments/ode/actuators.py	/^class SpecificJointActuator(JointActuator):$/;"	c
SpecificJointSensor	pybrain/rl/environments/ode/sensors.py	/^class SpecificJointSensor(JointSensor):$/;"	c
SpecificJointSensor	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^class SpecificJointSensor(JointSensor):$/;"	c
SpecificJointVelocitySensor	pybrain/rl/environments/ode/sensors.py	/^class SpecificJointVelocitySensor(JointVelocitySensor):$/;"	c
SpecificJointVelocitySensor	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^class SpecificJointVelocitySensor(JointVelocitySensor):$/;"	c
SphereFunction	pybrain/rl/environments/functions/unimodal.py	/^class SphereFunction(FunctionEnvironment):$/;"	c
SphereFunction	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^class SphereFunction(FunctionEnvironment):$/;"	c
StandingTask	pybrain/rl/environments/ode/tasks/johnnie.py	/^class StandingTask(JohnnieTask):$/;"	c
StandingTask	tools/pybrain/pybrain/rl/environments/ode/tasks/johnnie.py	/^class StandingTask(JohnnieTask):$/;"	c
StandingUpTask	pybrain/rl/environments/ode/tasks/johnnie.py	/^class StandingUpTask(StandingTask):$/;"	c
StandingUpTask	tools/pybrain/pybrain/rl/environments/ode/tasks/johnnie.py	/^class StandingUpTask(StandingTask):$/;"	c
StartEpisode	pybrain/rl/environments/classic/acrobot.py	/^    def StartEpisode(self):$/;"	m	class:AcrobotTask
StartEpisode	pybrain/rl/environments/classic/mountaincar.py	/^    def StartEpisode(self):$/;"	m	class:MountainCar
StartEpisode	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    def StartEpisode(self):$/;"	m	class:AcrobotTask
StartEpisode	tools/pybrain/pybrain/rl/environments/classic/mountaincar.py	/^    def StartEpisode(self):$/;"	m	class:MountainCar
StateDependentExplorer	pybrain/rl/explorers/continuous/sde.py	/^class StateDependentExplorer(Explorer, ParameterContainer):$/;"	c
StateDependentExplorer	tools/pybrain/pybrain/rl/explorers/continuous/sde.py	/^class StateDependentExplorer(Explorer, ParameterContainer):$/;"	c
StateDependentLayer	pybrain/structure/modules/statedependentlayer.py	/^class StateDependentLayer(NeuronLayer, ParameterContainer):$/;"	c
StateDependentLayer	tools/pybrain/pybrain/structure/modules/statedependentlayer.py	/^class StateDependentLayer(NeuronLayer, ParameterContainer):$/;"	c
Stay	pybrain/rl/environments/mazes/polarmaze.py	/^    Stay = 0$/;"	v	class:PolarMaze
Stay	tools/pybrain/pybrain/rl/environments/mazes/polarmaze.py	/^    Stay = 0$/;"	v	class:PolarMaze
StepElliFunction	pybrain/rl/environments/functions/unimodal.py	/^class StepElliFunction(ElliFunction):$/;"	c
StepElliFunction	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^class StepElliFunction(ElliFunction):$/;"	c
StochasticHillClimber	pybrain/optimization/hillclimber.py	/^class StochasticHillClimber(HillClimber):$/;"	c
StochasticHillClimber	tools/pybrain/pybrain/optimization/hillclimber.py	/^class StochasticHillClimber(HillClimber):$/;"	c
SubsamplingConnection	pybrain/structure/connections/subsampling.py	/^class SubsamplingConnection(Connection, ParameterContainer):$/;"	c
SubsamplingConnection	tools/pybrain/pybrain/structure/connections/subsampling.py	/^class SubsamplingConnection(Connection, ParameterContainer):$/;"	c
SuperimposedSine	tools/pybrain/examples/supervised/evolino/lib/data_generator.py	/^class SuperimposedSine(object):$/;"	c
SupervisedDataSet	pybrain/datasets/supervised.py	/^class SupervisedDataSet(DataSet):$/;"	c
SupervisedDataSet	tools/pybrain/pybrain/datasets/supervised.py	/^class SupervisedDataSet(DataSet):$/;"	c
SwipingNetwork	pybrain/structure/networks/swiping.py	/^class SwipingNetwork(FeedForwardNetwork):$/;"	c
SwipingNetwork	tools/pybrain/pybrain/structure/networks/swiping.py	/^class SwipingNetwork(FeedForwardNetwork):$/;"	c
SwitchLayer	pybrain/structure/modules/gate.py	/^class SwitchLayer(NeuronLayer):$/;"	c
SwitchLayer	tools/pybrain/pybrain/structure/modules/gate.py	/^class SwitchLayer(NeuronLayer):$/;"	c
T	examples/problem_settings.py	/^T = 100$/;"	v
T	settings.py	/^T = 100$/;"	v
TAU	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^static const double TAU         = 0.01;	  \/\/seconds between state updates$/;"	v	file:
TAU	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^static const double TAU         = 0.01;	  \/\/seconds between state updates$/;"	v	file:
TDLearner	learners/TDLearner.py	/^class TDLearner(ActorCriticLearner):$/;"	c
THETA_FILE	examples/problem_settings.py	/^THETA_FILE = ROOT + '\/res\/theta.txt'$/;"	v
THETA_FILE	settings.py	/^THETA_FILE = ROOT + '\/res\/theta.txt'$/;"	v
TMaze	pybrain/rl/environments/mazes/tasks/tmaze.py	/^class TMaze(MazeTask):$/;"	c
TMaze	tools/pybrain/pybrain/rl/environments/mazes/tasks/tmaze.py	/^class TMaze(MazeTask):$/;"	c
TP	examples/problem_settings.py	/^TP = [[0.7, 0.1, 0.1, 0.1],$/;"	v
TP	settings.py	/^TP = [[0.7, 0.1, 0.1, 0.1],$/;"	v
TPNormalize	task/RobotMotionTask.py	/^def TPNormalize(allowns, allowTP, state, uSize):$/;"	f
TRACK_SIZE	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^static const double TRACK_SIZE  = 2.4;$/;"	v	file:
TRACK_SIZE	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^static const double TRACK_SIZE  = 2.4;$/;"	v	file:
Table	pybrain/structure/modules/table.py	/^class Table(Module, ParameterContainer):$/;"	c
Table	tools/pybrain/pybrain/structure/modules/table.py	/^class Table(Module, ParameterContainer):$/;"	c
TabletFunction	pybrain/rl/environments/functions/unimodal.py	/^class TabletFunction(FunctionEnvironment):$/;"	c
TabletFunction	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^class TabletFunction(FunctionEnvironment):$/;"	c
TanhLayer	pybrain/structure/modules/tanhlayer.py	/^class TanhLayer(NeuronLayer):$/;"	c
TanhLayer	tools/pybrain/pybrain/structure/modules/tanhlayer.py	/^class TanhLayer(NeuronLayer):$/;"	c
Target	pybrain/rl/environments/flexcube/sensors.py	/^class Target(defaultSensor):$/;"	c
Target	tools/pybrain/pybrain/rl/environments/flexcube/sensors.py	/^class Target(defaultSensor):$/;"	c
TargetTask	pybrain/rl/environments/flexcube/tasks.py	/^class TargetTask(WalkDirectionTask):$/;"	c
TargetTask	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^class TargetTask(WalkDirectionTask):$/;"	c
Task	pybrain/rl/environments/task.py	/^class Task(object):$/;"	c
Task	tools/pybrain/pybrain/rl/environments/task.py	/^class Task(object):$/;"	c
TigerTask	pybrain/rl/environments/mazes/tasks/tiger.py	/^class TigerTask(POMDPTask):$/;"	c
TigerTask	tools/pybrain/pybrain/rl/environments/mazes/tasks/tiger.py	/^class TigerTask(POMDPTask):$/;"	c
Time	pybrain/rl/environments/flexcube/sensors.py	/^class Time(defaultSensor):$/;"	c
Time	tools/pybrain/pybrain/rl/environments/flexcube/sensors.py	/^class Time(defaultSensor):$/;"	c
TopLinearRanking	pybrain/tools/rankingfunctions.py	/^class TopLinearRanking(TopSelection):$/;"	c
TopLinearRanking	tools/pybrain/pybrain/tools/rankingfunctions.py	/^class TopLinearRanking(TopSelection):$/;"	c
TopSelection	pybrain/tools/rankingfunctions.py	/^class TopSelection(RankingFunction):$/;"	c
TopSelection	tools/pybrain/pybrain/tools/rankingfunctions.py	/^class TopSelection(RankingFunction):$/;"	c
TopologyEvolvable	pybrain/structure/evolvables/topology.py	/^class TopologyEvolvable(ParameterContainer):$/;"	c
TopologyEvolvable	tools/pybrain/pybrain/structure/evolvables/topology.py	/^class TopologyEvolvable(ParameterContainer):$/;"	c
TopologyOptimizer	pybrain/optimization/optimizer.py	/^class TopologyOptimizer(BlackBoxOptimizer):$/;"	c
TopologyOptimizer	tools/pybrain/pybrain/optimization/optimizer.py	/^class TopologyOptimizer(BlackBoxOptimizer):$/;"	c
Tournament	pybrain/rl/experiments/tournament.py	/^class Tournament(Named):$/;"	c
Tournament	tools/pybrain/pybrain/rl/experiments/tournament.py	/^class Tournament(Named):$/;"	c
TournamentSelection	pybrain/tools/rankingfunctions.py	/^class TournamentSelection(RankingFunction):$/;"	c
TournamentSelection	tools/pybrain/pybrain/tools/rankingfunctions.py	/^class TournamentSelection(RankingFunction):$/;"	c
Trainer	pybrain/supervised/trainers/trainer.py	/^class Trainer(Named):$/;"	c
Trainer	tools/pybrain/pybrain/supervised/trainers/trainer.py	/^class Trainer(Named):$/;"	c
TranslateFunction	pybrain/rl/environments/functions/transformations.py	/^class TranslateFunction(FunctionEnvironment):$/;"	c
TranslateFunction	tools/pybrain/pybrain/rl/environments/functions/transformations.py	/^class TranslateFunction(FunctionEnvironment):$/;"	c
TrapMaze	environments/TrapMaze.py	/^class TrapMaze(Maze):$/;"	c
TrivialMaze	pybrain/rl/environments/mazes/tasks/maze.py	/^class TrivialMaze(MazeTask):$/;"	c
TrivialMaze	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze.py	/^class TrivialMaze(MazeTask):$/;"	c
TurnAround	pybrain/rl/environments/mazes/polarmaze.py	/^    TurnAround = 2$/;"	v	class:PolarMaze
TurnAround	pybrain/rl/environments/mazes/tasks/shuttle.py	/^    TurnAround = 2$/;"	v	class:ShuttleDocking
TurnAround	tools/pybrain/pybrain/rl/environments/mazes/polarmaze.py	/^    TurnAround = 2$/;"	v	class:PolarMaze
TurnAround	tools/pybrain/pybrain/rl/environments/mazes/tasks/shuttle.py	/^    TurnAround = 2$/;"	v	class:ShuttleDocking
TurnLeft	pybrain/rl/environments/mazes/polarmaze.py	/^    TurnLeft = 3$/;"	v	class:PolarMaze
TurnLeft	tools/pybrain/pybrain/rl/environments/mazes/polarmaze.py	/^    TurnLeft = 3$/;"	v	class:PolarMaze
TurnRight	pybrain/rl/environments/mazes/polarmaze.py	/^    TurnRight = 4$/;"	v	class:PolarMaze
TurnRight	tools/pybrain/pybrain/rl/environments/mazes/polarmaze.py	/^    TurnRight = 4$/;"	v	class:PolarMaze
TwoPlayerGame	pybrain/rl/environments/twoplayergames/twoplayergame.py	/^class TwoPlayerGame(CompetitiveEnvironment):$/;"	c
TwoPlayerGame	tools/pybrain/pybrain/rl/environments/twoplayergames/twoplayergame.py	/^class TwoPlayerGame(CompetitiveEnvironment):$/;"	c
UDPClient	pybrain/tools/networking/udpconnection.py	/^class UDPClient(object):$/;"	c
UDPClient	tools/pybrain/pybrain/tools/networking/udpconnection.py	/^class UDPClient(object):$/;"	c
UDPServer	pybrain/tools/networking/udpconnection.py	/^class UDPServer(object):$/;"	c
UDPServer	tools/pybrain/pybrain/tools/networking/udpconnection.py	/^class UDPServer(object):$/;"	c
UNIFORMBASELINE	pybrain/optimization/distributionbased/nes.py	/^    UNIFORMBASELINE = 1$/;"	v	class:ExactNES
UNIFORMBASELINE	tools/pybrain/pybrain/optimization/distributionbased/nes.py	/^    UNIFORMBASELINE = 1$/;"	v	class:ExactNES
UnboundedFunctionEnvironment	pybrain/rl/environments/functions/unbounded.py	/^class UnboundedFunctionEnvironment(FunctionEnvironment):$/;"	c
UnboundedFunctionEnvironment	tools/pybrain/pybrain/rl/environments/functions/unbounded.py	/^class UnboundedFunctionEnvironment(FunctionEnvironment):$/;"	c
UniformVariate	pybrain/supervised/evolino/variate.py	/^class UniformVariate:$/;"	c
UniformVariate	tools/pybrain/pybrain/supervised/evolino/variate.py	/^class UniformVariate:$/;"	c
UnsupervisedDataSet	pybrain/datasets/unsupervised.py	/^class UnsupervisedDataSet(DataSet):$/;"	c
UnsupervisedDataSet	tools/pybrain/pybrain/datasets/unsupervised.py	/^class UnsupervisedDataSet(DataSet):$/;"	c
VIS	util.py	/^VIS = False$/;"	v
VISUAL	examples/problem_settings.py	/^VISUAL = False$/;"	v
VISUAL	settings.py	/^VISUAL = False$/;"	v
Validator	pybrain/tools/validation.py	/^class Validator(object):$/;"	c
Validator	tools/pybrain/pybrain/tools/validation.py	/^class Validator(object):$/;"	c
ValueBasedLearner	pybrain/rl/learners/valuebased/valuebased.py	/^class ValueBasedLearner(ExploringLearner, DataSetLearner, EpisodicLearner):$/;"	c
ValueBasedLearner	tools/pybrain/pybrain/rl/learners/valuebased/valuebased.py	/^class ValueBasedLearner(ExploringLearner, DataSetLearner, EpisodicLearner):$/;"	c
VanillaGradientEvolutionStrategies	pybrain/optimization/distributionbased/ves.py	/^class VanillaGradientEvolutionStrategies(DistributionBasedOptimizer):$/;"	c
VanillaGradientEvolutionStrategies	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^class VanillaGradientEvolutionStrategies(DistributionBasedOptimizer):$/;"	c
VectorFormatError	pybrain/datasets/dataset.py	/^class VectorFormatError(Exception): pass$/;"	c
VectorFormatError	tools/pybrain/pybrain/datasets/dataset.py	/^class VectorFormatError(Exception): pass$/;"	c
VerticesContact	pybrain/rl/environments/flexcube/sensors.py	/^class VerticesContact(defaultSensor):$/;"	c
VerticesContact	tools/pybrain/pybrain/rl/environments/flexcube/sensors.py	/^class VerticesContact(defaultSensor):$/;"	c
VerticesMinHight	pybrain/rl/environments/flexcube/sensors.py	/^class VerticesMinHight(defaultSensor):$/;"	c
VerticesMinHight	tools/pybrain/pybrain/rl/environments/flexcube/sensors.py	/^class VerticesMinHight(defaultSensor):$/;"	c
VerySimpleAcrobot	pybrain/rl/environments/classic/acrobot.py	/^class VerySimpleAcrobot(AcrobotTask):$/;"	c
VerySimpleAcrobot	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^class VerySimpleAcrobot(AcrobotTask):$/;"	c
Visualize	compare.py	/^def Visualize():$/;"	f
W	pybrain/rl/environments/mazes/maze.py	/^    W = (0, -1)$/;"	v	class:Maze
W	tools/pybrain/pybrain/rl/environments/mazes/maze.py	/^    W = (0, -1)$/;"	v	class:Maze
WHITE	pybrain/rl/environments/twoplayergames/capturegame.py	/^    WHITE = -1$/;"	v	class:CaptureGame
WHITE	pybrain/rl/environments/twoplayergames/gomoku.py	/^    WHITE = -1$/;"	v	class:GomokuGame
WHITE	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    WHITE = -1$/;"	v	class:CaptureGame
WHITE	tools/pybrain/pybrain/rl/environments/twoplayergames/gomoku.py	/^    WHITE = -1$/;"	v	class:GomokuGame
WalkDirectionTask	pybrain/rl/environments/flexcube/tasks.py	/^class WalkDirectionTask(WalkTask):$/;"	c
WalkDirectionTask	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^class WalkDirectionTask(WalkTask):$/;"	c
WalkTask	pybrain/rl/environments/flexcube/tasks.py	/^class WalkTask(NoRewardTask):$/;"	c
WalkTask	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^class WalkTask(NoRewardTask):$/;"	c
WeierstrassFunction	pybrain/rl/environments/functions/multimodal.py	/^class WeierstrassFunction(MultiModalFunction):$/;"	c
WeierstrassFunction	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^class WeierstrassFunction(MultiModalFunction):$/;"	c
WeightGuessing	pybrain/optimization/randomsearch.py	/^class WeightGuessing(RandomSearch):$/;"	c
WeightGuessing	tools/pybrain/pybrain/optimization/randomsearch.py	/^class WeightGuessing(RandomSearch):$/;"	c
WeightMaskGuessing	pybrain/optimization/randomsearch.py	/^class WeightMaskGuessing(WeightGuessing, TopologyOptimizer):$/;"	c
WeightMaskGuessing	tools/pybrain/pybrain/optimization/randomsearch.py	/^class WeightMaskGuessing(WeightGuessing, TopologyOptimizer):$/;"	c
WriteTrace	util.py	/^def WriteTrace(trace, fname):$/;"	f
XMLBuildable	pybrain/utilities.py	/^class XMLBuildable(object):$/;"	c
XMLBuildable	tools/pybrain/pybrain/utilities.py	/^class XMLBuildable(object):$/;"	c
XMLHandling	pybrain/tools/customxml/handling.py	/^class XMLHandling:$/;"	c
XMLHandling	tools/pybrain/pybrain/tools/customxml/handling.py	/^class XMLHandling:$/;"	c
XMLstruct	pybrain/rl/environments/ode/tools/xmltools.py	/^class XMLstruct:$/;"	c
XMLstruct	tools/pybrain/pybrain/rl/environments/ode/tools/xmltools.py	/^class XMLstruct:$/;"	c
XNES	pybrain/optimization/distributionbased/xnes.py	/^class XNES(DistributionBasedOptimizer):$/;"	c
XNES	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^class XNES(DistributionBasedOptimizer):$/;"	c
XODEJohnnie	pybrain/rl/environments/ode/tools/xodetools.py	/^class XODEJohnnie(XODEfile):$/;"	c
XODEJohnnie	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^class XODEJohnnie(XODEfile):$/;"	c
XODELSRGlas	pybrain/rl/environments/ode/tools/xodetools.py	/^class XODELSRGlas(XODELSRTable): #XODESLR$/;"	c
XODELSRGlas	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^class XODELSRGlas(XODELSRTable): #XODESLR$/;"	c
XODELSRPlate	pybrain/rl/environments/ode/tools/xodetools.py	/^class XODELSRPlate(XODELSRTable): #XODESLR$/;"	c
XODELSRPlate	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^class XODELSRPlate(XODELSRTable): #XODESLR$/;"	c
XODELSRTable	pybrain/rl/environments/ode/tools/xodetools.py	/^class XODELSRTable(XODESLR): #XODESLR$/;"	c
XODELSRTable	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^class XODELSRTable(XODESLR): #XODESLR$/;"	c
XODESLR	pybrain/rl/environments/ode/tools/xodetools.py	/^class XODESLR(XODEfile):$/;"	c
XODESLR	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^class XODESLR(XODEfile):$/;"	c
XODEfile	pybrain/rl/environments/ode/tools/xodetools.py	/^class XODEfile(XMLstruct):$/;"	c
XODEfile	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^class XODEfile(XMLstruct):$/;"	c
XODEfinger	pybrain/rl/environments/ode/tools/xodetools.py	/^class XODEfinger(XODEfile):$/;"	c
XODEfinger	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^class XODEfinger(XODEfile):$/;"	c
XODEhand	pybrain/rl/environments/ode/tools/xodetools.py	/^class XODEhand(XODEfile):$/;"	c
XODEhand	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^class XODEhand(XODEfile):$/;"	c
XODEhandflip	pybrain/rl/environments/ode/tools/xodetools.py	/^class XODEhandflip(XODEfile):$/;"	c
XODEhandflip	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^class XODEhandflip(XODEfile):$/;"	c
XORChainTask	pybrain/rl/environments/classic/xor.py	/^class XORChainTask(XORTask):$/;"	c
XORChainTask	tools/pybrain/pybrain/rl/environments/classic/xor.py	/^class XORChainTask(XORTask):$/;"	c
XORDataSet	tools/pybrain/examples/supervised/backprop/datasets/xor.py	/^class XORDataSet(SupervisedDataSet):$/;"	c
XORTask	pybrain/rl/environments/classic/xor.py	/^class XORTask(EpisodicTask):$/;"	c
XORTask	tools/pybrain/pybrain/rl/environments/classic/xor.py	/^class XORTask(EpisodicTask):$/;"	c
Z	tools/pybrain/examples/supervised/neuralnets+svm/example_svm.py	/^Z = p.array([z.values()[0] for z in Z]).reshape(X.shape)$/;"	v
Z	tools/pybrain/examples/supervised/neuralnets+svm/example_svm.py	/^Z = svm.activateOnDataset(griddat, values=True)$/;"	v
_A1	pybrain/rl/environments/functions/multiobjective.py	/^    _A1 = 0.5 * sin(1) - 2*cos(1) + sin(2) -1.5*cos(2)$/;"	v	class:PolBenchmark
_A1	tools/pybrain/pybrain/rl/environments/functions/multiobjective.py	/^    _A1 = 0.5 * sin(1) - 2*cos(1) + sin(2) -1.5*cos(2)$/;"	v	class:PolBenchmark
_A2	pybrain/rl/environments/functions/multiobjective.py	/^    _A2 = 1.5 * sin(1) - cos(1) + 2*sin(2) -0.5*cos(2)$/;"	v	class:PolBenchmark
_A2	tools/pybrain/pybrain/rl/environments/functions/multiobjective.py	/^    _A2 = 1.5 * sin(1) - cos(1) + 2*sin(2) -0.5*cos(2)$/;"	v	class:PolBenchmark
_AccumulatingMdrnn	pybrain/structure/networks/mdrnn.py	/^class _AccumulatingMdrnn(_Mdrnn):$/;"	c
_AccumulatingMdrnn	tools/pybrain/pybrain/structure/networks/mdrnn.py	/^class _AccumulatingMdrnn(_Mdrnn):$/;"	c
_FeedForwardNetwork	pybrain/structure/networks/mdrnn.py	/^    _FeedForwardNetwork = object$/;"	v
_FeedForwardNetwork	tools/pybrain/pybrain/structure/networks/mdrnn.py	/^    _FeedForwardNetwork = object$/;"	v
_GetAllowNSTP	task/RobotMotionTask.py	/^    def _GetAllowNSTP(self, state):$/;"	m	class:RobotMotionTask
_GetMultiStepNS	environments/TrapMaze.py	/^    def _GetMultiStepNS(self, x, k):$/;"	m	class:TrapMaze
_GetNS	environments/TrapMaze.py	/^    def _GetNS(self, x):$/;"	m	class:TrapMaze
_GetNSS	task/RobotMotionTask.py	/^    def _GetNSS(self, allowns, senRange):$/;"	m	class:RobotMotionTask
_Mdrnn	pybrain/structure/networks/mdrnn.py	/^class _Mdrnn(_FeedForwardNetwork):$/;"	c
_Mdrnn	tools/pybrain/pybrain/structure/networks/mdrnn.py	/^class _Mdrnn(_FeedForwardNetwork):$/;"	c
_MultiDirectionalMdrnn	pybrain/structure/networks/mdrnn.py	/^class _MultiDirectionalMdrnn(_Mdrnn):$/;"	c
_MultiDirectionalMdrnn	tools/pybrain/pybrain/structure/networks/mdrnn.py	/^class _MultiDirectionalMdrnn(_Mdrnn):$/;"	c
__GetCoeff	ReachProbCalculator.py	/^    def __GetCoeff(self, theta):$/;"	m	class:ReachProbCalculator	file:
__GetStateIdx	ReachProbCalculator.py	/^    def __GetStateIdx(self, state):$/;"	m	class:ReachProbCalculator	file:
__IsGoal	ReachProbCalculator.py	/^    def __IsGoal(self, state):$/;"	m	class:ReachProbCalculator	file:
__IsSafe	ReachProbCalculator.py	/^    def __IsSafe(self, state):$/;"	m	class:ReachProbCalculator	file:
__add__	pybrain/datasets/classification.py	/^    def __add__(self, other):$/;"	m	class:ClassificationDataSet	file:
__add__	pybrain/datasets/classification.py	/^    def __add__(self, other):$/;"	m	class:SequenceClassificationDataSet	file:
__add__	tools/pybrain/pybrain/datasets/classification.py	/^    def __add__(self, other):$/;"	m	class:ClassificationDataSet	file:
__add__	tools/pybrain/pybrain/datasets/classification.py	/^    def __add__(self, other):$/;"	m	class:SequenceClassificationDataSet	file:
__author__	agents/ExplorerLearningAgent.py	/^__author__ = 'Jing Conan Wang, wangjing@bu.edu'$/;"	v
__author__	agents/LSTDACAgent.py	/^__author__ = 'Jing Conan Wang, wangjing@bu.edu'$/;"	v
__author__	examples/ENAC.py	/^__author__ = 'Jing Conan Wang, Boston University, wangjing@bu.edu'$/;"	v
__author__	examples/ENAC_TL.py	/^__author__ = 'Jing Conan Wang, Boston University, wangjing@bu.edu'$/;"	v
__author__	examples/LSTDAC.py	/^__author__ = 'Jing Conan Wang, Boston University, wangjing@bu.edu'$/;"	v
__author__	examples/QLambda_LinFA.py	/^__author__ = 'Jing Conan Wang, Boston University, wangjing@bu.edu'$/;"	v
__author__	examples/Q_LinFA.py	/^__author__ = 'Jing Conan Wang, Boston University, wangjing@bu.edu'$/;"	v
__author__	examples/SARSA_TL.py	/^__author__ = 'Jing Conan Wang, Boston University, wangjing@bu.edu'$/;"	v
__author__	learners/ENACLearner.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	learners/LSTDACLearner.py	/^__author__ = 'Jing Conan Wang, Boston University, wangjing@bu.edu'$/;"	v
__author__	learners/TDLearner.py	/^__author__ = 'Jing Conan Wang, Boston University, wangjing@bu.edu'$/;"	v
__author__	main.py	/^__author__ = 'Jing Conan Wang, Boston University, wangjing@bu.edu'$/;"	v
__author__	pybrain/auxiliary/gaussprocess.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de; Christian Osendorfer, osendorf@in.tum.de'$/;"	v
__author__	pybrain/auxiliary/gradientdescent.py	/^__author__ = ('Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/auxiliary/importancemixing.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/auxiliary/kmeans.py	/^__author__ = "Thomas Rueckstiess, ruecksti@in.tum.de"$/;"	v
__author__	pybrain/auxiliary/pca.py	/^__author__ = 'Justin S Bayer, bayerj@in.tum.de'$/;"	v
__author__	pybrain/datasets/classification.py	/^__author__ = "Martin Felder, felder@in.tum.de"$/;"	v
__author__	pybrain/datasets/dataset.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/datasets/importance.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/datasets/reinforcement.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/datasets/sequential.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/datasets/supervised.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/datasets/unsupervised.py	/^__author__ = 'Justin S Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	pybrain/optimization/distributionbased/cmaes.py	/^__author__ = 'Tom Schaul, tom@idsia.ch; Sun Yi, yi@idsia.ch'$/;"	v
__author__	pybrain/optimization/distributionbased/distributionbased.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/optimization/distributionbased/fem.py	/^__author__ = 'Daan Wierstra and Tom Schaul'$/;"	v
__author__	pybrain/optimization/distributionbased/nes.py	/^__author__ = 'Daan Wierstra, Tom Schaul and Sun Yi'$/;"	v
__author__	pybrain/optimization/distributionbased/rank1.py	/^__author__ = 'Tom Schaul, Tobias Glasmachers'$/;"	v
__author__	pybrain/optimization/distributionbased/snes.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/optimization/distributionbased/ves.py	/^__author__ = 'Daan Wierstra and Tom Schaul'$/;"	v
__author__	pybrain/optimization/distributionbased/xnes.py	/^__author__ = 'Tom Schaul, Sun Yi, Tobias Glasmachers'$/;"	v
__author__	pybrain/optimization/finitedifference/fd.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de, Tom Schaul'$/;"	v
__author__	pybrain/optimization/finitedifference/pgpe.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de, Tom Schaul'$/;"	v
__author__	pybrain/optimization/finitedifference/spsa.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de, Tom Schaul'$/;"	v
__author__	pybrain/optimization/hillclimber.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/optimization/memetic/innerinversememetic.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/optimization/memetic/innermemetic.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/optimization/memetic/inversememetic.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/optimization/memetic/memetic.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/optimization/neldermead.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/optimization/optimizer.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/optimization/populationbased/coevolution/coevolution.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/optimization/populationbased/coevolution/competitivecoevolution.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/optimization/populationbased/coevolution/multipopulationcoevolution.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/optimization/populationbased/es.py	/^__author__ = 'Julian Togelius and Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/optimization/populationbased/evolution.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/optimization/populationbased/ga.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/optimization/populationbased/multiobjective/nsga2.py	/^__author__ = 'Justin Bayer, Tom Schaul, {justin,tom}@idsia.ch'$/;"	v
__author__	pybrain/optimization/populationbased/pso.py	/^__author__ = ('Julian Togelius, julian@idsia.ch',$/;"	v
__author__	pybrain/optimization/randomsearch.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/agents/agent.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/agents/learning.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/agents/linearfa.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/agents/logging.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/agents/optimization.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/cartpole/balancetask.py	/^__author__ = 'Thomas Rueckstiess and Tom Schaul'$/;"	v
__author__	pybrain/rl/environments/cartpole/cartpole.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/cartpole/doublepole.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/cartpole/fast_version/cartpolecompile.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/cartpole/nonmarkovdoublepole.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/cartpole/nonmarkovpole.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/cartpole/renderer.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/classic/acrobot.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/classic/mountaincar.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/classic/xor.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/environment.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/episodic.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/fitnessevaluator.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/flexcube/environment.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/flexcube/masspoint.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/flexcube/objects3d.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/flexcube/sensors.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/flexcube/tasks.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/flexcube/viewer.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/functions/bbob2010.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/functions/function.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/functions/lennardjones.py	/^__author__ = 'Tom Schaul, tom@idsia.ch, and Daan Wierstra'$/;"	v
__author__	pybrain/rl/environments/functions/multimodal.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/functions/multiobjective.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/functions/transformations.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/functions/unbounded.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/functions/unimodal.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/graphical.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/mazes/maze.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/mazes/polarmaze.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/mazes/tasks/cheesemaze.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/mazes/tasks/maze.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/mazes/tasks/maze4x3.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/mazes/tasks/maze89state.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/mazes/tasks/mdp.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/mazes/tasks/pomdp.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/mazes/tasks/shuttle.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/mazes/tasks/tiger.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/mazes/tasks/tmaze.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/ode/actuators.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/ode/environment.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/ode/instances/acrobot.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/ode/instances/ccrl.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/ode/instances/johnnie.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/ode/sensors.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/ode/tasks/acrobot.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/ode/tasks/ccrl.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/ode/tasks/johnnie.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/ode/tools/configgrab.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/ode/tools/xmltools.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/ode/tools/xodetools.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/ode/viewer.py	/^__author__ = 'Martin Felder, felder@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/renderer.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/serverinterface.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/shipsteer/northwardtask.py	/^__author__ = 'Martin Felder, felder@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/shipsteer/shipsteer.py	/^__author__ = 'Martin Felder, felder@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/shipsteer/viewer.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/simple/environment.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/simple/renderer.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/simple/tasks.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/environments/simplerace/simplecontroller.py	/^__author__ = 'Julian Togelius, julian@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/simplerace/simpleracetask.py	/^__author__ = 'Julian Togelius, julian@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/simplerace/simpleracetcp.py	/^__author__ = 'Julian Togelius, julian@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/task.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/twoplayergames/capturegame.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/twoplayergames/capturegameplayers/captureplayer.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/twoplayergames/capturegameplayers/clientwrapper.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/twoplayergames/capturegameplayers/killing.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/twoplayergames/capturegameplayers/moduledecision.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/twoplayergames/capturegameplayers/nonsuicide.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/twoplayergames/capturegameplayers/randomplayer.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/twoplayergames/gomoku.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/twoplayergames/gomokuplayers/gomokuplayer.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/twoplayergames/gomokuplayers/killing.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/twoplayergames/gomokuplayers/moduledecision.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/twoplayergames/gomokuplayers/randomplayer.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/twoplayergames/pente.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/twoplayergames/tasks/pentetask.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/environments/twoplayergames/twoplayergame.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/experiments/continuous.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/experiments/episodic.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/experiments/experiment.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/experiments/queued.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/experiments/tournament.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/explorers/continuous/normal.py	/^__author__ = "Thomas Rueckstiess, ruecksti@in.tum.de"$/;"	v
__author__	pybrain/rl/explorers/continuous/sde.py	/^__author__ = "Thomas Rueckstiess, ruecksti@in.tum.de"$/;"	v
__author__	pybrain/rl/explorers/discrete/boltzmann.py	/^__author__ = "Thomas Rueckstiess, ruecksti@in.tum.de"$/;"	v
__author__	pybrain/rl/explorers/discrete/discrete.py	/^__author__ = "Thomas Rueckstiess, ruecksti@in.tum.de"$/;"	v
__author__	pybrain/rl/explorers/discrete/discretesde.py	/^__author__ = "Thomas Rueckstiess, ruecksti@in.tum.de"$/;"	v
__author__	pybrain/rl/explorers/discrete/egreedy.py	/^__author__ = "Thomas Rueckstiess, ruecksti@in.tum.de"$/;"	v
__author__	pybrain/rl/explorers/explorer.py	/^__author__ = "Thomas Rueckstiess, ruecksti@in.tum.de"$/;"	v
__author__	pybrain/rl/learners/directsearch/directsearch.py	/^__author__ = 'Tom Schaul and Thomas Rueckstiess, tom@idsia.ch, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/learners/directsearch/enac.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/learners/directsearch/gpomdp.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/learners/directsearch/policygradient.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/learners/directsearch/reinforce.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/learners/directsearch/rwr.py	/^__author__ = 'Tom Schaul, tom@idsia.ch and Daan Wiertra, daan@idsia.ch'$/;"	v
__author__	pybrain/rl/learners/learner.py	/^__author__ = 'Tom Schaul, tom@idsia.ch, Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/learners/meta/levinsearch.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/learners/meta/meta.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/learners/valuebased/interface.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/learners/valuebased/linearfa.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/rl/learners/valuebased/q.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/learners/valuebased/qlambda.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/learners/valuebased/sarsa.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/rl/learners/valuebased/valuebased.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/structure/connections/connection.py	/^__author__ = 'Daan Wierstra and Tom Schaul'$/;"	v
__author__	pybrain/structure/connections/full.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/structure/connections/fullnotself.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/structure/connections/identity.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/structure/connections/linear.py	/^__author__ = 'Justin S Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	pybrain/structure/connections/permutation.py	/^__author__ = 'Justin Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	pybrain/structure/connections/shared.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/structure/connections/subsampling.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/structure/evolvables/cheaplycopiable.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/structure/evolvables/evolvable.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/structure/evolvables/maskedmodule.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/structure/evolvables/maskedparameters.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/structure/evolvables/topology.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/structure/modulemesh.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/structure/modules/biasunit.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/structure/modules/evolinonetwork.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	pybrain/structure/modules/gate.py	/^__author__ = 'Justin S Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	pybrain/structure/modules/gaussianlayer.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/structure/modules/kohonen.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/structure/modules/linearlayer.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/structure/modules/lstm.py	/^__author__ = 'Daan Wierstra and Tom Schaul'$/;"	v
__author__	pybrain/structure/modules/mdlstm.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/structure/modules/mdrnnlayer.py	/^__author__ = 'Justin S Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	pybrain/structure/modules/module.py	/^__author__ = 'Daan Wierstra and Tom Schaul'$/;"	v
__author__	pybrain/structure/modules/neuronlayer.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/structure/modules/samplelayer.py	/^__author__ = ('Christian Osendorfer, osendorf@in.tum.de; '$/;"	v
__author__	pybrain/structure/modules/sigmoidlayer.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/structure/modules/softmax.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/structure/modules/softsign.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/structure/modules/statedependentlayer.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/structure/modules/svmunit.py	/^__author__ = "Martin Felder"$/;"	v
__author__	pybrain/structure/modules/table.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	pybrain/structure/modules/tanhlayer.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/structure/moduleslice.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/structure/networks/bidirectional.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/structure/networks/borderswiping.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/structure/networks/convolutional.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/structure/networks/custom/capturegame.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/structure/networks/custom/convboard.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/structure/networks/feedforward.py	/^__author__ = 'Justin Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	pybrain/structure/networks/mdrnn.py	/^__author__ = 'Justin S Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	pybrain/structure/networks/multidimensional.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/structure/networks/network.py	/^__author__ = 'Daan Wierstra and Tom Schaul'$/;"	v
__author__	pybrain/structure/networks/neurondecomposable.py	/^__author__ = 'Daan Wierstra and Tom Schaul'$/;"	v
__author__	pybrain/structure/networks/rbm.py	/^__author__ = 'Justin S Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	pybrain/structure/networks/recurrent.py	/^__author__ = 'Justin Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	pybrain/structure/networks/swiping.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/structure/parametercontainer.py	/^__author__ = 'Daan Wierstra and Tom Schaul'$/;"	v
__author__	pybrain/supervised/evolino/filter.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	pybrain/supervised/evolino/gfilter.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	pybrain/supervised/evolino/gindividual.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	pybrain/supervised/evolino/gpopulation.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	pybrain/supervised/evolino/individual.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	pybrain/supervised/evolino/networkwrapper.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	pybrain/supervised/evolino/population.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	pybrain/supervised/evolino/variate.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	pybrain/supervised/knn/lsh/minhash.py	/^__author__ = 'Justin Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	pybrain/supervised/knn/lsh/nearoptimal.py	/^__author__ = 'Justin Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	pybrain/supervised/trainers/backprop.py	/^__author__ = 'Daan Wierstra and Tom Schaul'$/;"	v
__author__	pybrain/supervised/trainers/evolino.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	pybrain/supervised/trainers/rprop.py	/^__author__ = 'Martin Felder'$/;"	v
__author__	pybrain/supervised/trainers/svmtrainer.py	/^__author__ = "Martin Felder, felder@in.tum.de"$/;"	v
__author__	pybrain/supervised/trainers/trainer.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/auxiliary.py	/^__author__ = 'Justin Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	pybrain/tests/helpers.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/optimizationtest.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/runtests.py	/^__author__ = 'Justin Bayer, bayerj@in.tum.de'$/;"	v
__author__	pybrain/tests/testsuites.py	/^__author__ = 'Justin Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	pybrain/tests/unittests/_test_equivalence_to_ctypes.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/auxiliary/test_pca.py	/^__author__ = 'Justin Bayer, bayerj@in.tum.de'$/;"	v
__author__	pybrain/tests/unittests/datasets/test_datasets_datasets.py	/^__author__ = 'Justin Bayer, bayerj@in.tum.de'$/;"	v
__author__	pybrain/tests/unittests/optimization/populationbased/test_pso_ring.py	/^__author__ = ('Justin Bayer, bayer.justin@googlemail.com;'$/;"	v
__author__	pybrain/tests/unittests/rl/environments/twoplayergames/test_capture_game.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/rl/environments/twoplayergames/test_pente.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/structure/connections/test_shared_connections.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/structure/connections/test_sliced_connections.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/structure/connections/test_subsampling_connection.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/structure/modules/test_peephole_lstm.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/structure/modules/test_peephole_mdlstm.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/structure/modules/test_samplelayer.py	/^__author__ = 'Justin Bayer, bayerj@in.tum.de'$/;"	v
__author__	pybrain/tests/unittests/structure/modules/test_simple_lstm_network.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/structure/modules/test_simple_mdlstm.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/structure/networks/_test_rbm.py	/^__author__ = 'Justin S Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	pybrain/tests/unittests/structure/networks/custom/test_capturegame_network.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/structure/networks/custom/test_convolutional_nets.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/structure/networks/test_bidirectional_network.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/structure/networks/test_borderswipingnetwork.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/structure/networks/test_cyclic_network.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/structure/networks/test_nested_ffn_and_rnn.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/structure/networks/test_nested_network.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/structure/networks/test_network_decomposition.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/structure/networks/test_network_forward_backward.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/structure/networks/test_network_sort.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/structure/networks/test_recurrent_network.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/structure/networks/test_swiping_network.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/supervised/trainers/test_evolino.py	/^__author__ = 'Michael Isik, isikmichael@gmx.net'$/;"	v
__author__	pybrain/tests/unittests/supervised/trainers/test_rprop.py	/^__author__ = 'Martin Felder, felder@in.tum.de'$/;"	v
__author__	pybrain/tests/unittests/test_utilities_dictionaries.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/test_utilities_flood.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/test_utilities_foundafter.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/test_utilities_reachable.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/tools/test_ibp_leftordered.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tests/unittests/tools/test_rlgluebridge.py	/^__author__ = 'Justin Bayer, bayerj@in.tum.de'$/;"	v
__author__	pybrain/tools/aptativeresampling.py	/^__author__ = "Tom Schaul, tom@idsia.ch"$/;"	v
__author__	pybrain/tools/benchmark.py	/^__author__ = 'Justin Bayer, bayerj@in.tum.de'$/;"	v
__author__	pybrain/tools/customxml/handling.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tools/customxml/networkreader.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tools/customxml/networkwriter.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tools/datasettools.py	/^__author__ = "Martin Felder"$/;"	v
__author__	pybrain/tools/filehandling.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tools/fisher.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tools/functions.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tools/gridsearch.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	pybrain/tools/ibp.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tools/kwargsprocessor.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	pybrain/tools/mixtures/mixtureofgaussian.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	pybrain/tools/mixtures/mogpuremax.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	pybrain/tools/networking/udpconnection.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	pybrain/tools/neuralnets.py	/^__author__ = "Martin Felder"$/;"	v
__author__	pybrain/tools/nondominated.py	/^__author__ = 'Justin Bayer, Tom Schaul, {justin,tom}@idsia.ch'$/;"	v
__author__	pybrain/tools/plotting/ciaoplot.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tools/plotting/colormaps.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tools/plotting/fitnesslandscapes.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tools/plotting/fitnessprogression.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tools/plotting/multiline.py	/^__author__ = 'Martin Felder and Frank Sehnke'$/;"	v
__author__	pybrain/tools/plotting/quickvariations.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	pybrain/tools/rankingfunctions.py	/^__author__ = 'Daan Wierstra and Tom Schaul'$/;"	v
__author__	pybrain/tools/rlgluebridge.py	/^__author__ = 'Justin Bayer, bayerj@in.tum.de'$/;"	v
__author__	pybrain/tools/shortcuts.py	/^__author__ = 'Tom Schaul and Thomas Rueckstiess'$/;"	v
__author__	pybrain/tools/svmdata.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	pybrain/tools/validation.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	pybrain/unsupervised/trainers/deepbelief.py	/^__author__ = 'Justin S Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	pybrain/unsupervised/trainers/rbm.py	/^__author__ = ('Christian Osendorfer, osendorf@in.tum.de;'$/;"	v
__author__	pybrain/utilities.py	/^__author__ = 'Tom Schaul, tom@idsia.ch; Justin Bayer, bayerj@in.tum.de'$/;"	v
__author__	tools/pybrain/docs/code2tut.py	/^__author__ = "Martin Felder, felder@in.tum.de"$/;"	v
__author__	tools/pybrain/docs/sphinx/autodoc_hack.py	/^__author__ = "Martin Felder"$/;"	v
__author__	tools/pybrain/docs/tutorials/blackboxoptimization.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/docs/tutorials/networks.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/docs/tutorials/rl.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/examples/optimization/benchmarkplots.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/examples/optimization/multiobjective/nsga2.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/examples/optimization/optimizerinterface.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/examples/optimization/optimizers_for_rl.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/examples/rl/environments/capturegame/evolvingplayer.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/examples/rl/environments/capturegame/minitournament.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/examples/rl/environments/capturegame/pente.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/examples/rl/environments/cartpole/cart_all.py	/^__author__ = "Thomas Rueckstiess, Frank Sehnke"$/;"	v
__author__	tools/pybrain/examples/rl/environments/cartpole/cart_cma.py	/^__author__ = "Thomas Rueckstiess, Frank Sehnke"$/;"	v
__author__	tools/pybrain/examples/rl/environments/cartpole/cart_enac.py	/^__author__ = "Thomas Rueckstiess, Frank Sehnke"$/;"	v
__author__	tools/pybrain/examples/rl/environments/cartpole/cart_fem.py	/^__author__ = "Thomas Rueckstiess, Frank Sehnke"$/;"	v
__author__	tools/pybrain/examples/rl/environments/cartpole/cart_nes.py	/^__author__ = "Thomas Rueckstiess, Frank Sehnke"$/;"	v
__author__	tools/pybrain/examples/rl/environments/cartpole/cart_pgpe.py	/^__author__ = "Thomas Rueckstiess, Frank Sehnke"$/;"	v
__author__	tools/pybrain/examples/rl/environments/cartpole/cart_reinf.py	/^__author__ = "Thomas Rueckstiess, Frank Sehnke"$/;"	v
__author__	tools/pybrain/examples/rl/environments/cartpole/play_cartpole.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/examples/rl/environments/flexcube/flexcube_pgpe.py	/^__author__ = "Frank Sehnke"$/;"	v
__author__	tools/pybrain/examples/rl/environments/flexcube/flexcube_spsa.py	/^__author__ = "Frank Sehnke"$/;"	v
__author__	tools/pybrain/examples/rl/environments/linear_fa/xor.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/examples/rl/environments/maze/td.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/examples/rl/environments/ode/acrobot_fd.py	/^__author__ = "Thomas Rueckstiess, Frank Sehnke"$/;"	v
__author__	tools/pybrain/examples/rl/environments/ode/acrobot_pgpe.py	/^__author__ = "Frank Sehnke"$/;"	v
__author__	tools/pybrain/examples/rl/environments/ode/ccrl_glass_pgpe.py	/^__author__ = "Frank Sehnke"$/;"	v
__author__	tools/pybrain/examples/rl/environments/ode/ccrl_plate_pgpe.py	/^__author__ = "Frank Sehnke"$/;"	v
__author__	tools/pybrain/examples/rl/environments/ode/johnnie_pgpe.py	/^__author__ = "Frank Sehnke"$/;"	v
__author__	tools/pybrain/examples/rl/environments/ode/johnnie_reinforce.py	/^__author__ = "Frank Sehnke"$/;"	v
__author__	tools/pybrain/examples/rl/environments/shipsteer/shipbench_pgpe.py	/^__author__ = "Martin Felder, Frank Sehnke"$/;"	v
__author__	tools/pybrain/examples/rl/environments/shipsteer/shipbench_sde.py	/^__author__ = "Martin Felder, Thomas Rueckstiess"$/;"	v
__author__	tools/pybrain/examples/rl/valuebased/nfq.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/examples/rl/valuebased/td.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/examples/supervised/backprop/backpropanbncn.py	/^__author__ = 'Tom Schaul, tom@idsia.ch and Daan Wierstra'$/;"	v
__author__	tools/pybrain/examples/supervised/backprop/backpropxor.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/examples/supervised/backprop/datasets/anbncn.py	/^__author__ = 'Tom Schaul, tom@idsia.ch and Daan Wierstra'$/;"	v
__author__	tools/pybrain/examples/supervised/backprop/datasets/parity.py	/^__author__ = 'Tom Schaul (tom@idsia.ch)'$/;"	v
__author__	tools/pybrain/examples/supervised/backprop/datasets/xor.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/examples/supervised/backprop/parityrnn.py	/^__author__ = 'Tom Schaul (tom@idsia.ch)'$/;"	v
__author__	tools/pybrain/examples/supervised/evolino/lib/data_generator.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	tools/pybrain/examples/supervised/neuralnets+svm/datasets/datagenerator.py	/^__author__ = "Martin Felder"$/;"	v
__author__	tools/pybrain/examples/supervised/neuralnets+svm/example_fnn.py	/^__author__ = "Martin Felder"$/;"	v
__author__	tools/pybrain/examples/supervised/neuralnets+svm/example_rnn.py	/^__author__ = "Martin Felder"$/;"	v
__author__	tools/pybrain/examples/supervised/neuralnets+svm/example_svm.py	/^__author__ = "Martin Felder"$/;"	v
__author__	tools/pybrain/examples/unsupervised/gp.py	/^__author__ = "Thomas Rueckstiess, ruecksti@in.tum.de"$/;"	v
__author__	tools/pybrain/examples/unsupervised/kohonen.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/examples/unsupervised/lsh.py	/^__author__ = 'Justin Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	tools/pybrain/examples/unsupervised/rbm.py	/^__author__ = 'Justin S Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	tools/pybrain/pybrain/auxiliary/gaussprocess.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de; Christian Osendorfer, osendorf@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/auxiliary/gradientdescent.py	/^__author__ = ('Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/auxiliary/importancemixing.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/auxiliary/kmeans.py	/^__author__ = "Thomas Rueckstiess, ruecksti@in.tum.de"$/;"	v
__author__	tools/pybrain/pybrain/auxiliary/pca.py	/^__author__ = 'Justin S Bayer, bayerj@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/datasets/classification.py	/^__author__ = "Martin Felder, felder@in.tum.de"$/;"	v
__author__	tools/pybrain/pybrain/datasets/dataset.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/datasets/importance.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/datasets/reinforcement.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/datasets/sequential.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/datasets/supervised.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/datasets/unsupervised.py	/^__author__ = 'Justin S Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	tools/pybrain/pybrain/optimization/distributionbased/cmaes.py	/^__author__ = 'Tom Schaul, tom@idsia.ch; Sun Yi, yi@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/optimization/distributionbased/distributionbased.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^__author__ = 'Daan Wierstra and Tom Schaul'$/;"	v
__author__	tools/pybrain/pybrain/optimization/distributionbased/nes.py	/^__author__ = 'Daan Wierstra, Tom Schaul and Sun Yi'$/;"	v
__author__	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^__author__ = 'Tom Schaul, Tobias Glasmachers'$/;"	v
__author__	tools/pybrain/pybrain/optimization/distributionbased/snes.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^__author__ = 'Daan Wierstra and Tom Schaul'$/;"	v
__author__	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^__author__ = 'Tom Schaul, Sun Yi, Tobias Glasmachers'$/;"	v
__author__	tools/pybrain/pybrain/optimization/finitedifference/fd.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de, Tom Schaul'$/;"	v
__author__	tools/pybrain/pybrain/optimization/finitedifference/pgpe.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de, Tom Schaul'$/;"	v
__author__	tools/pybrain/pybrain/optimization/finitedifference/spsa.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de, Tom Schaul'$/;"	v
__author__	tools/pybrain/pybrain/optimization/hillclimber.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/optimization/memetic/innerinversememetic.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/optimization/memetic/innermemetic.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/optimization/memetic/inversememetic.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/optimization/memetic/memetic.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/optimization/neldermead.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/optimization/optimizer.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/optimization/populationbased/coevolution/competitivecoevolution.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/optimization/populationbased/coevolution/multipopulationcoevolution.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/optimization/populationbased/es.py	/^__author__ = 'Julian Togelius and Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/optimization/populationbased/evolution.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/optimization/populationbased/ga.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/optimization/populationbased/multiobjective/nsga2.py	/^__author__ = 'Justin Bayer, Tom Schaul, {justin,tom}@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/optimization/populationbased/pso.py	/^__author__ = ('Julian Togelius, julian@idsia.ch',$/;"	v
__author__	tools/pybrain/pybrain/optimization/randomsearch.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/agents/agent.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/agents/learning.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/agents/linearfa.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/agents/logging.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/agents/optimization.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^__author__ = 'Thomas Rueckstiess and Tom Schaul'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/cartpole/cartpole.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/cartpole/doublepole.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpolecompile.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/cartpole/nonmarkovdoublepole.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/cartpole/nonmarkovpole.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/cartpole/renderer.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/classic/mountaincar.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/classic/xor.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/environment.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/episodic.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/fitnessevaluator.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/flexcube/environment.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/flexcube/masspoint.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/flexcube/objects3d.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/flexcube/sensors.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/flexcube/viewer.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/functions/function.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/functions/lennardjones.py	/^__author__ = 'Tom Schaul, tom@idsia.ch, and Daan Wierstra'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/functions/multiobjective.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/functions/transformations.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/functions/unbounded.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/graphical.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/mazes/maze.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/mazes/polarmaze.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/mazes/tasks/cheesemaze.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze4x3.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze89state.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/mazes/tasks/mdp.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/mazes/tasks/pomdp.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/mazes/tasks/shuttle.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/mazes/tasks/tiger.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/mazes/tasks/tmaze.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/ode/actuators.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/ode/instances/acrobot.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/ode/instances/ccrl.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/ode/instances/johnnie.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/ode/tasks/acrobot.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/ode/tasks/johnnie.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/ode/tools/configgrab.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/ode/tools/xmltools.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/ode/viewer.py	/^__author__ = 'Martin Felder, felder@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/renderer.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/serverinterface.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/shipsteer/northwardtask.py	/^__author__ = 'Martin Felder, felder@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/shipsteer/shipsteer.py	/^__author__ = 'Martin Felder, felder@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/shipsteer/viewer.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/simple/environment.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/simple/renderer.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/simple/tasks.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/simplerace/simplecontroller.py	/^__author__ = 'Julian Togelius, julian@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/simplerace/simpleracetask.py	/^__author__ = 'Julian Togelius, julian@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/simplerace/simpleracetcp.py	/^__author__ = 'Julian Togelius, julian@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/task.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/captureplayer.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/clientwrapper.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/killing.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/moduledecision.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/nonsuicide.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/randomplayer.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/twoplayergames/gomoku.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/twoplayergames/gomokuplayers/gomokuplayer.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/twoplayergames/gomokuplayers/killing.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/twoplayergames/gomokuplayers/moduledecision.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/twoplayergames/gomokuplayers/randomplayer.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/twoplayergames/pente.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/pentetask.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/environments/twoplayergames/twoplayergame.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/experiments/continuous.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/experiments/episodic.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/experiments/experiment.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/experiments/queued.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/experiments/tournament.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/explorers/continuous/normal.py	/^__author__ = "Thomas Rueckstiess, ruecksti@in.tum.de"$/;"	v
__author__	tools/pybrain/pybrain/rl/explorers/continuous/sde.py	/^__author__ = "Thomas Rueckstiess, ruecksti@in.tum.de"$/;"	v
__author__	tools/pybrain/pybrain/rl/explorers/discrete/boltzmann.py	/^__author__ = "Thomas Rueckstiess, ruecksti@in.tum.de"$/;"	v
__author__	tools/pybrain/pybrain/rl/explorers/discrete/discrete.py	/^__author__ = "Thomas Rueckstiess, ruecksti@in.tum.de"$/;"	v
__author__	tools/pybrain/pybrain/rl/explorers/discrete/discretesde.py	/^__author__ = "Thomas Rueckstiess, ruecksti@in.tum.de"$/;"	v
__author__	tools/pybrain/pybrain/rl/explorers/discrete/egreedy.py	/^__author__ = "Thomas Rueckstiess, ruecksti@in.tum.de"$/;"	v
__author__	tools/pybrain/pybrain/rl/explorers/explorer.py	/^__author__ = "Thomas Rueckstiess, ruecksti@in.tum.de"$/;"	v
__author__	tools/pybrain/pybrain/rl/learners/directsearch/directsearch.py	/^__author__ = 'Tom Schaul and Thomas Rueckstiess, tom@idsia.ch, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/learners/directsearch/enac.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/learners/directsearch/gpomdp.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/learners/directsearch/policygradient.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/learners/directsearch/reinforce.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/learners/directsearch/rwr.py	/^__author__ = 'Tom Schaul, tom@idsia.ch and Daan Wiertra, daan@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/learners/learner.py	/^__author__ = 'Tom Schaul, tom@idsia.ch, Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/learners/meta/levinsearch.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/learners/meta/meta.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/learners/valuebased/interface.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/rl/learners/valuebased/q.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/learners/valuebased/qlambda.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/learners/valuebased/sarsa.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/rl/learners/valuebased/valuebased.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/structure/connections/connection.py	/^__author__ = 'Daan Wierstra and Tom Schaul'$/;"	v
__author__	tools/pybrain/pybrain/structure/connections/full.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/structure/connections/fullnotself.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/structure/connections/identity.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/structure/connections/linear.py	/^__author__ = 'Justin S Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	tools/pybrain/pybrain/structure/connections/permutation.py	/^__author__ = 'Justin Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	tools/pybrain/pybrain/structure/connections/shared.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/structure/connections/subsampling.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/structure/evolvables/cheaplycopiable.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/structure/evolvables/evolvable.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/structure/evolvables/maskedmodule.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/structure/evolvables/maskedparameters.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/structure/evolvables/topology.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/structure/modulemesh.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/structure/modules/biasunit.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/structure/modules/evolinonetwork.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	tools/pybrain/pybrain/structure/modules/gate.py	/^__author__ = 'Justin S Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	tools/pybrain/pybrain/structure/modules/gaussianlayer.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/structure/modules/kohonen.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/structure/modules/linearlayer.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/structure/modules/lstm.py	/^__author__ = 'Daan Wierstra and Tom Schaul'$/;"	v
__author__	tools/pybrain/pybrain/structure/modules/mdlstm.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/structure/modules/mdrnnlayer.py	/^__author__ = 'Justin S Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	tools/pybrain/pybrain/structure/modules/module.py	/^__author__ = 'Daan Wierstra and Tom Schaul'$/;"	v
__author__	tools/pybrain/pybrain/structure/modules/neuronlayer.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/structure/modules/samplelayer.py	/^__author__ = ('Christian Osendorfer, osendorf@in.tum.de; '$/;"	v
__author__	tools/pybrain/pybrain/structure/modules/sigmoidlayer.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/structure/modules/softmax.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/structure/modules/softsign.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/structure/modules/statedependentlayer.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/structure/modules/svmunit.py	/^__author__ = "Martin Felder"$/;"	v
__author__	tools/pybrain/pybrain/structure/modules/table.py	/^__author__ = 'Thomas Rueckstiess, ruecksti@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/structure/modules/tanhlayer.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/structure/moduleslice.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/structure/networks/bidirectional.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/structure/networks/borderswiping.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/structure/networks/convolutional.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/structure/networks/custom/capturegame.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/structure/networks/custom/convboard.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/structure/networks/feedforward.py	/^__author__ = 'Justin Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	tools/pybrain/pybrain/structure/networks/mdrnn.py	/^__author__ = 'Justin S Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	tools/pybrain/pybrain/structure/networks/multidimensional.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/structure/networks/network.py	/^__author__ = 'Daan Wierstra and Tom Schaul'$/;"	v
__author__	tools/pybrain/pybrain/structure/networks/neurondecomposable.py	/^__author__ = 'Daan Wierstra and Tom Schaul'$/;"	v
__author__	tools/pybrain/pybrain/structure/networks/rbm.py	/^__author__ = 'Justin S Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	tools/pybrain/pybrain/structure/networks/recurrent.py	/^__author__ = 'Justin Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	tools/pybrain/pybrain/structure/networks/swiping.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/structure/parametercontainer.py	/^__author__ = 'Daan Wierstra and Tom Schaul'$/;"	v
__author__	tools/pybrain/pybrain/supervised/evolino/filter.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	tools/pybrain/pybrain/supervised/evolino/gfilter.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	tools/pybrain/pybrain/supervised/evolino/gindividual.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	tools/pybrain/pybrain/supervised/evolino/individual.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	tools/pybrain/pybrain/supervised/evolino/population.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	tools/pybrain/pybrain/supervised/evolino/variate.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	tools/pybrain/pybrain/supervised/knn/lsh/minhash.py	/^__author__ = 'Justin Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	tools/pybrain/pybrain/supervised/knn/lsh/nearoptimal.py	/^__author__ = 'Justin Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	tools/pybrain/pybrain/supervised/trainers/backprop.py	/^__author__ = 'Daan Wierstra and Tom Schaul'$/;"	v
__author__	tools/pybrain/pybrain/supervised/trainers/evolino.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	tools/pybrain/pybrain/supervised/trainers/rprop.py	/^__author__ = 'Martin Felder'$/;"	v
__author__	tools/pybrain/pybrain/supervised/trainers/svmtrainer.py	/^__author__ = "Martin Felder, felder@in.tum.de"$/;"	v
__author__	tools/pybrain/pybrain/supervised/trainers/trainer.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/auxiliary.py	/^__author__ = 'Justin Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	tools/pybrain/pybrain/tests/helpers.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/optimizationtest.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/runtests.py	/^__author__ = 'Justin Bayer, bayerj@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/tests/testsuites.py	/^__author__ = 'Justin Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/_test_equivalence_to_ctypes.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/auxiliary/test_pca.py	/^__author__ = 'Justin Bayer, bayerj@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/datasets/test_datasets_datasets.py	/^__author__ = 'Justin Bayer, bayerj@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/optimization/populationbased/test_pso_ring.py	/^__author__ = ('Justin Bayer, bayer.justin@googlemail.com;'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/rl/environments/twoplayergames/test_capture_game.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/rl/environments/twoplayergames/test_pente.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/structure/connections/test_shared_connections.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/structure/connections/test_sliced_connections.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/structure/connections/test_subsampling_connection.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/structure/modules/test_peephole_lstm.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/structure/modules/test_peephole_mdlstm.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/structure/modules/test_samplelayer.py	/^__author__ = 'Justin Bayer, bayerj@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/structure/modules/test_simple_lstm_network.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/structure/modules/test_simple_mdlstm.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/structure/networks/_test_rbm.py	/^__author__ = 'Justin S Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/structure/networks/custom/test_capturegame_network.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/structure/networks/custom/test_convolutional_nets.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/structure/networks/test_bidirectional_network.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/structure/networks/test_borderswipingnetwork.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/structure/networks/test_cyclic_network.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/structure/networks/test_nested_ffn_and_rnn.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/structure/networks/test_nested_network.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/structure/networks/test_network_decomposition.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/structure/networks/test_network_forward_backward.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/structure/networks/test_network_sort.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/structure/networks/test_recurrent_network.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/structure/networks/test_swiping_network.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/supervised/trainers/test_evolino.py	/^__author__ = 'Michael Isik, isikmichael@gmx.net'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/supervised/trainers/test_rprop.py	/^__author__ = 'Martin Felder, felder@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/test_utilities_dictionaries.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/test_utilities_flood.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/test_utilities_foundafter.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/test_utilities_reachable.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/tools/test_ibp_leftordered.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tests/unittests/tools/test_rlgluebridge.py	/^__author__ = 'Justin Bayer, bayerj@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/tools/aptativeresampling.py	/^__author__ = "Tom Schaul, tom@idsia.ch"$/;"	v
__author__	tools/pybrain/pybrain/tools/benchmark.py	/^__author__ = 'Justin Bayer, bayerj@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/tools/customxml/handling.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tools/customxml/networkreader.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tools/customxml/networkwriter.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tools/datasettools.py	/^__author__ = "Martin Felder"$/;"	v
__author__	tools/pybrain/pybrain/tools/filehandling.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tools/fisher.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tools/functions.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tools/gridsearch.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	tools/pybrain/pybrain/tools/ibp.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tools/kwargsprocessor.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	tools/pybrain/pybrain/tools/mixtures/mixtureofgaussian.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/tools/mixtures/mogpuremax.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/tools/networking/udpconnection.py	/^__author__ = 'Frank Sehnke, sehnke@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/tools/neuralnets.py	/^__author__ = "Martin Felder"$/;"	v
__author__	tools/pybrain/pybrain/tools/nondominated.py	/^__author__ = 'Justin Bayer, Tom Schaul, {justin,tom}@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tools/plotting/ciaoplot.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tools/plotting/colormaps.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tools/plotting/fitnesslandscapes.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tools/plotting/fitnessprogression.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tools/plotting/multiline.py	/^__author__ = 'Martin Felder and Frank Sehnke'$/;"	v
__author__	tools/pybrain/pybrain/tools/plotting/quickvariations.py	/^__author__ = 'Tom Schaul, tom@idsia.ch'$/;"	v
__author__	tools/pybrain/pybrain/tools/rankingfunctions.py	/^__author__ = 'Daan Wierstra and Tom Schaul'$/;"	v
__author__	tools/pybrain/pybrain/tools/rlgluebridge.py	/^__author__ = 'Justin Bayer, bayerj@in.tum.de'$/;"	v
__author__	tools/pybrain/pybrain/tools/shortcuts.py	/^__author__ = 'Tom Schaul and Thomas Rueckstiess'$/;"	v
__author__	tools/pybrain/pybrain/tools/svmdata.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	tools/pybrain/pybrain/tools/validation.py	/^__author__ = 'Michael Isik'$/;"	v
__author__	tools/pybrain/pybrain/unsupervised/trainers/deepbelief.py	/^__author__ = 'Justin S Bayer, bayer.justin@googlemail.com'$/;"	v
__author__	tools/pybrain/pybrain/unsupervised/trainers/rbm.py	/^__author__ = ('Christian Osendorfer, osendorf@in.tum.de;'$/;"	v
__author__	tools/pybrain/pybrain/utilities.py	/^__author__ = 'Tom Schaul, tom@idsia.ch; Justin Bayer, bayerj@in.tum.de'$/;"	v
__author__	tools/pybrain/setup.py	/^__author__ = 'Justin S Bayer, bayer.justin@googlemail.com'$/;"	v
__call__	pybrain/auxiliary/gradientdescent.py	/^    def __call__(self, gradient, error):$/;"	m	class:IRpropPlus	file:
__call__	pybrain/auxiliary/gradientdescent.py	/^    def __call__(self, gradient, error=None):$/;"	m	class:GradientDescent	file:
__call__	pybrain/auxiliary/gradientdescent.py	/^    def __call__(self, gradient, error=None):$/;"	m	class:NaturalGradient	file:
__call__	pybrain/rl/environments/fitnessevaluator.py	/^    def __call__(self, x):$/;"	m	class:FitnessEvaluator	file:
__call__	pybrain/rl/environments/functions/function.py	/^    def __call__(self, x):$/;"	m	class:FunctionEnvironment	file:
__call__	pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    def __call__(self, p1, p2):$/;"	m	class:RelativeGomokuTask	file:
__call__	pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    def __call__(self, p1, p2):$/;"	m	class:RelativeCaptureTask	file:
__call__	pybrain/tools/aptativeresampling.py	/^    def __call__(self, x):$/;"	m	class:AdaptiveResampler	file:
__call__	pybrain/tools/rankingfunctions.py	/^    def __call__(self, R):$/;"	m	class:BilinearRanking	file:
__call__	pybrain/tools/rankingfunctions.py	/^    def __call__(self, R):$/;"	m	class:ExponentialRanking	file:
__call__	pybrain/tools/rankingfunctions.py	/^    def __call__(self, R):$/;"	m	class:HansenRanking	file:
__call__	pybrain/tools/rankingfunctions.py	/^    def __call__(self, R):$/;"	m	class:RankingFunction	file:
__call__	pybrain/tools/rankingfunctions.py	/^    def __call__(self, R):$/;"	m	class:SmoothGiniRanking	file:
__call__	pybrain/tools/rankingfunctions.py	/^    def __call__(self, R):$/;"	m	class:TopLinearRanking	file:
__call__	pybrain/tools/rankingfunctions.py	/^    def __call__(self, R):$/;"	m	class:TopSelection	file:
__call__	pybrain/tools/rankingfunctions.py	/^    def __call__(self, R):$/;"	m	class:TournamentSelection	file:
__call__	tools/pybrain/pybrain/auxiliary/gradientdescent.py	/^    def __call__(self, gradient, error):$/;"	m	class:IRpropPlus	file:
__call__	tools/pybrain/pybrain/auxiliary/gradientdescent.py	/^    def __call__(self, gradient, error=None):$/;"	m	class:GradientDescent	file:
__call__	tools/pybrain/pybrain/auxiliary/gradientdescent.py	/^    def __call__(self, gradient, error=None):$/;"	m	class:NaturalGradient	file:
__call__	tools/pybrain/pybrain/rl/environments/fitnessevaluator.py	/^    def __call__(self, x):$/;"	m	class:FitnessEvaluator	file:
__call__	tools/pybrain/pybrain/rl/environments/functions/function.py	/^    def __call__(self, x):$/;"	m	class:FunctionEnvironment	file:
__call__	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    def __call__(self, p1, p2):$/;"	m	class:RelativeGomokuTask	file:
__call__	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    def __call__(self, p1, p2):$/;"	m	class:RelativeCaptureTask	file:
__call__	tools/pybrain/pybrain/tools/aptativeresampling.py	/^    def __call__(self, x):$/;"	m	class:AdaptiveResampler	file:
__call__	tools/pybrain/pybrain/tools/rankingfunctions.py	/^    def __call__(self, R):$/;"	m	class:BilinearRanking	file:
__call__	tools/pybrain/pybrain/tools/rankingfunctions.py	/^    def __call__(self, R):$/;"	m	class:ExponentialRanking	file:
__call__	tools/pybrain/pybrain/tools/rankingfunctions.py	/^    def __call__(self, R):$/;"	m	class:HansenRanking	file:
__call__	tools/pybrain/pybrain/tools/rankingfunctions.py	/^    def __call__(self, R):$/;"	m	class:RankingFunction	file:
__call__	tools/pybrain/pybrain/tools/rankingfunctions.py	/^    def __call__(self, R):$/;"	m	class:SmoothGiniRanking	file:
__call__	tools/pybrain/pybrain/tools/rankingfunctions.py	/^    def __call__(self, R):$/;"	m	class:TopLinearRanking	file:
__call__	tools/pybrain/pybrain/tools/rankingfunctions.py	/^    def __call__(self, R):$/;"	m	class:TopSelection	file:
__call__	tools/pybrain/pybrain/tools/rankingfunctions.py	/^    def __call__(self, R):$/;"	m	class:TournamentSelection	file:
__copy__	pybrain/supervised/evolino/individual.py	/^    def __copy__(self):$/;"	m	class:EvolinoSubIndividual	file:
__copy__	tools/pybrain/pybrain/supervised/evolino/individual.py	/^    def __copy__(self):$/;"	m	class:EvolinoSubIndividual	file:
__del__	pybrain/tools/rlgluebridge.py	/^    def __del__(self):$/;"	m	class:RLCExperiment	file:
__del__	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    def __del__(self):$/;"	m	class:RLCExperiment	file:
__getOffset	pybrain/structure/networks/network.py	/^    def __getOffset(self):$/;"	m	class:Network	file:
__getOffset	tools/pybrain/pybrain/structure/networks/network.py	/^    def __getOffset(self):$/;"	m	class:Network	file:
__getPermutations	pybrain/supervised/knn/lsh/minhash.py	/^    def __getPermutations(self):$/;"	m	class:MinHash	file:
__getPermutations	tools/pybrain/pybrain/supervised/knn/lsh/minhash.py	/^    def __getPermutations(self):$/;"	m	class:MinHash	file:
__getattribute__	pybrain/tools/rlgluebridge.py	/^    def __getattribute__(self, key):$/;"	m	class:BenchmarkingAgent	file:
__getattribute__	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    def __getattribute__(self, key):$/;"	m	class:BenchmarkingAgent	file:
__getitem__	pybrain/datasets/dataset.py	/^    def __getitem__(self, field):$/;"	m	class:DataSet	file:
__getitem__	pybrain/structure/modulemesh.py	/^    def __getitem__(self, coord):$/;"	m	class:ModuleMesh	file:
__getitem__	pybrain/structure/networks/network.py	/^    def __getitem__(self, name):$/;"	m	class:Network	file:
__getitem__	tools/pybrain/pybrain/datasets/dataset.py	/^    def __getitem__(self, field):$/;"	m	class:DataSet	file:
__getitem__	tools/pybrain/pybrain/structure/modulemesh.py	/^    def __getitem__(self, coord):$/;"	m	class:ModuleMesh	file:
__getitem__	tools/pybrain/pybrain/structure/networks/network.py	/^    def __getitem__(self, name):$/;"	m	class:Network	file:
__getstate__	pybrain/tests/unittests/test_utilities.py	/^    def __getstate__(self):$/;"	m	class:P	file:
__getstate__	tools/pybrain/pybrain/tests/unittests/test_utilities.py	/^    def __getstate__(self):$/;"	m	class:P	file:
__init__	ReachProbCalculator.py	/^    def __init__(self, environment, task, agent):$/;"	m	class:ReachProbCalculator
__init__	agents/ExplorerLearningAgent.py	/^    def __init__(self, module, learner, explorer):$/;"	m	class:ExplorerLearningAgent
__init__	agents/LSTDACAgent.py	/^    def __init__(self, policy, learner, sdim, adim):$/;"	m	class:LSTDACAgent
__init__	environments/TrapMaze.py	/^    def __init__(self, topology, startPos, goalStates, TP, DF, **args):$/;"	m	class:TrapMaze
__init__	learners/ENACLearner.py	/^    def __init__(self, **kwargs):$/;"	m	class:ENAC
__init__	learners/HessianACLearner.py	/^    def __init__(self,  actiondim, iniTheta, **argv):$/;"	m	class:HessianACLearner
__init__	learners/HessianACLearner.py	/^    def __init__(self, dim):$/;"	m	class:SecondBasisDataSet
__init__	learners/LSTDACLearner.py	/^    def __init__(self, actiondim, iniTheta, **kwargs):$/;"	m	class:LSTDACLearner
__init__	learners/TDLearner.py	/^    def __init__(self, actiondim, iniTheta, **kwargs):$/;"	m	class:TDLearner
__init__	policy/BoltzmanAC.py	/^    def __init__(self, feaDim, numActions, T, **args):$/;"	m	class:BoltzmanPolicy
__init__	pybrain/auxiliary/gaussprocess.py	/^    def __init__(self, indim, start=0, stop=1, step=0.1):$/;"	m	class:GaussianProcess
__init__	pybrain/auxiliary/gradientdescent.py	/^    def __init__(self):$/;"	m	class:GradientDescent
__init__	pybrain/auxiliary/gradientdescent.py	/^    def __init__(self, samplesize):$/;"	m	class:NaturalGradient
__init__	pybrain/auxiliary/gradientdescent.py	/^    def __init__(self, upfactor=1.1, downfactor=0.9, bound=0.5):$/;"	m	class:IRpropPlus
__init__	pybrain/datasets/classification.py	/^    def __init__(self, inp, target, nb_classes=0, class_labels=None):$/;"	m	class:SequenceClassificationDataSet
__init__	pybrain/datasets/classification.py	/^    def __init__(self, inp, target=1, nb_classes=0, class_labels=None):$/;"	m	class:ClassificationDataSet
__init__	pybrain/datasets/dataset.py	/^    def __init__(self):$/;"	m	class:DataSet
__init__	pybrain/datasets/importance.py	/^    def __init__(self, indim, targetdim):$/;"	m	class:ImportanceDataSet
__init__	pybrain/datasets/reinforcement.py	/^    def __init__(self, statedim, actiondim):$/;"	m	class:ReinforcementDataSet
__init__	pybrain/datasets/sequential.py	/^    def __init__(self, indim, targetdim):$/;"	m	class:SequentialDataSet
__init__	pybrain/datasets/supervised.py	/^    def __init__(self, inp, target):$/;"	m	class:SupervisedDataSet
__init__	pybrain/datasets/unsupervised.py	/^    def __init__(self, dim):$/;"	m	class:UnsupervisedDataSet
__init__	pybrain/optimization/optimizer.py	/^    def __init__(self, evaluator = None, initEvaluable = None, **kwargs):$/;"	m	class:BlackBoxOptimizer
__init__	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def __init__(self, relEvaluator, seeds, **args):$/;"	m	class:Coevolution
__init__	pybrain/optimization/populationbased/pso.py	/^    def __init__(self, start, minimize):$/;"	m	class:Particle
__init__	pybrain/rl/agents/learning.py	/^    def __init__(self, module, learner = None):$/;"	m	class:LearningAgent
__init__	pybrain/rl/agents/linearfa.py	/^    def __init__(self, learner, **kwargs):$/;"	m	class:LinearFA_Agent
__init__	pybrain/rl/agents/logging.py	/^    def __init__(self, indim, outdim, **kwargs):$/;"	m	class:LoggingAgent
__init__	pybrain/rl/agents/optimization.py	/^    def __init__(self, module, learner):$/;"	m	class:OptimizationAgent
__init__	pybrain/rl/environments/cartpole/balancetask.py	/^    def __init__(self, env=None, maxsteps=1000):$/;"	m	class:DiscreteBalanceTask
__init__	pybrain/rl/environments/cartpole/balancetask.py	/^    def __init__(self, env=None, maxsteps=1000):$/;"	m	class:DiscreteDoubleBalanceTaskRBF
__init__	pybrain/rl/environments/cartpole/balancetask.py	/^    def __init__(self, env=None, maxsteps=1000):$/;"	m	class:DiscretePOMDPTask
__init__	pybrain/rl/environments/cartpole/balancetask.py	/^    def __init__(self, env=None, maxsteps=1000, desiredValue = 0):$/;"	m	class:BalanceTask
__init__	pybrain/rl/environments/cartpole/cartpole.py	/^    def __init__(self, **kwargs):$/;"	m	class:CartPoleLinEnvironment
__init__	pybrain/rl/environments/cartpole/cartpole.py	/^    def __init__(self, polelength=None):$/;"	m	class:CartPoleEnvironment
__init__	pybrain/rl/environments/cartpole/doublepole.py	/^    def __init__(self):$/;"	m	class:DoublePoleEnvironment
__init__	pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^    def __init__(self, numPoles=1, markov=True, verbose=False,$/;"	m	class:FastCartPoleTask
__init__	pybrain/rl/environments/cartpole/renderer.py	/^    def __init__(self):$/;"	m	class:CartPoleRenderer
__init__	pybrain/rl/environments/classic/acrobot.py	/^    def __init__(self):$/;"	m	class:AcrobotTask
__init__	pybrain/rl/environments/classic/mountaincar.py	/^    def __init__(self):$/;"	m	class:MountainCar
__init__	pybrain/rl/environments/classic/xor.py	/^    def __init__(self):$/;"	m	class:XORChainTask
__init__	pybrain/rl/environments/classic/xor.py	/^    def __init__(self):$/;"	m	class:XORTask
__init__	pybrain/rl/environments/flexcube/environment.py	/^    def __init__(self, render=True, realtime=True, ip="127.0.0.1", port="21560"):$/;"	m	class:FlexCubeEnvironment
__init__	pybrain/rl/environments/flexcube/masspoint.py	/^    def __init__(self):$/;"	m	class:MArray
__init__	pybrain/rl/environments/flexcube/masspoint.py	/^    def __init__(self):$/;"	m	class:MassPoint
__init__	pybrain/rl/environments/flexcube/sensors.py	/^    def __init__(self):$/;"	m	class:defaultSensor
__init__	pybrain/rl/environments/flexcube/sensors.py	/^    def __init__(self, sensorList):$/;"	m	class:Sensors
__init__	pybrain/rl/environments/flexcube/tasks.py	/^    def __init__(self, env):$/;"	m	class:GrowTask
__init__	pybrain/rl/environments/flexcube/tasks.py	/^    def __init__(self, env):$/;"	m	class:JumpTask
__init__	pybrain/rl/environments/flexcube/tasks.py	/^    def __init__(self, env):$/;"	m	class:NoRewardTask
__init__	pybrain/rl/environments/flexcube/tasks.py	/^    def __init__(self, env):$/;"	m	class:RollingUpTask
__init__	pybrain/rl/environments/flexcube/tasks.py	/^    def __init__(self, env):$/;"	m	class:TargetTask
__init__	pybrain/rl/environments/flexcube/tasks.py	/^    def __init__(self, env):$/;"	m	class:WalkDirectionTask
__init__	pybrain/rl/environments/flexcube/tasks.py	/^    def __init__(self, env):$/;"	m	class:WalkTask
__init__	pybrain/rl/environments/flexcube/viewer.py	/^    def __init__(self, servIP="127.0.0.1", ownIP="127.0.0.1", port="21560"):$/;"	m	class:FlexCubeRenderer
__init__	pybrain/rl/environments/functions/function.py	/^    def __init__(self, xdim = None, xopt = None, **args):$/;"	m	class:FunctionEnvironment
__init__	pybrain/rl/environments/functions/multimodal.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:GallagherGauss101MeFunction
__init__	pybrain/rl/environments/functions/multimodal.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:LunacekBiRastriginFunction
__init__	pybrain/rl/environments/functions/multimodal.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Schwefel20Function
__init__	pybrain/rl/environments/functions/multimodal.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Schwefel_2_13Function
__init__	pybrain/rl/environments/functions/multimodal.py	/^    def __init__(self, xdim=1, a=1, xopt=None):$/;"	m	class:RastriginFunction
__init__	pybrain/rl/environments/functions/transformations.py	/^    def __init__(self, basef, distance=0.1, offset=None):$/;"	m	class:TranslateFunction
__init__	pybrain/rl/environments/functions/transformations.py	/^    def __init__(self, basef, distance=5, penalizationFactor=1.):$/;"	m	class:SoftConstrainedFunction
__init__	pybrain/rl/environments/functions/transformations.py	/^    def __init__(self, basef, rotMat=None):$/;"	m	class:RotateFunction
__init__	pybrain/rl/environments/functions/transformations.py	/^    def __init__(self, basef,$/;"	m	class:BBOBTransformationFunction
__init__	pybrain/rl/environments/functions/unimodal.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:AttractiveSectorFunction
__init__	pybrain/rl/environments/functions/unimodal.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:BoundedLinear
__init__	pybrain/rl/environments/functions/unimodal.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:ElliFunction
__init__	pybrain/rl/environments/functions/unimodal.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:StepElliFunction
__init__	pybrain/rl/environments/functions/unimodal.py	/^    def __init__(self, xdim = 2, xopt = None):$/;"	m	class:RosenbrockFunction
__init__	pybrain/rl/environments/graphical.py	/^    def __init__(self):$/;"	m	class:GraphicalEnvironment
__init__	pybrain/rl/environments/mazes/maze.py	/^    def __init__(self, topology, goal, **args):$/;"	m	class:Maze
__init__	pybrain/rl/environments/mazes/tasks/maze.py	/^    def __init__(self, **args):$/;"	m	class:MazeTask
__init__	pybrain/rl/environments/mazes/tasks/pomdp.py	/^    def __init__(self, **args):$/;"	m	class:POMDPTask
__init__	pybrain/rl/environments/mazes/tasks/tmaze.py	/^    def __init__(self, **args):$/;"	m	class:TMaze
__init__	pybrain/rl/environments/ode/actuators.py	/^    def __init__(self, jointNames, name=None):$/;"	m	class:CopyJointActuator
__init__	pybrain/rl/environments/ode/actuators.py	/^    def __init__(self, jointNames, name=None):$/;"	m	class:SpecificJointActuator
__init__	pybrain/rl/environments/ode/actuators.py	/^    def __init__(self, name, numValues):$/;"	m	class:Actuator
__init__	pybrain/rl/environments/ode/actuators.py	/^    def __init__(self, name='JointActuator'):$/;"	m	class:JointActuator
__init__	pybrain/rl/environments/ode/environment.py	/^    def __init__(self, render=True, realtime=True, ip="127.0.0.1", port="21590", buf='16384'):$/;"	m	class:ODEEnvironment
__init__	pybrain/rl/environments/ode/instances/acrobot.py	/^    def __init__(self, renderer=True, realtime=True, ip="127.0.0.1", port="21590", buf='16384'):$/;"	m	class:AcrobotEnvironment
__init__	pybrain/rl/environments/ode/instances/ccrl.py	/^    def __init__(self, xodeFile="ccrlGlas.xode", renderer=True, realtime=False, ip="127.0.0.1", port="21590", buf='16384'):$/;"	m	class:CCRLEnvironment
__init__	pybrain/rl/environments/ode/instances/johnnie.py	/^    def __init__(self, renderer=True, realtime=False, ip="127.0.0.1", port="21590", buf='16384'):$/;"	m	class:JohnnieEnvironment
__init__	pybrain/rl/environments/ode/sensors.py	/^    def __init__(self, bodyName, name='DistToPointSensor', point=(0, 0, 0)):$/;"	m	class:DistToPointSensor
__init__	pybrain/rl/environments/ode/sensors.py	/^    def __init__(self, bodyName1, bodyName2, name='BodyDistanceSensor'):$/;"	m	class:BodyDistanceSensor
__init__	pybrain/rl/environments/ode/sensors.py	/^    def __init__(self, bodyNames, name=None):$/;"	m	class:SpecificBodyPositionSensor
__init__	pybrain/rl/environments/ode/sensors.py	/^    def __init__(self, jointNames, name=None):$/;"	m	class:SpecificJointSensor
__init__	pybrain/rl/environments/ode/sensors.py	/^    def __init__(self, jointNames, name=None):$/;"	m	class:SpecificJointVelocitySensor
__init__	pybrain/rl/environments/ode/sensors.py	/^    def __init__(self, name, numValues):$/;"	m	class:Sensor
__init__	pybrain/rl/environments/ode/sensors.py	/^    def __init__(self, name='BodyPositionSensor'):$/;"	m	class:BodyPositionSensor
__init__	pybrain/rl/environments/ode/sensors.py	/^    def __init__(self, name='JointSensor'):$/;"	m	class:JointSensor
__init__	pybrain/rl/environments/ode/sensors.py	/^    def __init__(self, name='JointVelocitySensor'):$/;"	m	class:JointVelocitySensor
__init__	pybrain/rl/environments/ode/sensors.py	/^    def __init__(self, value):$/;"	m	class:SizeError
__init__	pybrain/rl/environments/ode/tasks/acrobot.py	/^    def __init__(self, environment):$/;"	m	class:GradualRewardTask
__init__	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def __init__(self, env):$/;"	m	class:CCRLGlasTask
__init__	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def __init__(self, env):$/;"	m	class:CCRLGlasVarTask
__init__	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def __init__(self, env):$/;"	m	class:CCRLPlateTask
__init__	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def __init__(self, env):$/;"	m	class:CCRLPointTask
__init__	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def __init__(self, env):$/;"	m	class:CCRLPointVarTask
__init__	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def __init__(self, env):$/;"	m	class:CCRLTask
__init__	pybrain/rl/environments/ode/tasks/johnnie.py	/^    def __init__(self, env):$/;"	m	class:JohnnieTask
__init__	pybrain/rl/environments/ode/tasks/johnnie.py	/^    def __init__(self, env):$/;"	m	class:JumpingTask
__init__	pybrain/rl/environments/ode/tasks/johnnie.py	/^    def __init__(self, env):$/;"	m	class:RStandingTask
__init__	pybrain/rl/environments/ode/tasks/johnnie.py	/^    def __init__(self, env):$/;"	m	class:StandingTask
__init__	pybrain/rl/environments/ode/tasks/johnnie.py	/^    def __init__(self, env):$/;"	m	class:StandingUpTask
__init__	pybrain/rl/environments/ode/tools/configgrab.py	/^    def __init__(self, filename, sectionId="", delim=("[", "]")):$/;"	m	class:ConfigGrabber
__init__	pybrain/rl/environments/ode/tools/xmltools.py	/^    def __init__(self, name, attr=None):$/;"	m	class:XMLstruct
__init__	pybrain/rl/environments/ode/tools/xodetools.py	/^    def __init__(self, name, **kwargs):$/;"	m	class:XODEJohnnie
__init__	pybrain/rl/environments/ode/tools/xodetools.py	/^    def __init__(self, name, **kwargs):$/;"	m	class:XODELSRGlas
__init__	pybrain/rl/environments/ode/tools/xodetools.py	/^    def __init__(self, name, **kwargs):$/;"	m	class:XODELSRPlate
__init__	pybrain/rl/environments/ode/tools/xodetools.py	/^    def __init__(self, name, **kwargs):$/;"	m	class:XODELSRTable
__init__	pybrain/rl/environments/ode/tools/xodetools.py	/^    def __init__(self, name, **kwargs):$/;"	m	class:XODESLR
__init__	pybrain/rl/environments/ode/tools/xodetools.py	/^    def __init__(self, name, **kwargs):$/;"	m	class:XODEfile
__init__	pybrain/rl/environments/ode/tools/xodetools.py	/^    def __init__(self, name, **kwargs):$/;"	m	class:XODEfinger
__init__	pybrain/rl/environments/ode/tools/xodetools.py	/^    def __init__(self, name, **kwargs):$/;"	m	class:XODEhand
__init__	pybrain/rl/environments/ode/tools/xodetools.py	/^    def __init__(self, name, **kwargs):$/;"	m	class:XODEhandflip
__init__	pybrain/rl/environments/ode/viewer.py	/^    def __init__(self, servIP="127.0.0.1", ownIP="127.0.0.1", port="21590", buf="16384"):$/;"	m	class:ODEViewer
__init__	pybrain/rl/environments/ode/xode_changes/body.py	/^    def __init__(self, name, parent):$/;"	m	class:Mass
__init__	pybrain/rl/environments/ode/xode_changes/body.py	/^    def __init__(self, name, parent, attrs):$/;"	m	class:Body
__init__	pybrain/rl/environments/ode/xode_changes/geom.py	/^    def __init__(self, name, parent):$/;"	m	class:Geom
__init__	pybrain/rl/environments/renderer.py	/^    def __init__(self):$/;"	m	class:Renderer
__init__	pybrain/rl/environments/serverinterface.py	/^    def __init__(self):$/;"	m	class:GraphicalEnvironment
__init__	pybrain/rl/environments/shipsteer/northwardtask.py	/^    def __init__(self, env=None, maxsteps=1000):$/;"	m	class:GoNorthwardTask
__init__	pybrain/rl/environments/shipsteer/shipsteer.py	/^    def __init__(self, render=True, ip="127.0.0.1", port="21580", numdir=1):$/;"	m	class:ShipSteeringEnvironment
__init__	pybrain/rl/environments/shipsteer/viewer.py	/^    def __init__(self, servIP="127.0.0.1", ownIP="127.0.0.1", port="21580"):$/;"	m	class:FlexCubeRenderer
__init__	pybrain/rl/environments/simple/environment.py	/^    def __init__(self, dim=1):$/;"	m	class:SimpleEnvironment
__init__	pybrain/rl/environments/simple/renderer.py	/^    def __init__(self):$/;"	m	class:SimpleRenderer
__init__	pybrain/rl/environments/simple/tasks.py	/^    def __init__(self, environment):$/;"	m	class:MinimizeTask
__init__	pybrain/rl/environments/simplerace/simpleracetask.py	/^    def __init__(self):$/;"	m	class:SimpleraceTask
__init__	pybrain/rl/environments/simplerace/simpleracetcp.py	/^    def __init__(self, host="127.0.0.1", port=6524):$/;"	m	class:SimpleraceEnvironment
__init__	pybrain/rl/environments/task.py	/^    def __init__(self, environment):$/;"	m	class:Task
__init__	pybrain/rl/environments/twoplayergames/capturegame.py	/^    def __init__(self, size, suicideenabled=True):$/;"	m	class:CaptureGame
__init__	pybrain/rl/environments/twoplayergames/capturegameplayers/captureplayer.py	/^    def __init__(self, game, color = CaptureGame.BLACK, **args):$/;"	m	class:CapturePlayer
__init__	pybrain/rl/environments/twoplayergames/capturegameplayers/clientwrapper.py	/^    def __init__(self, game, color=CaptureGame.BLACK, player='AtariGreedy', **args):$/;"	m	class:ClientCapturePlayer
__init__	pybrain/rl/environments/twoplayergames/capturegameplayers/moduledecision.py	/^    def __init__(self, module, *args, **kwargs):$/;"	m	class:ModuleDecidingPlayer
__init__	pybrain/rl/environments/twoplayergames/gomoku.py	/^    def __init__(self, size):$/;"	m	class:GomokuGame
__init__	pybrain/rl/environments/twoplayergames/gomokuplayers/gomokuplayer.py	/^    def __init__(self, game, color = GomokuGame.BLACK, **args):$/;"	m	class:GomokuPlayer
__init__	pybrain/rl/environments/twoplayergames/gomokuplayers/moduledecision.py	/^    def __init__(self, module, *args, **kwargs):$/;"	m	class:ModuleDecidingPlayer
__init__	pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^    def __init__(self, size, opponent = None, **args):$/;"	m	class:CaptureGameTask
__init__	pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^    def __init__(self, size, opponent = None, **args):$/;"	m	class:GomokuTask
__init__	pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    def __init__(self, *args, **kargs):$/;"	m	class:HandicapCaptureTask
__init__	pybrain/rl/environments/twoplayergames/tasks/pentetask.py	/^    def __init__(self, size, opponent = None, **args):$/;"	m	class:PenteTask
__init__	pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    def __init__(self, size, **args):$/;"	m	class:RelativeGomokuTask
__init__	pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    def __init__(self, size, **args):$/;"	m	class:RelativeCaptureTask
__init__	pybrain/rl/experiments/episodic.py	/^    def __init__(self, task, agent):$/;"	m	class:EpisodicExperiment
__init__	pybrain/rl/experiments/experiment.py	/^    def __init__(self, task, agent):$/;"	m	class:Experiment
__init__	pybrain/rl/experiments/tournament.py	/^    def __init__(self, env, agents):$/;"	m	class:Tournament
__init__	pybrain/rl/explorers/continuous/normal.py	/^    def __init__(self, dim, sigma=0.):$/;"	m	class:NormalExplorer
__init__	pybrain/rl/explorers/continuous/sde.py	/^    def __init__(self, statedim, actiondim, sigma= -2.):$/;"	m	class:StateDependentExplorer
__init__	pybrain/rl/explorers/discrete/boltzmann.py	/^    def __init__(self, tau = 2., decay = 0.9995):$/;"	m	class:BoltzmannExplorer
__init__	pybrain/rl/explorers/discrete/discrete.py	/^    def __init__(self):$/;"	m	class:DiscreteExplorer
__init__	pybrain/rl/explorers/discrete/discretesde.py	/^    def __init__(self, epsilon = 0.2, decay = 0.9998):$/;"	m	class:DiscreteStateDependentExplorer
__init__	pybrain/rl/explorers/discrete/egreedy.py	/^    def __init__(self, epsilon = 0.3, decay = 0.9999):$/;"	m	class:EpsilonGreedyExplorer
__init__	pybrain/rl/learners/directsearch/gpomdp.py	/^    def __init__(self):$/;"	m	class:GPOMDP
__init__	pybrain/rl/learners/directsearch/policygradient.py	/^    def __init__(self):$/;"	m	class:PolicyGradientLearner
__init__	pybrain/rl/learners/directsearch/policygradient.py	/^    def __init__(self, dim):$/;"	m	class:LoglhDataSet
__init__	pybrain/rl/learners/directsearch/rwr.py	/^    def __init__(self, net, task, valueNetwork=None, **args):$/;"	m	class:RWR
__init__	pybrain/rl/learners/valuebased/interface.py	/^    def __init__(self, dimState, numActions, name=None):$/;"	m	class:ActionValueNetwork
__init__	pybrain/rl/learners/valuebased/interface.py	/^    def __init__(self, numStates, numActions, name=None):$/;"	m	class:ActionValueTable
__init__	pybrain/rl/learners/valuebased/linearfa.py	/^    def __init__(self, num_actions, num_features, **kwargs):$/;"	m	class:LinearFALearner
__init__	pybrain/rl/learners/valuebased/nfq.py	/^    def __init__(self, maxEpochs=20):$/;"	m	class:NFQ
__init__	pybrain/rl/learners/valuebased/q.py	/^    def __init__(self, alpha=0.5, gamma=0.99):$/;"	m	class:Q
__init__	pybrain/rl/learners/valuebased/qlambda.py	/^    def __init__(self, alpha=0.5, gamma=0.99, qlambda=0.9):$/;"	m	class:QLambda
__init__	pybrain/rl/learners/valuebased/sarsa.py	/^    def __init__(self, alpha=0.5, gamma=0.99):$/;"	m	class:SARSA
__init__	pybrain/rl/learners/valuebased/valuebased.py	/^    def __init__(self):$/;"	m	class:ValueBasedLearner
__init__	pybrain/structure/connections/connection.py	/^    def __init__(self, inmod, outmod, name = None,$/;"	m	class:Connection
__init__	pybrain/structure/connections/full.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:FullConnection
__init__	pybrain/structure/connections/fullnotself.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:FullNotSelfConnection
__init__	pybrain/structure/connections/identity.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:IdentityConnection
__init__	pybrain/structure/connections/linear.py	/^    def __init__(self, inmod, outmod, name=None,$/;"	m	class:LinearConnection
__init__	pybrain/structure/connections/permutation.py	/^    def __init__(self, inmod, outmod, permutation, blocksize, *args, **kwargs):$/;"	m	class:PermutationConnection
__init__	pybrain/structure/connections/shared.py	/^    def __init__(self, mother, *args, **kwargs):$/;"	m	class:SharedConnection
__init__	pybrain/structure/connections/shared.py	/^    def __init__(self, mother, inmod, outmod, **kwargs):$/;"	m	class:SharedSubsamplingConnection
__init__	pybrain/structure/connections/shared.py	/^    def __init__(self, nbparams, **args):$/;"	m	class:MotherConnection
__init__	pybrain/structure/connections/subsampling.py	/^    def __init__(self, inmod, outmod, name=None,$/;"	m	class:SubsamplingConnection
__init__	pybrain/structure/evolvables/cheaplycopiable.py	/^    def __init__(self, module):$/;"	m	class:CheaplyCopiable
__init__	pybrain/structure/evolvables/maskedparameters.py	/^    def __init__(self, pcontainer, **args):$/;"	m	class:MaskedParameters
__init__	pybrain/structure/evolvables/topology.py	/^    def __init__(self, pcontainer, **args):$/;"	m	class:TopologyEvolvable
__init__	pybrain/structure/modulemesh.py	/^    def __init__(self, constructor, dimensions, name = None, baserename = False):$/;"	m	class:ModuleMesh
__init__	pybrain/structure/modules/biasunit.py	/^    def __init__(self, name=None):$/;"	m	class:BiasUnit
__init__	pybrain/structure/modules/evolinonetwork.py	/^    def __init__(self, outdim, hiddim=15):$/;"	m	class:EvolinoNetwork
__init__	pybrain/structure/modules/gate.py	/^    def __init__(self, dim, name=None):$/;"	m	class:DoubleGateLayer
__init__	pybrain/structure/modules/gate.py	/^    def __init__(self, dim, name=None):$/;"	m	class:GateLayer
__init__	pybrain/structure/modules/gate.py	/^    def __init__(self, dim, name=None):$/;"	m	class:MultiplicationLayer
__init__	pybrain/structure/modules/gate.py	/^    def __init__(self, dim, name=None):$/;"	m	class:SwitchLayer
__init__	pybrain/structure/modules/gaussianlayer.py	/^    def __init__(self, dim, name=None):$/;"	m	class:GaussianLayer
__init__	pybrain/structure/modules/kohonen.py	/^    def __init__(self, dim, nNeurons, name=None, outputFullMap=False):$/;"	m	class:KohonenMap
__init__	pybrain/structure/modules/lstm.py	/^    def __init__(self, dim, peepholes = False, name = None):$/;"	m	class:LSTMLayer
__init__	pybrain/structure/modules/mdlstm.py	/^    def __init__(self, dim, dimensions=1, peepholes=False, name=None):$/;"	m	class:MDLSTMLayer
__init__	pybrain/structure/modules/mdrnnlayer.py	/^    def __init__(self, timedim, shape,$/;"	m	class:MdrnnLayer
__init__	pybrain/structure/modules/module.py	/^    def __init__(self, indim, outdim, name=None, **args):$/;"	m	class:Module
__init__	pybrain/structure/modules/neuronlayer.py	/^    def __init__(self, dim, name=None):$/;"	m	class:NeuronLayer
__init__	pybrain/structure/modules/softmax.py	/^    def __init__(self, size, slicelength):$/;"	m	class:PartialSoftmaxLayer
__init__	pybrain/structure/modules/statedependentlayer.py	/^    def __init__(self, dim, module, name=None, onesigma=True):$/;"	m	class:StateDependentLayer
__init__	pybrain/structure/modules/svmunit.py	/^    def __init__(self, indim=0, outdim=0, model=None):$/;"	m	class:SVMUnit
__init__	pybrain/structure/modules/table.py	/^    def __init__(self, numRows, numColumns, name=None):$/;"	m	class:Table
__init__	pybrain/structure/moduleslice.py	/^    def __init__(self, base, inSliceFrom = 0, inSliceTo = None, outSliceFrom = 0, outSliceTo = None):$/;"	m	class:ModuleSlice
__init__	pybrain/structure/networks/bidirectional.py	/^    def __init__(self, predefined = None, **kwargs):$/;"	m	class:BidirectionalNetwork
__init__	pybrain/structure/networks/borderswiping.py	/^    def __init__(self, inmesh = None, hiddenmesh = None, outmesh = None, **args):$/;"	m	class:BorderSwipingNetwork
__init__	pybrain/structure/networks/convolutional.py	/^    def __init__(self, inputdim, insize, convSize, numFeatureMaps, **args):$/;"	m	class:SimpleConvolutionalNetwork
__init__	pybrain/structure/networks/custom/capturegame.py	/^    def __init__(self, **args):$/;"	m	class:CaptureGameNetwork
__init__	pybrain/structure/networks/custom/convboard.py	/^    def __init__(self, boardSize, convSize, numFeatureMaps, **args):$/;"	m	class:ConvolutionalBoardNetwork
__init__	pybrain/structure/networks/feedforward.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:FeedForwardNetwork
__init__	pybrain/structure/networks/feedforward.py	/^    def __init__(self, name=None, **args):$/;"	m	class:FeedForwardNetworkComponent
__init__	pybrain/structure/networks/mdrnn.py	/^    def __init__(self, timedim, shape,$/;"	m	class:_Mdrnn
__init__	pybrain/structure/networks/multidimensional.py	/^    def __init__(self, dims, **args):$/;"	m	class:MultiDimensionalRNN
__init__	pybrain/structure/networks/network.py	/^    def __init__(self, name=None, **args):$/;"	m	class:Network
__init__	pybrain/structure/networks/rbm.py	/^    def __init__(self, net):$/;"	m	class:Rbm
__init__	pybrain/structure/networks/recurrent.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:RecurrentNetwork
__init__	pybrain/structure/networks/recurrent.py	/^    def __init__(self, forget=None, name=None, *args, **kwargs):$/;"	m	class:RecurrentNetworkComponent
__init__	pybrain/structure/networks/swiping.py	/^    def __init__(self, inmesh=None, hiddenmesh=None, outmesh=None, predefined=None, **args):$/;"	m	class:SwipingNetwork
__init__	pybrain/structure/parametercontainer.py	/^    def __init__(self, paramdim = 0, **args):$/;"	m	class:ParameterContainer
__init__	pybrain/supervised/evolino/filter.py	/^    def __init__(self):$/;"	m	class:EvolinoSelection
__init__	pybrain/supervised/evolino/filter.py	/^    def __init__(self):$/;"	m	class:EvolinoSubSelection
__init__	pybrain/supervised/evolino/filter.py	/^    def __init__(self, **kwargs):$/;"	m	class:EvolinoBurstMutation
__init__	pybrain/supervised/evolino/filter.py	/^    def __init__(self, **kwargs):$/;"	m	class:EvolinoReproduction
__init__	pybrain/supervised/evolino/filter.py	/^    def __init__(self, **kwargs):$/;"	m	class:EvolinoSubMutation
__init__	pybrain/supervised/evolino/filter.py	/^    def __init__(self, **kwargs):$/;"	m	class:EvolinoSubReproduction
__init__	pybrain/supervised/evolino/filter.py	/^    def __init__(self, evolino_network, dataset, **kwargs):$/;"	m	class:EvolinoEvaluation
__init__	pybrain/supervised/evolino/gfilter.py	/^    def __init__(self):$/;"	m	class:Filter
__init__	pybrain/supervised/evolino/gfilter.py	/^    def __init__(self):$/;"	m	class:SimpleGenomeManipulation
__init__	pybrain/supervised/evolino/gfilter.py	/^    def __init__(self):$/;"	m	class:SimpleMutation
__init__	pybrain/supervised/evolino/gfilter.py	/^    def __init__(self, minval=0., maxval=1.):$/;"	m	class:Randomization
__init__	pybrain/supervised/evolino/gpopulation.py	/^    def __init__(self):$/;"	m	class:SimplePopulation
__init__	pybrain/supervised/evolino/gpopulation.py	/^    def __init__(self):pass$/;"	m	class:Population
__init__	pybrain/supervised/evolino/individual.py	/^    def __init__(self, genome):$/;"	m	class:EvolinoSubIndividual
__init__	pybrain/supervised/evolino/individual.py	/^    def __init__(self, sub_individuals):$/;"	m	class:EvolinoIndividual
__init__	pybrain/supervised/evolino/networkwrapper.py	/^    def __init__(self, indim, outdim, hiddim=6):$/;"	m	class:EvolinoNetwork
__init__	pybrain/supervised/evolino/networkwrapper.py	/^    def __init__(self, network):$/;"	m	class:NetworkWrapper
__init__	pybrain/supervised/evolino/population.py	/^    def __init__(self, chromosome, maxNIndividuals, valueInitializer=Randomization(-0.1, 0.1), **kwargs):$/;"	m	class:EvolinoSubPopulation
__init__	pybrain/supervised/evolino/population.py	/^    def __init__(self, individual, subPopulationSize, nCombinations=1, valueInitializer=Randomization(-0.1, 0.1), **kwargs):$/;"	m	class:EvolinoPopulation
__init__	pybrain/supervised/evolino/variate.py	/^    def __init__(self, min_val=0., max_val=1.):$/;"	m	class:UniformVariate
__init__	pybrain/supervised/evolino/variate.py	/^    def __init__(self, x0=0., alpha=1.):$/;"	m	class:CauchyVariate
__init__	pybrain/supervised/evolino/variate.py	/^    def __init__(self, x0=0., alpha=1.):$/;"	m	class:GaussianVariate
__init__	pybrain/supervised/knn/lsh/minhash.py	/^    def __init__(self, dim, nPermutations):$/;"	m	class:MinHash
__init__	pybrain/supervised/knn/lsh/nearoptimal.py	/^    def __init__(self, dim, omega=4, prob=0.8):$/;"	m	class:MultiDimHash
__init__	pybrain/supervised/trainers/backprop.py	/^    def __init__(self, module, dataset=None, learningrate=0.01, lrdecay=1.0,$/;"	m	class:BackpropTrainer
__init__	pybrain/supervised/trainers/evolino.py	/^    def __init__(self, evolino_network, dataset, **kwargs):$/;"	m	class:EvolinoTrainer
__init__	pybrain/supervised/trainers/rprop.py	/^    def __init__(self, module, etaminus=0.5, etaplus=1.2, deltamin=1.0e-6, deltamax=5.0, delta0=0.1, **kwargs):$/;"	m	class:RPropMinusTrainer
__init__	pybrain/supervised/trainers/svmtrainer.py	/^    def __init__(self, problem, targets, cmin, cmax, cstep=None, crossval=5,$/;"	m	class:GridSearch
__init__	pybrain/supervised/trainers/svmtrainer.py	/^    def __init__(self, svmunit, dataset, modelfile=None, plot=False):$/;"	m	class:SVMTrainer
__init__	pybrain/supervised/trainers/trainer.py	/^    def __init__(self, module):$/;"	m	class:Trainer
__init__	pybrain/tests/optimizationtest.py	/^    def __init__(self, x): self.x = x$/;"	m	class:SimpleEvo
__init__	pybrain/tests/unittests/tools/test_rlgluebridge.py	/^    def __init__(self): pass$/;"	m	class:PseudoPybrainAgent
__init__	pybrain/tools/aptativeresampling.py	/^    def __init__(self, f, batchsize, update_factor=1.5, threshold=0.2, max_resampling=None):$/;"	m	class:AdaptiveResampler
__init__	pybrain/tools/benchmark.py	/^    def __init__(self):$/;"	m	class:BenchmarkDataSet
__init__	pybrain/tools/customxml/handling.py	/^    def __init__(self, filename, newfile):$/;"	m	class:XMLHandling
__init__	pybrain/tools/datasettools.py	/^    def __init__(self, fname=None, meanstd=False):$/;"	m	class:DataSetNormalizer
__init__	pybrain/tools/example_tools.py	/^    def __init__(self, batch = 2, prnts = 1, kind = "optimizer"):$/;"	m	class:ExTools
__init__	pybrain/tools/gridsearch.py	/^    def __init__(self, min_params, max_params, n_iterations=5, **kwargs):$/;"	m	class:GridSearchDOE
__init__	pybrain/tools/gridsearch.py	/^    def __init__(self, min_params, max_params, n_steps=7, **kwargs):$/;"	m	class:GridSearch2D
__init__	pybrain/tools/gridsearch.py	/^    def __init__(self, trainer, dataset, min_params=[-5, -15], max_params=[15, 3], n_iterations=5, **kwargs):$/;"	m	class:GridSearchDOECostGamma
__init__	pybrain/tools/gridsearch.py	/^    def __init__(self, trainer, dataset, min_params=[-5, -15], max_params=[15, 3], n_steps=7, **kwargs):$/;"	m	class:GridSearchCostGamma
__init__	pybrain/tools/kwargsprocessor.py	/^        def __init__(self, **kwargs):$/;"	m	class:KWArgsProcessor.C
__init__	pybrain/tools/kwargsprocessor.py	/^    def __init__(self, name, **kwargs):$/;"	m	class:KWArgDsc
__init__	pybrain/tools/kwargsprocessor.py	/^    def __init__(self, obj, kwargs):$/;"	m	class:KWArgsProcessor
__init__	pybrain/tools/mixtures/mixtureofgaussian.py	/^    def __init__(self, typ, numOGaus=10, alphaA=0.02, alphaM=0.02, alphaS=0.02):$/;"	m	class:MixtureOfGaussians
__init__	pybrain/tools/mixtures/mogpuremax.py	/^    def __init__(self, numOGaus=10, alphaA=0.02, alphaM=0.02, alphaS=0.02):$/;"	m	class:MixtureOfGaussians
__init__	pybrain/tools/networking/udpconnection.py	/^    def __init__(self, ip="127.0.0.1", port="21560", buf="1024"):$/;"	m	class:UDPServer
__init__	pybrain/tools/networking/udpconnection.py	/^    def __init__(self, servIP="127.0.0.1", ownIP="127.0.0.1", port="21560", buf="1024"):$/;"	m	class:UDPClient
__init__	pybrain/tools/neuralnets.py	/^    def __init__(self, DS, **kwargs):$/;"	m	class:NNclassifier
__init__	pybrain/tools/neuralnets.py	/^    def __init__(self, DS, **kwargs):$/;"	m	class:NNtools
__init__	pybrain/tools/plotting/ciaoplot.py	/^    def __init__(self, evaluator, hof1, hof2, **args):$/;"	m	class:CiaoPlot
__init__	pybrain/tools/plotting/colormaps.py	/^    def __init__(self, mat, cmap=None, pixelspervalue=20, minvalue=None, maxvalue=None):$/;"	m	class:ColorMap
__init__	pybrain/tools/plotting/fitnesslandscapes.py	/^    def __init__(self, f, xmin= -1, xmax=1, ymin= -1, ymax=1, precision=50, newfig=True,$/;"	m	class:FitnessPlotter
__init__	pybrain/tools/plotting/multiline.py	/^    def __init__(self, maxLines=1, autoscale=0.0, **kwargs):$/;"	m	class:MultilinePlotter
__init__	pybrain/tools/rankingfunctions.py	/^    def __init__(self, **args):$/;"	m	class:RankingFunction
__init__	pybrain/tools/rlgluebridge.py	/^    def __init__(self, agent):$/;"	m	class:BenchmarkingAgent
__init__	pybrain/tools/rlgluebridge.py	/^    def __init__(self, agents, port=None):$/;"	m	class:RlCompBenchmark
__init__	pybrain/tools/rlgluebridge.py	/^    def __init__(self, klass, *args, **kwargs):$/;"	m	class:RlglueAgentAdapter
__init__	pybrain/tools/rlgluebridge.py	/^    def __init__(self, path, port=None, autoreconnect=None):$/;"	m	class:RLCExperiment
__init__	pybrain/tools/svmdata.py	/^    def __init__(self, filename=None):$/;"	m	class:SVMData
__init__	pybrain/tools/validation.py	/^    def __init__(self, trainer, dataset, n_folds=5, valfunc=ModuleValidator.classificationPerformance, **kwargs):$/;"	m	class:CrossValidator
__init__	pybrain/unsupervised/trainers/deepbelief.py	/^    def __init__(self, net, dataset, epochs=50,$/;"	m	class:DeepBeliefTrainer
__init__	pybrain/unsupervised/trainers/rbm.py	/^    def __init__(self):$/;"	m	class:RbmGibbsTrainerConfig
__init__	pybrain/unsupervised/trainers/rbm.py	/^    def __init__(self, rbm, dataset, cfg=None):$/;"	m	class:RbmGaussTrainer
__init__	pybrain/unsupervised/trainers/rbm.py	/^    def __init__(self, rbm, dataset, cfg=None):$/;"	m	class:RbmGibbsTrainer
__init__	task/RobotMotionTask.py	/^    def __init__(self, environment, **argv):$/;"	m	class:RobotMotionTask
__init__	tools/pybrain/examples/rl/environments/linear_fa/xor.py	/^    def __init__(self, learner):$/;"	m	class:LinFA_QAgent
__init__	tools/pybrain/examples/supervised/backprop/datasets/anbncn.py	/^    def __init__(self):$/;"	m	class:AnBnCnDataSet
__init__	tools/pybrain/examples/supervised/backprop/datasets/parity.py	/^    def __init__(self):$/;"	m	class:ParityDataSet
__init__	tools/pybrain/examples/supervised/backprop/datasets/xor.py	/^    def __init__(self):$/;"	m	class:SequentialXORDataSet
__init__	tools/pybrain/examples/supervised/backprop/datasets/xor.py	/^    def __init__(self):$/;"	m	class:XORDataSet
__init__	tools/pybrain/examples/supervised/evolino/lib/data_generator.py	/^    def __init__(self, lambdas=[1.]):$/;"	m	class:SuperimposedSine
__init__	tools/pybrain/pybrain/auxiliary/gaussprocess.py	/^    def __init__(self, indim, start=0, stop=1, step=0.1):$/;"	m	class:GaussianProcess
__init__	tools/pybrain/pybrain/auxiliary/gradientdescent.py	/^    def __init__(self):$/;"	m	class:GradientDescent
__init__	tools/pybrain/pybrain/auxiliary/gradientdescent.py	/^    def __init__(self, samplesize):$/;"	m	class:NaturalGradient
__init__	tools/pybrain/pybrain/auxiliary/gradientdescent.py	/^    def __init__(self, upfactor=1.1, downfactor=0.9, bound=0.5):$/;"	m	class:IRpropPlus
__init__	tools/pybrain/pybrain/datasets/classification.py	/^    def __init__(self, inp, target, nb_classes=0, class_labels=None):$/;"	m	class:SequenceClassificationDataSet
__init__	tools/pybrain/pybrain/datasets/classification.py	/^    def __init__(self, inp, target=1, nb_classes=0, class_labels=None):$/;"	m	class:ClassificationDataSet
__init__	tools/pybrain/pybrain/datasets/dataset.py	/^    def __init__(self):$/;"	m	class:DataSet
__init__	tools/pybrain/pybrain/datasets/importance.py	/^    def __init__(self, indim, targetdim):$/;"	m	class:ImportanceDataSet
__init__	tools/pybrain/pybrain/datasets/reinforcement.py	/^    def __init__(self, statedim, actiondim):$/;"	m	class:ReinforcementDataSet
__init__	tools/pybrain/pybrain/datasets/sequential.py	/^    def __init__(self, indim, targetdim):$/;"	m	class:SequentialDataSet
__init__	tools/pybrain/pybrain/datasets/supervised.py	/^    def __init__(self, inp, target):$/;"	m	class:SupervisedDataSet
__init__	tools/pybrain/pybrain/datasets/unsupervised.py	/^    def __init__(self, dim):$/;"	m	class:UnsupervisedDataSet
__init__	tools/pybrain/pybrain/optimization/optimizer.py	/^    def __init__(self, evaluator = None, initEvaluable = None, **kwargs):$/;"	m	class:BlackBoxOptimizer
__init__	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def __init__(self, relEvaluator, seeds, **args):$/;"	m	class:Coevolution
__init__	tools/pybrain/pybrain/optimization/populationbased/pso.py	/^    def __init__(self, start, minimize):$/;"	m	class:Particle
__init__	tools/pybrain/pybrain/rl/agents/learning.py	/^    def __init__(self, module, learner = None):$/;"	m	class:LearningAgent
__init__	tools/pybrain/pybrain/rl/agents/linearfa.py	/^    def __init__(self, learner, **kwargs):$/;"	m	class:LinearFA_Agent
__init__	tools/pybrain/pybrain/rl/agents/logging.py	/^    def __init__(self, indim, outdim, **kwargs):$/;"	m	class:LoggingAgent
__init__	tools/pybrain/pybrain/rl/agents/optimization.py	/^    def __init__(self, module, learner):$/;"	m	class:OptimizationAgent
__init__	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    def __init__(self, env=None, maxsteps=1000):$/;"	m	class:DiscreteBalanceTask
__init__	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    def __init__(self, env=None, maxsteps=1000):$/;"	m	class:DiscreteDoubleBalanceTaskRBF
__init__	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    def __init__(self, env=None, maxsteps=1000):$/;"	m	class:DiscretePOMDPTask
__init__	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    def __init__(self, env=None, maxsteps=1000, desiredValue = 0):$/;"	m	class:BalanceTask
__init__	tools/pybrain/pybrain/rl/environments/cartpole/cartpole.py	/^    def __init__(self, **kwargs):$/;"	m	class:CartPoleLinEnvironment
__init__	tools/pybrain/pybrain/rl/environments/cartpole/cartpole.py	/^    def __init__(self, polelength=None):$/;"	m	class:CartPoleEnvironment
__init__	tools/pybrain/pybrain/rl/environments/cartpole/doublepole.py	/^    def __init__(self):$/;"	m	class:DoublePoleEnvironment
__init__	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^    def __init__(self, numPoles=1, markov=True, verbose=False,$/;"	m	class:FastCartPoleTask
__init__	tools/pybrain/pybrain/rl/environments/cartpole/renderer.py	/^    def __init__(self):$/;"	m	class:CartPoleRenderer
__init__	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    def __init__(self):$/;"	m	class:AcrobotTask
__init__	tools/pybrain/pybrain/rl/environments/classic/mountaincar.py	/^    def __init__(self):$/;"	m	class:MountainCar
__init__	tools/pybrain/pybrain/rl/environments/classic/xor.py	/^    def __init__(self):$/;"	m	class:XORChainTask
__init__	tools/pybrain/pybrain/rl/environments/classic/xor.py	/^    def __init__(self):$/;"	m	class:XORTask
__init__	tools/pybrain/pybrain/rl/environments/flexcube/environment.py	/^    def __init__(self, render=True, realtime=True, ip="127.0.0.1", port="21560"):$/;"	m	class:FlexCubeEnvironment
__init__	tools/pybrain/pybrain/rl/environments/flexcube/masspoint.py	/^    def __init__(self):$/;"	m	class:MArray
__init__	tools/pybrain/pybrain/rl/environments/flexcube/masspoint.py	/^    def __init__(self):$/;"	m	class:MassPoint
__init__	tools/pybrain/pybrain/rl/environments/flexcube/sensors.py	/^    def __init__(self):$/;"	m	class:defaultSensor
__init__	tools/pybrain/pybrain/rl/environments/flexcube/sensors.py	/^    def __init__(self, sensorList):$/;"	m	class:Sensors
__init__	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^    def __init__(self, env):$/;"	m	class:GrowTask
__init__	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^    def __init__(self, env):$/;"	m	class:JumpTask
__init__	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^    def __init__(self, env):$/;"	m	class:NoRewardTask
__init__	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^    def __init__(self, env):$/;"	m	class:RollingUpTask
__init__	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^    def __init__(self, env):$/;"	m	class:TargetTask
__init__	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^    def __init__(self, env):$/;"	m	class:WalkDirectionTask
__init__	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^    def __init__(self, env):$/;"	m	class:WalkTask
__init__	tools/pybrain/pybrain/rl/environments/flexcube/viewer.py	/^    def __init__(self, servIP="127.0.0.1", ownIP="127.0.0.1", port="21560"):$/;"	m	class:FlexCubeRenderer
__init__	tools/pybrain/pybrain/rl/environments/functions/function.py	/^    def __init__(self, xdim = None, xopt = None, **args):$/;"	m	class:FunctionEnvironment
__init__	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:GallagherGauss101MeFunction
__init__	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:LunacekBiRastriginFunction
__init__	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Schwefel20Function
__init__	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Schwefel_2_13Function
__init__	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    def __init__(self, xdim=1, a=1, xopt=None):$/;"	m	class:RastriginFunction
__init__	tools/pybrain/pybrain/rl/environments/functions/transformations.py	/^    def __init__(self, basef, distance=0.1, offset=None):$/;"	m	class:TranslateFunction
__init__	tools/pybrain/pybrain/rl/environments/functions/transformations.py	/^    def __init__(self, basef, distance=5, penalizationFactor=1.):$/;"	m	class:SoftConstrainedFunction
__init__	tools/pybrain/pybrain/rl/environments/functions/transformations.py	/^    def __init__(self, basef, rotMat=None):$/;"	m	class:RotateFunction
__init__	tools/pybrain/pybrain/rl/environments/functions/transformations.py	/^    def __init__(self, basef,$/;"	m	class:BBOBTransformationFunction
__init__	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:AttractiveSectorFunction
__init__	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:BoundedLinear
__init__	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:ElliFunction
__init__	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:StepElliFunction
__init__	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^    def __init__(self, xdim = 2, xopt = None):$/;"	m	class:RosenbrockFunction
__init__	tools/pybrain/pybrain/rl/environments/graphical.py	/^    def __init__(self):$/;"	m	class:GraphicalEnvironment
__init__	tools/pybrain/pybrain/rl/environments/mazes/maze.py	/^    def __init__(self, topology, goal, **args):$/;"	m	class:Maze
__init__	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze.py	/^    def __init__(self, **args):$/;"	m	class:MazeTask
__init__	tools/pybrain/pybrain/rl/environments/mazes/tasks/pomdp.py	/^    def __init__(self, **args):$/;"	m	class:POMDPTask
__init__	tools/pybrain/pybrain/rl/environments/mazes/tasks/tmaze.py	/^    def __init__(self, **args):$/;"	m	class:TMaze
__init__	tools/pybrain/pybrain/rl/environments/ode/actuators.py	/^    def __init__(self, jointNames, name=None):$/;"	m	class:CopyJointActuator
__init__	tools/pybrain/pybrain/rl/environments/ode/actuators.py	/^    def __init__(self, jointNames, name=None):$/;"	m	class:SpecificJointActuator
__init__	tools/pybrain/pybrain/rl/environments/ode/actuators.py	/^    def __init__(self, name, numValues):$/;"	m	class:Actuator
__init__	tools/pybrain/pybrain/rl/environments/ode/actuators.py	/^    def __init__(self, name='JointActuator'):$/;"	m	class:JointActuator
__init__	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def __init__(self, render=True, realtime=True, ip="127.0.0.1", port="21590", buf='16384'):$/;"	m	class:ODEEnvironment
__init__	tools/pybrain/pybrain/rl/environments/ode/instances/acrobot.py	/^    def __init__(self, renderer=True, realtime=True, ip="127.0.0.1", port="21590", buf='16384'):$/;"	m	class:AcrobotEnvironment
__init__	tools/pybrain/pybrain/rl/environments/ode/instances/ccrl.py	/^    def __init__(self, xodeFile="ccrlGlas.xode", renderer=True, realtime=False, ip="127.0.0.1", port="21590", buf='16384'):$/;"	m	class:CCRLEnvironment
__init__	tools/pybrain/pybrain/rl/environments/ode/instances/johnnie.py	/^    def __init__(self, renderer=True, realtime=False, ip="127.0.0.1", port="21590", buf='16384'):$/;"	m	class:JohnnieEnvironment
__init__	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def __init__(self, bodyName, name='DistToPointSensor', point=(0, 0, 0)):$/;"	m	class:DistToPointSensor
__init__	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def __init__(self, bodyName1, bodyName2, name='BodyDistanceSensor'):$/;"	m	class:BodyDistanceSensor
__init__	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def __init__(self, bodyNames, name=None):$/;"	m	class:SpecificBodyPositionSensor
__init__	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def __init__(self, jointNames, name=None):$/;"	m	class:SpecificJointSensor
__init__	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def __init__(self, jointNames, name=None):$/;"	m	class:SpecificJointVelocitySensor
__init__	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def __init__(self, name, numValues):$/;"	m	class:Sensor
__init__	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def __init__(self, name='BodyPositionSensor'):$/;"	m	class:BodyPositionSensor
__init__	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def __init__(self, name='JointSensor'):$/;"	m	class:JointSensor
__init__	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def __init__(self, name='JointVelocitySensor'):$/;"	m	class:JointVelocitySensor
__init__	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def __init__(self, value):$/;"	m	class:SizeError
__init__	tools/pybrain/pybrain/rl/environments/ode/tasks/acrobot.py	/^    def __init__(self, environment):$/;"	m	class:GradualRewardTask
__init__	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def __init__(self, env):$/;"	m	class:CCRLGlasTask
__init__	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def __init__(self, env):$/;"	m	class:CCRLGlasVarTask
__init__	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def __init__(self, env):$/;"	m	class:CCRLPlateTask
__init__	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def __init__(self, env):$/;"	m	class:CCRLPointTask
__init__	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def __init__(self, env):$/;"	m	class:CCRLPointVarTask
__init__	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def __init__(self, env):$/;"	m	class:CCRLTask
__init__	tools/pybrain/pybrain/rl/environments/ode/tasks/johnnie.py	/^    def __init__(self, env):$/;"	m	class:JohnnieTask
__init__	tools/pybrain/pybrain/rl/environments/ode/tasks/johnnie.py	/^    def __init__(self, env):$/;"	m	class:JumpingTask
__init__	tools/pybrain/pybrain/rl/environments/ode/tasks/johnnie.py	/^    def __init__(self, env):$/;"	m	class:RStandingTask
__init__	tools/pybrain/pybrain/rl/environments/ode/tasks/johnnie.py	/^    def __init__(self, env):$/;"	m	class:StandingTask
__init__	tools/pybrain/pybrain/rl/environments/ode/tasks/johnnie.py	/^    def __init__(self, env):$/;"	m	class:StandingUpTask
__init__	tools/pybrain/pybrain/rl/environments/ode/tools/configgrab.py	/^    def __init__(self, filename, sectionId="", delim=("[", "]")):$/;"	m	class:ConfigGrabber
__init__	tools/pybrain/pybrain/rl/environments/ode/tools/xmltools.py	/^    def __init__(self, name, attr=None):$/;"	m	class:XMLstruct
__init__	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def __init__(self, name, **kwargs):$/;"	m	class:XODEJohnnie
__init__	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def __init__(self, name, **kwargs):$/;"	m	class:XODELSRGlas
__init__	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def __init__(self, name, **kwargs):$/;"	m	class:XODELSRPlate
__init__	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def __init__(self, name, **kwargs):$/;"	m	class:XODELSRTable
__init__	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def __init__(self, name, **kwargs):$/;"	m	class:XODESLR
__init__	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def __init__(self, name, **kwargs):$/;"	m	class:XODEfile
__init__	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def __init__(self, name, **kwargs):$/;"	m	class:XODEfinger
__init__	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def __init__(self, name, **kwargs):$/;"	m	class:XODEhand
__init__	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def __init__(self, name, **kwargs):$/;"	m	class:XODEhandflip
__init__	tools/pybrain/pybrain/rl/environments/ode/viewer.py	/^    def __init__(self, servIP="127.0.0.1", ownIP="127.0.0.1", port="21590", buf="16384"):$/;"	m	class:ODEViewer
__init__	tools/pybrain/pybrain/rl/environments/ode/xode_changes/body.py	/^    def __init__(self, name, parent):$/;"	m	class:Mass
__init__	tools/pybrain/pybrain/rl/environments/ode/xode_changes/body.py	/^    def __init__(self, name, parent, attrs):$/;"	m	class:Body
__init__	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^    def __init__(self, name, parent):$/;"	m	class:Geom
__init__	tools/pybrain/pybrain/rl/environments/renderer.py	/^    def __init__(self):$/;"	m	class:Renderer
__init__	tools/pybrain/pybrain/rl/environments/serverinterface.py	/^    def __init__(self):$/;"	m	class:GraphicalEnvironment
__init__	tools/pybrain/pybrain/rl/environments/shipsteer/northwardtask.py	/^    def __init__(self, env=None, maxsteps=1000):$/;"	m	class:GoNorthwardTask
__init__	tools/pybrain/pybrain/rl/environments/shipsteer/shipsteer.py	/^    def __init__(self, render=True, ip="127.0.0.1", port="21580", numdir=1):$/;"	m	class:ShipSteeringEnvironment
__init__	tools/pybrain/pybrain/rl/environments/shipsteer/viewer.py	/^    def __init__(self, servIP="127.0.0.1", ownIP="127.0.0.1", port="21580"):$/;"	m	class:FlexCubeRenderer
__init__	tools/pybrain/pybrain/rl/environments/simple/environment.py	/^    def __init__(self, dim=1):$/;"	m	class:SimpleEnvironment
__init__	tools/pybrain/pybrain/rl/environments/simple/renderer.py	/^    def __init__(self):$/;"	m	class:SimpleRenderer
__init__	tools/pybrain/pybrain/rl/environments/simple/tasks.py	/^    def __init__(self, environment):$/;"	m	class:MinimizeTask
__init__	tools/pybrain/pybrain/rl/environments/simplerace/simpleracetask.py	/^    def __init__(self):$/;"	m	class:SimpleraceTask
__init__	tools/pybrain/pybrain/rl/environments/simplerace/simpleracetcp.py	/^    def __init__(self, host="127.0.0.1", port=6524):$/;"	m	class:SimpleraceEnvironment
__init__	tools/pybrain/pybrain/rl/environments/task.py	/^    def __init__(self, environment):$/;"	m	class:Task
__init__	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    def __init__(self, size, suicideenabled=True):$/;"	m	class:CaptureGame
__init__	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/captureplayer.py	/^    def __init__(self, game, color = CaptureGame.BLACK, **args):$/;"	m	class:CapturePlayer
__init__	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/clientwrapper.py	/^    def __init__(self, game, color=CaptureGame.BLACK, player='AtariGreedy', **args):$/;"	m	class:ClientCapturePlayer
__init__	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/moduledecision.py	/^    def __init__(self, module, *args, **kwargs):$/;"	m	class:ModuleDecidingPlayer
__init__	tools/pybrain/pybrain/rl/environments/twoplayergames/gomoku.py	/^    def __init__(self, size):$/;"	m	class:GomokuGame
__init__	tools/pybrain/pybrain/rl/environments/twoplayergames/gomokuplayers/gomokuplayer.py	/^    def __init__(self, game, color = GomokuGame.BLACK, **args):$/;"	m	class:GomokuPlayer
__init__	tools/pybrain/pybrain/rl/environments/twoplayergames/gomokuplayers/moduledecision.py	/^    def __init__(self, module, *args, **kwargs):$/;"	m	class:ModuleDecidingPlayer
__init__	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^    def __init__(self, size, opponent = None, **args):$/;"	m	class:CaptureGameTask
__init__	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^    def __init__(self, size, opponent = None, **args):$/;"	m	class:GomokuTask
__init__	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    def __init__(self, *args, **kargs):$/;"	m	class:HandicapCaptureTask
__init__	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/pentetask.py	/^    def __init__(self, size, opponent = None, **args):$/;"	m	class:PenteTask
__init__	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    def __init__(self, size, **args):$/;"	m	class:RelativeGomokuTask
__init__	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    def __init__(self, size, **args):$/;"	m	class:RelativeCaptureTask
__init__	tools/pybrain/pybrain/rl/experiments/episodic.py	/^    def __init__(self, task, agent):$/;"	m	class:EpisodicExperiment
__init__	tools/pybrain/pybrain/rl/experiments/experiment.py	/^    def __init__(self, task, agent):$/;"	m	class:Experiment
__init__	tools/pybrain/pybrain/rl/experiments/tournament.py	/^    def __init__(self, env, agents):$/;"	m	class:Tournament
__init__	tools/pybrain/pybrain/rl/explorers/continuous/normal.py	/^    def __init__(self, dim, sigma=0.):$/;"	m	class:NormalExplorer
__init__	tools/pybrain/pybrain/rl/explorers/continuous/sde.py	/^    def __init__(self, statedim, actiondim, sigma= -2.):$/;"	m	class:StateDependentExplorer
__init__	tools/pybrain/pybrain/rl/explorers/discrete/boltzmann.py	/^    def __init__(self, tau = 2., decay = 0.9995):$/;"	m	class:BoltzmannExplorer
__init__	tools/pybrain/pybrain/rl/explorers/discrete/discrete.py	/^    def __init__(self):$/;"	m	class:DiscreteExplorer
__init__	tools/pybrain/pybrain/rl/explorers/discrete/discretesde.py	/^    def __init__(self, epsilon = 0.2, decay = 0.9998):$/;"	m	class:DiscreteStateDependentExplorer
__init__	tools/pybrain/pybrain/rl/explorers/discrete/egreedy.py	/^    def __init__(self, epsilon = 0.3, decay = 0.9999):$/;"	m	class:EpsilonGreedyExplorer
__init__	tools/pybrain/pybrain/rl/learners/directsearch/gpomdp.py	/^    def __init__(self):$/;"	m	class:GPOMDP
__init__	tools/pybrain/pybrain/rl/learners/directsearch/policygradient.py	/^    def __init__(self):$/;"	m	class:PolicyGradientLearner
__init__	tools/pybrain/pybrain/rl/learners/directsearch/policygradient.py	/^    def __init__(self, dim):$/;"	m	class:LoglhDataSet
__init__	tools/pybrain/pybrain/rl/learners/directsearch/rwr.py	/^    def __init__(self, net, task, valueNetwork=None, **args):$/;"	m	class:RWR
__init__	tools/pybrain/pybrain/rl/learners/valuebased/interface.py	/^    def __init__(self, dimState, numActions, name=None):$/;"	m	class:ActionValueNetwork
__init__	tools/pybrain/pybrain/rl/learners/valuebased/interface.py	/^    def __init__(self, numStates, numActions, name=None):$/;"	m	class:ActionValueTable
__init__	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    def __init__(self, num_actions, num_features, **kwargs):$/;"	m	class:LinearFALearner
__init__	tools/pybrain/pybrain/rl/learners/valuebased/nfq.py	/^    def __init__(self, maxEpochs=20):$/;"	m	class:NFQ
__init__	tools/pybrain/pybrain/rl/learners/valuebased/q.py	/^    def __init__(self, alpha=0.5, gamma=0.99):$/;"	m	class:Q
__init__	tools/pybrain/pybrain/rl/learners/valuebased/qlambda.py	/^    def __init__(self, alpha=0.5, gamma=0.99, qlambda=0.9):$/;"	m	class:QLambda
__init__	tools/pybrain/pybrain/rl/learners/valuebased/sarsa.py	/^    def __init__(self, alpha=0.5, gamma=0.99):$/;"	m	class:SARSA
__init__	tools/pybrain/pybrain/rl/learners/valuebased/valuebased.py	/^    def __init__(self):$/;"	m	class:ValueBasedLearner
__init__	tools/pybrain/pybrain/structure/connections/connection.py	/^    def __init__(self, inmod, outmod, name = None,$/;"	m	class:Connection
__init__	tools/pybrain/pybrain/structure/connections/full.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:FullConnection
__init__	tools/pybrain/pybrain/structure/connections/fullnotself.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:FullNotSelfConnection
__init__	tools/pybrain/pybrain/structure/connections/identity.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:IdentityConnection
__init__	tools/pybrain/pybrain/structure/connections/linear.py	/^    def __init__(self, inmod, outmod, name=None,$/;"	m	class:LinearConnection
__init__	tools/pybrain/pybrain/structure/connections/permutation.py	/^    def __init__(self, inmod, outmod, permutation, blocksize, *args, **kwargs):$/;"	m	class:PermutationConnection
__init__	tools/pybrain/pybrain/structure/connections/shared.py	/^    def __init__(self, mother, *args, **kwargs):$/;"	m	class:SharedConnection
__init__	tools/pybrain/pybrain/structure/connections/shared.py	/^    def __init__(self, mother, inmod, outmod, **kwargs):$/;"	m	class:SharedSubsamplingConnection
__init__	tools/pybrain/pybrain/structure/connections/shared.py	/^    def __init__(self, nbparams, **args):$/;"	m	class:MotherConnection
__init__	tools/pybrain/pybrain/structure/connections/subsampling.py	/^    def __init__(self, inmod, outmod, name=None,$/;"	m	class:SubsamplingConnection
__init__	tools/pybrain/pybrain/structure/evolvables/cheaplycopiable.py	/^    def __init__(self, module):$/;"	m	class:CheaplyCopiable
__init__	tools/pybrain/pybrain/structure/evolvables/maskedparameters.py	/^    def __init__(self, pcontainer, **args):$/;"	m	class:MaskedParameters
__init__	tools/pybrain/pybrain/structure/evolvables/topology.py	/^    def __init__(self, pcontainer, **args):$/;"	m	class:TopologyEvolvable
__init__	tools/pybrain/pybrain/structure/modulemesh.py	/^    def __init__(self, constructor, dimensions, name = None, baserename = False):$/;"	m	class:ModuleMesh
__init__	tools/pybrain/pybrain/structure/modules/biasunit.py	/^    def __init__(self, name=None):$/;"	m	class:BiasUnit
__init__	tools/pybrain/pybrain/structure/modules/evolinonetwork.py	/^    def __init__(self, outdim, hiddim=15):$/;"	m	class:EvolinoNetwork
__init__	tools/pybrain/pybrain/structure/modules/gate.py	/^    def __init__(self, dim, name=None):$/;"	m	class:DoubleGateLayer
__init__	tools/pybrain/pybrain/structure/modules/gate.py	/^    def __init__(self, dim, name=None):$/;"	m	class:GateLayer
__init__	tools/pybrain/pybrain/structure/modules/gate.py	/^    def __init__(self, dim, name=None):$/;"	m	class:MultiplicationLayer
__init__	tools/pybrain/pybrain/structure/modules/gate.py	/^    def __init__(self, dim, name=None):$/;"	m	class:SwitchLayer
__init__	tools/pybrain/pybrain/structure/modules/gaussianlayer.py	/^    def __init__(self, dim, name=None):$/;"	m	class:GaussianLayer
__init__	tools/pybrain/pybrain/structure/modules/kohonen.py	/^    def __init__(self, dim, nNeurons, name=None, outputFullMap=False):$/;"	m	class:KohonenMap
__init__	tools/pybrain/pybrain/structure/modules/lstm.py	/^    def __init__(self, dim, peepholes = False, name = None):$/;"	m	class:LSTMLayer
__init__	tools/pybrain/pybrain/structure/modules/mdlstm.py	/^    def __init__(self, dim, dimensions=1, peepholes=False, name=None):$/;"	m	class:MDLSTMLayer
__init__	tools/pybrain/pybrain/structure/modules/mdrnnlayer.py	/^    def __init__(self, timedim, shape,$/;"	m	class:MdrnnLayer
__init__	tools/pybrain/pybrain/structure/modules/module.py	/^    def __init__(self, indim, outdim, name=None, **args):$/;"	m	class:Module
__init__	tools/pybrain/pybrain/structure/modules/neuronlayer.py	/^    def __init__(self, dim, name=None):$/;"	m	class:NeuronLayer
__init__	tools/pybrain/pybrain/structure/modules/softmax.py	/^    def __init__(self, size, slicelength):$/;"	m	class:PartialSoftmaxLayer
__init__	tools/pybrain/pybrain/structure/modules/statedependentlayer.py	/^    def __init__(self, dim, module, name=None, onesigma=True):$/;"	m	class:StateDependentLayer
__init__	tools/pybrain/pybrain/structure/modules/svmunit.py	/^    def __init__(self, indim=0, outdim=0, model=None):$/;"	m	class:SVMUnit
__init__	tools/pybrain/pybrain/structure/modules/table.py	/^    def __init__(self, numRows, numColumns, name=None):$/;"	m	class:Table
__init__	tools/pybrain/pybrain/structure/moduleslice.py	/^    def __init__(self, base, inSliceFrom = 0, inSliceTo = None, outSliceFrom = 0, outSliceTo = None):$/;"	m	class:ModuleSlice
__init__	tools/pybrain/pybrain/structure/networks/bidirectional.py	/^    def __init__(self, predefined = None, **kwargs):$/;"	m	class:BidirectionalNetwork
__init__	tools/pybrain/pybrain/structure/networks/borderswiping.py	/^    def __init__(self, inmesh = None, hiddenmesh = None, outmesh = None, **args):$/;"	m	class:BorderSwipingNetwork
__init__	tools/pybrain/pybrain/structure/networks/convolutional.py	/^    def __init__(self, inputdim, insize, convSize, numFeatureMaps, **args):$/;"	m	class:SimpleConvolutionalNetwork
__init__	tools/pybrain/pybrain/structure/networks/custom/capturegame.py	/^    def __init__(self, **args):$/;"	m	class:CaptureGameNetwork
__init__	tools/pybrain/pybrain/structure/networks/custom/convboard.py	/^    def __init__(self, boardSize, convSize, numFeatureMaps, **args):$/;"	m	class:ConvolutionalBoardNetwork
__init__	tools/pybrain/pybrain/structure/networks/feedforward.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:FeedForwardNetwork
__init__	tools/pybrain/pybrain/structure/networks/feedforward.py	/^    def __init__(self, name=None, **args):$/;"	m	class:FeedForwardNetworkComponent
__init__	tools/pybrain/pybrain/structure/networks/mdrnn.py	/^    def __init__(self, timedim, shape,$/;"	m	class:_Mdrnn
__init__	tools/pybrain/pybrain/structure/networks/multidimensional.py	/^    def __init__(self, dims, **args):$/;"	m	class:MultiDimensionalRNN
__init__	tools/pybrain/pybrain/structure/networks/network.py	/^    def __init__(self, name=None, **args):$/;"	m	class:Network
__init__	tools/pybrain/pybrain/structure/networks/rbm.py	/^    def __init__(self, net):$/;"	m	class:Rbm
__init__	tools/pybrain/pybrain/structure/networks/recurrent.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:RecurrentNetwork
__init__	tools/pybrain/pybrain/structure/networks/recurrent.py	/^    def __init__(self, forget=None, name=None, *args, **kwargs):$/;"	m	class:RecurrentNetworkComponent
__init__	tools/pybrain/pybrain/structure/networks/swiping.py	/^    def __init__(self, inmesh=None, hiddenmesh=None, outmesh=None, predefined=None, **args):$/;"	m	class:SwipingNetwork
__init__	tools/pybrain/pybrain/structure/parametercontainer.py	/^    def __init__(self, paramdim = 0, **args):$/;"	m	class:ParameterContainer
__init__	tools/pybrain/pybrain/supervised/evolino/filter.py	/^    def __init__(self):$/;"	m	class:EvolinoSelection
__init__	tools/pybrain/pybrain/supervised/evolino/filter.py	/^    def __init__(self):$/;"	m	class:EvolinoSubSelection
__init__	tools/pybrain/pybrain/supervised/evolino/filter.py	/^    def __init__(self, **kwargs):$/;"	m	class:EvolinoBurstMutation
__init__	tools/pybrain/pybrain/supervised/evolino/filter.py	/^    def __init__(self, **kwargs):$/;"	m	class:EvolinoReproduction
__init__	tools/pybrain/pybrain/supervised/evolino/filter.py	/^    def __init__(self, **kwargs):$/;"	m	class:EvolinoSubMutation
__init__	tools/pybrain/pybrain/supervised/evolino/filter.py	/^    def __init__(self, **kwargs):$/;"	m	class:EvolinoSubReproduction
__init__	tools/pybrain/pybrain/supervised/evolino/filter.py	/^    def __init__(self, evolino_network, dataset, **kwargs):$/;"	m	class:EvolinoEvaluation
__init__	tools/pybrain/pybrain/supervised/evolino/gfilter.py	/^    def __init__(self):$/;"	m	class:Filter
__init__	tools/pybrain/pybrain/supervised/evolino/gfilter.py	/^    def __init__(self):$/;"	m	class:SimpleGenomeManipulation
__init__	tools/pybrain/pybrain/supervised/evolino/gfilter.py	/^    def __init__(self):$/;"	m	class:SimpleMutation
__init__	tools/pybrain/pybrain/supervised/evolino/gfilter.py	/^    def __init__(self, minval=0., maxval=1.):$/;"	m	class:Randomization
__init__	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^    def __init__(self):$/;"	m	class:SimplePopulation
__init__	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^    def __init__(self):pass$/;"	m	class:Population
__init__	tools/pybrain/pybrain/supervised/evolino/individual.py	/^    def __init__(self, genome):$/;"	m	class:EvolinoSubIndividual
__init__	tools/pybrain/pybrain/supervised/evolino/individual.py	/^    def __init__(self, sub_individuals):$/;"	m	class:EvolinoIndividual
__init__	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def __init__(self, indim, outdim, hiddim=6):$/;"	m	class:EvolinoNetwork
__init__	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def __init__(self, network):$/;"	m	class:NetworkWrapper
__init__	tools/pybrain/pybrain/supervised/evolino/population.py	/^    def __init__(self, chromosome, maxNIndividuals, valueInitializer=Randomization(-0.1, 0.1), **kwargs):$/;"	m	class:EvolinoSubPopulation
__init__	tools/pybrain/pybrain/supervised/evolino/population.py	/^    def __init__(self, individual, subPopulationSize, nCombinations=1, valueInitializer=Randomization(-0.1, 0.1), **kwargs):$/;"	m	class:EvolinoPopulation
__init__	tools/pybrain/pybrain/supervised/evolino/variate.py	/^    def __init__(self, min_val=0., max_val=1.):$/;"	m	class:UniformVariate
__init__	tools/pybrain/pybrain/supervised/evolino/variate.py	/^    def __init__(self, x0=0., alpha=1.):$/;"	m	class:CauchyVariate
__init__	tools/pybrain/pybrain/supervised/evolino/variate.py	/^    def __init__(self, x0=0., alpha=1.):$/;"	m	class:GaussianVariate
__init__	tools/pybrain/pybrain/supervised/knn/lsh/minhash.py	/^    def __init__(self, dim, nPermutations):$/;"	m	class:MinHash
__init__	tools/pybrain/pybrain/supervised/knn/lsh/nearoptimal.py	/^    def __init__(self, dim, omega=4, prob=0.8):$/;"	m	class:MultiDimHash
__init__	tools/pybrain/pybrain/supervised/trainers/backprop.py	/^    def __init__(self, module, dataset=None, learningrate=0.01, lrdecay=1.0,$/;"	m	class:BackpropTrainer
__init__	tools/pybrain/pybrain/supervised/trainers/evolino.py	/^    def __init__(self, evolino_network, dataset, **kwargs):$/;"	m	class:EvolinoTrainer
__init__	tools/pybrain/pybrain/supervised/trainers/rprop.py	/^    def __init__(self, module, etaminus=0.5, etaplus=1.2, deltamin=1.0e-6, deltamax=5.0, delta0=0.1, **kwargs):$/;"	m	class:RPropMinusTrainer
__init__	tools/pybrain/pybrain/supervised/trainers/svmtrainer.py	/^    def __init__(self, problem, targets, cmin, cmax, cstep=None, crossval=5,$/;"	m	class:GridSearch
__init__	tools/pybrain/pybrain/supervised/trainers/svmtrainer.py	/^    def __init__(self, svmunit, dataset, modelfile=None, plot=False):$/;"	m	class:SVMTrainer
__init__	tools/pybrain/pybrain/supervised/trainers/trainer.py	/^    def __init__(self, module):$/;"	m	class:Trainer
__init__	tools/pybrain/pybrain/tests/optimizationtest.py	/^    def __init__(self, x): self.x = x$/;"	m	class:SimpleEvo
__init__	tools/pybrain/pybrain/tests/unittests/tools/test_rlgluebridge.py	/^    def __init__(self): pass$/;"	m	class:PseudoPybrainAgent
__init__	tools/pybrain/pybrain/tools/aptativeresampling.py	/^    def __init__(self, f, batchsize, update_factor=1.5, threshold=0.2, max_resampling=None):$/;"	m	class:AdaptiveResampler
__init__	tools/pybrain/pybrain/tools/benchmark.py	/^    def __init__(self):$/;"	m	class:BenchmarkDataSet
__init__	tools/pybrain/pybrain/tools/customxml/handling.py	/^    def __init__(self, filename, newfile):$/;"	m	class:XMLHandling
__init__	tools/pybrain/pybrain/tools/datasettools.py	/^    def __init__(self, fname=None, meanstd=False):$/;"	m	class:DataSetNormalizer
__init__	tools/pybrain/pybrain/tools/example_tools.py	/^    def __init__(self, batch = 2, prnts = 1, kind = "optimizer"):$/;"	m	class:ExTools
__init__	tools/pybrain/pybrain/tools/gridsearch.py	/^    def __init__(self, min_params, max_params, n_iterations=5, **kwargs):$/;"	m	class:GridSearchDOE
__init__	tools/pybrain/pybrain/tools/gridsearch.py	/^    def __init__(self, min_params, max_params, n_steps=7, **kwargs):$/;"	m	class:GridSearch2D
__init__	tools/pybrain/pybrain/tools/gridsearch.py	/^    def __init__(self, trainer, dataset, min_params=[-5, -15], max_params=[15, 3], n_iterations=5, **kwargs):$/;"	m	class:GridSearchDOECostGamma
__init__	tools/pybrain/pybrain/tools/gridsearch.py	/^    def __init__(self, trainer, dataset, min_params=[-5, -15], max_params=[15, 3], n_steps=7, **kwargs):$/;"	m	class:GridSearchCostGamma
__init__	tools/pybrain/pybrain/tools/kwargsprocessor.py	/^        def __init__(self, **kwargs):$/;"	m	class:KWArgsProcessor.C
__init__	tools/pybrain/pybrain/tools/kwargsprocessor.py	/^    def __init__(self, name, **kwargs):$/;"	m	class:KWArgDsc
__init__	tools/pybrain/pybrain/tools/kwargsprocessor.py	/^    def __init__(self, obj, kwargs):$/;"	m	class:KWArgsProcessor
__init__	tools/pybrain/pybrain/tools/mixtures/mixtureofgaussian.py	/^    def __init__(self, typ, numOGaus=10, alphaA=0.02, alphaM=0.02, alphaS=0.02):$/;"	m	class:MixtureOfGaussians
__init__	tools/pybrain/pybrain/tools/mixtures/mogpuremax.py	/^    def __init__(self, numOGaus=10, alphaA=0.02, alphaM=0.02, alphaS=0.02):$/;"	m	class:MixtureOfGaussians
__init__	tools/pybrain/pybrain/tools/networking/udpconnection.py	/^    def __init__(self, ip="127.0.0.1", port="21560", buf="1024"):$/;"	m	class:UDPServer
__init__	tools/pybrain/pybrain/tools/networking/udpconnection.py	/^    def __init__(self, servIP="127.0.0.1", ownIP="127.0.0.1", port="21560", buf="1024"):$/;"	m	class:UDPClient
__init__	tools/pybrain/pybrain/tools/neuralnets.py	/^    def __init__(self, DS, **kwargs):$/;"	m	class:NNclassifier
__init__	tools/pybrain/pybrain/tools/neuralnets.py	/^    def __init__(self, DS, **kwargs):$/;"	m	class:NNtools
__init__	tools/pybrain/pybrain/tools/plotting/ciaoplot.py	/^    def __init__(self, evaluator, hof1, hof2, **args):$/;"	m	class:CiaoPlot
__init__	tools/pybrain/pybrain/tools/plotting/colormaps.py	/^    def __init__(self, mat, cmap=None, pixelspervalue=20, minvalue=None, maxvalue=None):$/;"	m	class:ColorMap
__init__	tools/pybrain/pybrain/tools/plotting/fitnesslandscapes.py	/^    def __init__(self, f, xmin= -1, xmax=1, ymin= -1, ymax=1, precision=50, newfig=True,$/;"	m	class:FitnessPlotter
__init__	tools/pybrain/pybrain/tools/plotting/multiline.py	/^    def __init__(self, maxLines=1, autoscale=0.0, **kwargs):$/;"	m	class:MultilinePlotter
__init__	tools/pybrain/pybrain/tools/rankingfunctions.py	/^    def __init__(self, **args):$/;"	m	class:RankingFunction
__init__	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    def __init__(self, agent):$/;"	m	class:BenchmarkingAgent
__init__	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    def __init__(self, agents, port=None):$/;"	m	class:RlCompBenchmark
__init__	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    def __init__(self, klass, *args, **kwargs):$/;"	m	class:RlglueAgentAdapter
__init__	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    def __init__(self, path, port=None, autoreconnect=None):$/;"	m	class:RLCExperiment
__init__	tools/pybrain/pybrain/tools/svmdata.py	/^    def __init__(self, filename=None):$/;"	m	class:SVMData
__init__	tools/pybrain/pybrain/tools/validation.py	/^    def __init__(self, trainer, dataset, n_folds=5, valfunc=ModuleValidator.classificationPerformance, **kwargs):$/;"	m	class:CrossValidator
__init__	tools/pybrain/pybrain/unsupervised/trainers/deepbelief.py	/^    def __init__(self, net, dataset, epochs=50,$/;"	m	class:DeepBeliefTrainer
__init__	tools/pybrain/pybrain/unsupervised/trainers/rbm.py	/^    def __init__(self):$/;"	m	class:RbmGibbsTrainerConfig
__init__	tools/pybrain/pybrain/unsupervised/trainers/rbm.py	/^    def __init__(self, rbm, dataset, cfg=None):$/;"	m	class:RbmGaussTrainer
__init__	tools/pybrain/pybrain/unsupervised/trainers/rbm.py	/^    def __init__(self, rbm, dataset, cfg=None):$/;"	m	class:RbmGibbsTrainer
__iter__	pybrain/datasets/dataset.py	/^    def __iter__(self):$/;"	m	class:DataSet	file:
__iter__	pybrain/datasets/sequential.py	/^    def __iter__(self):$/;"	m	class:SequentialDataSet	file:
__iter__	pybrain/rl/environments/ode/tools/xmltools.py	/^    def __iter__(self):$/;"	m	class:XMLstruct	file:
__iter__	pybrain/structure/modulemesh.py	/^    def __iter__(self):$/;"	m	class:ModuleMesh	file:
__iter__	tools/pybrain/pybrain/datasets/dataset.py	/^    def __iter__(self):$/;"	m	class:DataSet	file:
__iter__	tools/pybrain/pybrain/datasets/sequential.py	/^    def __iter__(self):$/;"	m	class:SequentialDataSet	file:
__iter__	tools/pybrain/pybrain/rl/environments/ode/tools/xmltools.py	/^    def __iter__(self):$/;"	m	class:XMLstruct	file:
__iter__	tools/pybrain/pybrain/structure/modulemesh.py	/^    def __iter__(self):$/;"	m	class:ModuleMesh	file:
__len__	pybrain/datasets/dataset.py	/^    def __len__(self):$/;"	m	class:DataSet	file:
__len__	pybrain/structure/parametercontainer.py	/^    def __len__(self):$/;"	m	class:ParameterContainer	file:
__len__	tools/pybrain/pybrain/datasets/dataset.py	/^    def __len__(self):$/;"	m	class:DataSet	file:
__len__	tools/pybrain/pybrain/structure/parametercontainer.py	/^    def __len__(self):$/;"	m	class:ParameterContainer	file:
__offset	pybrain/structure/networks/network.py	/^    __offset = 0$/;"	v	class:Network
__offset	tools/pybrain/pybrain/structure/networks/network.py	/^    __offset = 0$/;"	v	class:Network
__reduce__	pybrain/datasets/classification.py	/^    def __reduce__(self):$/;"	m	class:ClassificationDataSet	file:
__reduce__	pybrain/datasets/dataset.py	/^    def __reduce__(self):$/;"	m	class:DataSet	file:
__reduce__	pybrain/datasets/reinforcement.py	/^    def __reduce__(self):$/;"	m	class:ReinforcementDataSet	file:
__reduce__	pybrain/datasets/supervised.py	/^    def __reduce__(self):$/;"	m	class:SupervisedDataSet	file:
__reduce__	pybrain/datasets/unsupervised.py	/^    def __reduce__(self):$/;"	m	class:UnsupervisedDataSet	file:
__reduce__	tools/pybrain/pybrain/datasets/classification.py	/^    def __reduce__(self):$/;"	m	class:ClassificationDataSet	file:
__reduce__	tools/pybrain/pybrain/datasets/dataset.py	/^    def __reduce__(self):$/;"	m	class:DataSet	file:
__reduce__	tools/pybrain/pybrain/datasets/reinforcement.py	/^    def __reduce__(self):$/;"	m	class:ReinforcementDataSet	file:
__reduce__	tools/pybrain/pybrain/datasets/supervised.py	/^    def __reduce__(self):$/;"	m	class:SupervisedDataSet	file:
__reduce__	tools/pybrain/pybrain/datasets/unsupervised.py	/^    def __reduce__(self):$/;"	m	class:UnsupervisedDataSet	file:
__repr__	pybrain/structure/connections/connection.py	/^    def __repr__(self):$/;"	m	class:Connection	file:
__repr__	pybrain/tests/optimizationtest.py	/^    def __repr__(self):     return '--%.3f--' % self.x$/;"	m	class:SimpleEvo	file:
__repr__	pybrain/utilities.py	/^    def __repr__(self):$/;"	m	class:Named	file:
__repr__	tools/pybrain/pybrain/structure/connections/connection.py	/^    def __repr__(self):$/;"	m	class:Connection	file:
__repr__	tools/pybrain/pybrain/tests/optimizationtest.py	/^    def __repr__(self):     return '--%.3f--' % self.x$/;"	m	class:SimpleEvo	file:
__repr__	tools/pybrain/pybrain/utilities.py	/^    def __repr__(self):$/;"	m	class:Named	file:
__setOffset	pybrain/structure/networks/network.py	/^    def __setOffset(self, x):$/;"	m	class:Network	file:
__setOffset	tools/pybrain/pybrain/structure/networks/network.py	/^    def __setOffset(self, x):$/;"	m	class:Network	file:
__setPermutations	pybrain/supervised/knn/lsh/minhash.py	/^    def __setPermutations(self, permutations):$/;"	m	class:MinHash	file:
__setPermutations	tools/pybrain/pybrain/supervised/knn/lsh/minhash.py	/^    def __setPermutations(self, permutations):$/;"	m	class:MinHash	file:
__setattribute__	pybrain/tools/rlgluebridge.py	/^    def __setattribute__(self, key, value):$/;"	m	class:BenchmarkingAgent	file:
__setattribute__	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    def __setattribute__(self, key, value):$/;"	m	class:BenchmarkingAgent	file:
__setstate__	pybrain/tests/unittests/test_utilities.py	/^    def __setstate__(self, dct):$/;"	m	class:P	file:
__setstate__	tools/pybrain/pybrain/tests/unittests/test_utilities.py	/^    def __setstate__(self, dct):$/;"	m	class:P	file:
__single	pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^    __single = None$/;"	v	class:FastCartPoleTask
__single	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^    __single = None$/;"	v	class:FastCartPoleTask
__str__	pybrain/datasets/dataset.py	/^    def __str__(self):$/;"	m	class:DataSet	file:
__str__	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def __str__(self):$/;"	m	class:Coevolution	file:
__str__	pybrain/optimization/populationbased/coevolution/competitivecoevolution.py	/^    def __str__(self):$/;"	m	class:CompetitiveCoevolution	file:
__str__	pybrain/optimization/populationbased/coevolution/multipopulationcoevolution.py	/^    def __str__(self):$/;"	m	class:MultiPopulationCoevolution	file:
__str__	pybrain/optimization/populationbased/es.py	/^    def __str__(self):$/;"	m	class:ES	file:
__str__	pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^    def __str__(self):$/;"	m	class:FastCartPoleTask	file:
__str__	pybrain/rl/environments/mazes/maze.py	/^    def __str__(self):$/;"	m	class:Maze	file:
__str__	pybrain/rl/environments/mazes/polarmaze.py	/^    def __str__(self):$/;"	m	class:PolarMaze	file:
__str__	pybrain/rl/environments/mazes/tasks/maze.py	/^    def __str__(self):$/;"	m	class:MazeTask	file:
__str__	pybrain/rl/environments/ode/sensors.py	/^    def __str__(self):$/;"	m	class:SizeError	file:
__str__	pybrain/rl/environments/twoplayergames/capturegame.py	/^    def __str__(self):$/;"	m	class:CaptureGame	file:
__str__	pybrain/rl/environments/twoplayergames/gomoku.py	/^    def __str__(self):$/;"	m	class:GomokuGame	file:
__str__	pybrain/rl/environments/twoplayergames/pente.py	/^    def __str__(self):$/;"	m	class:PenteGame	file:
__str__	pybrain/rl/experiments/tournament.py	/^    def __str__(self):$/;"	m	class:Tournament	file:
__str__	pybrain/structure/networks/network.py	/^    def __str__(self):$/;"	m	class:Network	file:
__str__	pybrain/structure/networks/recurrent.py	/^    def __str__(self):$/;"	m	class:RecurrentNetworkComponent	file:
__str__	pybrain/tools/kwargsprocessor.py	/^        def __str__(self):$/;"	m	class:KWArgsProcessor.C	file:
__str__	tools/pybrain/pybrain/datasets/dataset.py	/^    def __str__(self):$/;"	m	class:DataSet	file:
__str__	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def __str__(self):$/;"	m	class:Coevolution	file:
__str__	tools/pybrain/pybrain/optimization/populationbased/coevolution/competitivecoevolution.py	/^    def __str__(self):$/;"	m	class:CompetitiveCoevolution	file:
__str__	tools/pybrain/pybrain/optimization/populationbased/coevolution/multipopulationcoevolution.py	/^    def __str__(self):$/;"	m	class:MultiPopulationCoevolution	file:
__str__	tools/pybrain/pybrain/optimization/populationbased/es.py	/^    def __str__(self):$/;"	m	class:ES	file:
__str__	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^    def __str__(self):$/;"	m	class:FastCartPoleTask	file:
__str__	tools/pybrain/pybrain/rl/environments/mazes/maze.py	/^    def __str__(self):$/;"	m	class:Maze	file:
__str__	tools/pybrain/pybrain/rl/environments/mazes/polarmaze.py	/^    def __str__(self):$/;"	m	class:PolarMaze	file:
__str__	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze.py	/^    def __str__(self):$/;"	m	class:MazeTask	file:
__str__	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def __str__(self):$/;"	m	class:SizeError	file:
__str__	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    def __str__(self):$/;"	m	class:CaptureGame	file:
__str__	tools/pybrain/pybrain/rl/environments/twoplayergames/gomoku.py	/^    def __str__(self):$/;"	m	class:GomokuGame	file:
__str__	tools/pybrain/pybrain/rl/environments/twoplayergames/pente.py	/^    def __str__(self):$/;"	m	class:PenteGame	file:
__str__	tools/pybrain/pybrain/rl/experiments/tournament.py	/^    def __str__(self):$/;"	m	class:Tournament	file:
__str__	tools/pybrain/pybrain/structure/networks/network.py	/^    def __str__(self):$/;"	m	class:Network	file:
__str__	tools/pybrain/pybrain/structure/networks/recurrent.py	/^    def __str__(self):$/;"	m	class:RecurrentNetworkComponent	file:
__str__	tools/pybrain/pybrain/tools/kwargsprocessor.py	/^        def __str__(self):$/;"	m	class:KWArgsProcessor.C	file:
__version__	pybrain/datasets/unsupervised.py	/^__version__ = '$Id$'$/;"	v
__version__	pybrain/structure/connections/permutation.py	/^__version__ = '$Id$'$/;"	v
__version__	pybrain/structure/modules/gate.py	/^__version__ = '$Id$'$/;"	v
__version__	pybrain/structure/modules/svmunit.py	/^__version__ = '$Id: exampleRNN.py 1503 2008-09-13 15:25:06Z bayerj $'$/;"	v
__version__	pybrain/structure/networks/mdrnn.py	/^__version__ = '$Id$'$/;"	v
__version__	pybrain/structure/networks/rbm.py	/^__version__ = '$Id$'$/;"	v
__version__	pybrain/supervised/knn/lsh/minhash.py	/^__version__ = '$Id$'$/;"	v
__version__	pybrain/supervised/trainers/trainer.py	/^__version__ = '$Id$'$/;"	v
__version__	pybrain/tests/auxiliary.py	/^__version__ = '$Id$'$/;"	v
__version__	pybrain/tests/runtests.py	/^__version__ = '$Id$'$/;"	v
__version__	pybrain/tests/testsuites.py	/^__version__ = '$Id$'$/;"	v
__version__	pybrain/tests/unittests/structure/networks/_test_rbm.py	/^__version__ = '$Id$'$/;"	v
__version__	pybrain/tools/neuralnets.py	/^__version__ = "$Id$"$/;"	v
__version__	pybrain/unsupervised/trainers/deepbelief.py	/^__version__ = '$Id$'$/;"	v
__version__	tools/pybrain/docs/code2tut.py	/^__version__ = "$Id$"$/;"	v
__version__	tools/pybrain/examples/rl/environments/cartpole/cart_pgpe.py	/^__version__ = '$Id$' $/;"	v
__version__	tools/pybrain/examples/rl/environments/cartpole/cart_reinf.py	/^__version__ = '$Id$' $/;"	v
__version__	tools/pybrain/examples/rl/environments/flexcube/flexcube_pgpe.py	/^__version__ = '$Id$' $/;"	v
__version__	tools/pybrain/examples/rl/environments/flexcube/flexcube_spsa.py	/^__version__ = '$Id$' $/;"	v
__version__	tools/pybrain/examples/rl/environments/ode/acrobot_fd.py	/^__version__ = '$Id$' $/;"	v
__version__	tools/pybrain/examples/rl/environments/ode/acrobot_pgpe.py	/^__version__ = '$Id$' $/;"	v
__version__	tools/pybrain/examples/rl/environments/ode/ccrl_glass_pgpe.py	/^__version__ = '$Id$' $/;"	v
__version__	tools/pybrain/examples/rl/environments/ode/ccrl_plate_pgpe.py	/^__version__ = '$Id$' $/;"	v
__version__	tools/pybrain/examples/rl/environments/ode/johnnie_pgpe.py	/^__version__ = '$Id$' $/;"	v
__version__	tools/pybrain/examples/rl/environments/ode/johnnie_reinforce.py	/^__version__ = '$Id$' $/;"	v
__version__	tools/pybrain/examples/rl/environments/shipsteer/shipbench_pgpe.py	/^__version__ = '$Id$' $/;"	v
__version__	tools/pybrain/examples/rl/environments/shipsteer/shipbench_sde.py	/^__version__ = '$Id$'$/;"	v
__version__	tools/pybrain/examples/supervised/neuralnets+svm/datasets/datagenerator.py	/^__version__ = '$Id$'$/;"	v
__version__	tools/pybrain/examples/supervised/neuralnets+svm/example_fnn.py	/^__version__ = '$Id$'$/;"	v
__version__	tools/pybrain/examples/supervised/neuralnets+svm/example_rnn.py	/^__version__ = '$Id$'$/;"	v
__version__	tools/pybrain/examples/supervised/neuralnets+svm/example_svm.py	/^__version__ = '$Id$'$/;"	v
__version__	tools/pybrain/pybrain/datasets/unsupervised.py	/^__version__ = '$Id$'$/;"	v
__version__	tools/pybrain/pybrain/structure/connections/permutation.py	/^__version__ = '$Id$'$/;"	v
__version__	tools/pybrain/pybrain/structure/modules/gate.py	/^__version__ = '$Id$'$/;"	v
__version__	tools/pybrain/pybrain/structure/modules/svmunit.py	/^__version__ = '$Id: exampleRNN.py 1503 2008-09-13 15:25:06Z bayerj $'$/;"	v
__version__	tools/pybrain/pybrain/structure/networks/mdrnn.py	/^__version__ = '$Id$'$/;"	v
__version__	tools/pybrain/pybrain/structure/networks/rbm.py	/^__version__ = '$Id$'$/;"	v
__version__	tools/pybrain/pybrain/supervised/knn/lsh/minhash.py	/^__version__ = '$Id$'$/;"	v
__version__	tools/pybrain/pybrain/supervised/trainers/trainer.py	/^__version__ = '$Id$'$/;"	v
__version__	tools/pybrain/pybrain/tests/auxiliary.py	/^__version__ = '$Id$'$/;"	v
__version__	tools/pybrain/pybrain/tests/runtests.py	/^__version__ = '$Id$'$/;"	v
__version__	tools/pybrain/pybrain/tests/testsuites.py	/^__version__ = '$Id$'$/;"	v
__version__	tools/pybrain/pybrain/tests/unittests/structure/networks/_test_rbm.py	/^__version__ = '$Id$'$/;"	v
__version__	tools/pybrain/pybrain/tools/neuralnets.py	/^__version__ = "$Id$"$/;"	v
__version__	tools/pybrain/pybrain/unsupervised/trainers/deepbelief.py	/^__version__ = '$Id$'$/;"	v
_a	pybrain/rl/environments/functions/multimodal.py	/^    _a = 1.$/;"	v	class:BraninFunction
_a	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    _a = 1.$/;"	v	class:BraninFunction
_actionProbs	pybrain/rl/agents/linearfa.py	/^    def _actionProbs(self, state):$/;"	m	class:LinearFA_Agent
_actionProbs	tools/pybrain/pybrain/rl/agents/linearfa.py	/^    def _actionProbs(self, state):$/;"	m	class:LinearFA_Agent
_activateNetwork	pybrain/structure/modules/evolinonetwork.py	/^    def _activateNetwork(self, input):$/;"	m	class:EvolinoNetwork
_activateNetwork	pybrain/supervised/evolino/networkwrapper.py	/^    def _activateNetwork(self, input):$/;"	m	class:EvolinoNetwork
_activateNetwork	tools/pybrain/pybrain/structure/modules/evolinonetwork.py	/^    def _activateNetwork(self, input):$/;"	m	class:EvolinoNetwork
_activateNetwork	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def _activateNetwork(self, input):$/;"	m	class:EvolinoNetwork
_adaptResampling	pybrain/tools/aptativeresampling.py	/^    def _adaptResampling(self, res, alt):$/;"	m	class:AdaptiveResampler
_adaptResampling	tools/pybrain/pybrain/tools/aptativeresampling.py	/^    def _adaptResampling(self, res, alt):$/;"	m	class:AdaptiveResampler
_additionalInit	pybrain/optimization/distributionbased/cmaes.py	/^    def _additionalInit(self):$/;"	m	class:CMAES
_additionalInit	pybrain/optimization/distributionbased/fem.py	/^    def _additionalInit(self):$/;"	m	class:FEM
_additionalInit	pybrain/optimization/distributionbased/rank1.py	/^    def _additionalInit(self):$/;"	m	class:Rank1NES
_additionalInit	pybrain/optimization/distributionbased/snes.py	/^    def _additionalInit(self):$/;"	m	class:SNES
_additionalInit	pybrain/optimization/distributionbased/ves.py	/^    def _additionalInit(self):$/;"	m	class:VanillaGradientEvolutionStrategies
_additionalInit	pybrain/optimization/distributionbased/xnes.py	/^    def _additionalInit(self):$/;"	m	class:XNES
_additionalInit	pybrain/optimization/finitedifference/pgpe.py	/^    def _additionalInit(self):$/;"	m	class:PGPE
_additionalInit	pybrain/optimization/finitedifference/spsa.py	/^    def _additionalInit(self):$/;"	m	class:SimpleSPSA
_additionalInit	pybrain/optimization/hillclimber.py	/^    def _additionalInit(self):$/;"	m	class:HillClimber
_additionalInit	pybrain/optimization/optimizer.py	/^    def _additionalInit(self):$/;"	m	class:BlackBoxOptimizer
_additionalInit	pybrain/optimization/populationbased/es.py	/^    def _additionalInit(self):$/;"	m	class:ES
_additionalInit	pybrain/optimization/populationbased/evolution.py	/^    def _additionalInit(self):$/;"	m	class:Evolution
_additionalInit	pybrain/optimization/populationbased/pso.py	/^    def _additionalInit(self):$/;"	m	class:ParticleSwarmOptimizer
_additionalInit	pybrain/optimization/randomsearch.py	/^    def _additionalInit(self):$/;"	m	class:RandomSearch
_additionalInit	pybrain/rl/learners/valuebased/linearfa.py	/^    def _additionalInit(self):$/;"	m	class:GQLambda
_additionalInit	pybrain/rl/learners/valuebased/linearfa.py	/^    def _additionalInit(self):$/;"	m	class:LSPI
_additionalInit	pybrain/rl/learners/valuebased/linearfa.py	/^    def _additionalInit(self):$/;"	m	class:LSTDQLambda
_additionalInit	pybrain/rl/learners/valuebased/linearfa.py	/^    def _additionalInit(self):$/;"	m	class:LinearFALearner
_additionalInit	tools/pybrain/pybrain/optimization/distributionbased/cmaes.py	/^    def _additionalInit(self):$/;"	m	class:CMAES
_additionalInit	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^    def _additionalInit(self):$/;"	m	class:FEM
_additionalInit	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^    def _additionalInit(self):$/;"	m	class:Rank1NES
_additionalInit	tools/pybrain/pybrain/optimization/distributionbased/snes.py	/^    def _additionalInit(self):$/;"	m	class:SNES
_additionalInit	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    def _additionalInit(self):$/;"	m	class:VanillaGradientEvolutionStrategies
_additionalInit	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    def _additionalInit(self):$/;"	m	class:XNES
_additionalInit	tools/pybrain/pybrain/optimization/finitedifference/pgpe.py	/^    def _additionalInit(self):$/;"	m	class:PGPE
_additionalInit	tools/pybrain/pybrain/optimization/finitedifference/spsa.py	/^    def _additionalInit(self):$/;"	m	class:SimpleSPSA
_additionalInit	tools/pybrain/pybrain/optimization/hillclimber.py	/^    def _additionalInit(self):$/;"	m	class:HillClimber
_additionalInit	tools/pybrain/pybrain/optimization/optimizer.py	/^    def _additionalInit(self):$/;"	m	class:BlackBoxOptimizer
_additionalInit	tools/pybrain/pybrain/optimization/populationbased/es.py	/^    def _additionalInit(self):$/;"	m	class:ES
_additionalInit	tools/pybrain/pybrain/optimization/populationbased/evolution.py	/^    def _additionalInit(self):$/;"	m	class:Evolution
_additionalInit	tools/pybrain/pybrain/optimization/populationbased/pso.py	/^    def _additionalInit(self):$/;"	m	class:ParticleSwarmOptimizer
_additionalInit	tools/pybrain/pybrain/optimization/randomsearch.py	/^    def _additionalInit(self):$/;"	m	class:RandomSearch
_additionalInit	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    def _additionalInit(self):$/;"	m	class:GQLambda
_additionalInit	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    def _additionalInit(self):$/;"	m	class:LSPI
_additionalInit	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    def _additionalInit(self):$/;"	m	class:LSTDQLambda
_additionalInit	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    def _additionalInit(self):$/;"	m	class:LinearFALearner
_appendUnlinked	pybrain/datasets/dataset.py	/^    def _appendUnlinked(self, label, row):$/;"	m	class:DataSet
_appendUnlinked	tools/pybrain/pybrain/datasets/dataset.py	/^    def _appendUnlinked(self, label, row):$/;"	m	class:DataSet
_applyMask	pybrain/structure/evolvables/maskedparameters.py	/^    def _applyMask(self):$/;"	m	class:MaskedParameters
_applyMask	tools/pybrain/pybrain/structure/evolvables/maskedparameters.py	/^    def _applyMask(self):$/;"	m	class:MaskedParameters
_applyTransform	pybrain/rl/environments/ode/xode_changes/body.py	/^    def _applyTransform(self):$/;"	m	class:Body
_applyTransform	tools/pybrain/pybrain/rl/environments/ode/xode_changes/body.py	/^    def _applyTransform(self):$/;"	m	class:Body
_averageWithParents	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def _averageWithParents(self, pop, childportion):$/;"	m	class:Coevolution
_averageWithParents	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def _averageWithParents(self, pop, childportion):$/;"	m	class:Coevolution
_b	pybrain/rl/environments/functions/multimodal.py	/^    _b = 5.1 \/ (4 * pi ** 2)$/;"	v	class:BraninFunction
_b	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    _b = 5.1 \/ (4 * pi ** 2)$/;"	v	class:BraninFunction
_backup	pybrain/rl/environments/mazes/tasks/shuttle.py	/^    def _backup(self):$/;"	m	class:ShuttleDocking
_backup	tools/pybrain/pybrain/rl/environments/mazes/tasks/shuttle.py	/^    def _backup(self):$/;"	m	class:ShuttleDocking
_backwardImplementation	pybrain/rl/explorers/continuous/normal.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:NormalExplorer
_backwardImplementation	pybrain/rl/explorers/continuous/sde.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:StateDependentExplorer
_backwardImplementation	pybrain/structure/connections/connection.py	/^    def _backwardImplementation(self, outerr, inerr, inbuf):$/;"	m	class:Connection
_backwardImplementation	pybrain/structure/connections/full.py	/^    def _backwardImplementation(self, outerr, inerr, inbuf):$/;"	m	class:FullConnection
_backwardImplementation	pybrain/structure/connections/fullnotself.py	/^    def _backwardImplementation(self, outerr, inerr, inbuf):$/;"	m	class:FullNotSelfConnection
_backwardImplementation	pybrain/structure/connections/identity.py	/^    def _backwardImplementation(self, outerr, inerr, inbuf):$/;"	m	class:IdentityConnection
_backwardImplementation	pybrain/structure/connections/linear.py	/^    def _backwardImplementation(self, outerr, inerr, inbuf):$/;"	m	class:LinearConnection
_backwardImplementation	pybrain/structure/connections/permutation.py	/^    def _backwardImplementation(self, outerr, inerr, inbuf):$/;"	m	class:PermutationConnection
_backwardImplementation	pybrain/structure/connections/shared.py	/^    def _backwardImplementation(self, outerr, inerr, inbuf):$/;"	m	class:SharedFullConnection
_backwardImplementation	pybrain/structure/connections/shared.py	/^    def _backwardImplementation(self, outerr, inerr, inbuf):$/;"	m	class:SharedSubsamplingConnection
_backwardImplementation	pybrain/structure/connections/subsampling.py	/^    def _backwardImplementation(self, outerr, inerr, inbuf):$/;"	m	class:SubsamplingConnection
_backwardImplementation	pybrain/structure/modules/gate.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:DoubleGateLayer
_backwardImplementation	pybrain/structure/modules/gate.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:GateLayer
_backwardImplementation	pybrain/structure/modules/gate.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:MultiplicationLayer
_backwardImplementation	pybrain/structure/modules/gate.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:SwitchLayer
_backwardImplementation	pybrain/structure/modules/gaussianlayer.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:GaussianLayer
_backwardImplementation	pybrain/structure/modules/kohonen.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:KohonenMap
_backwardImplementation	pybrain/structure/modules/linearlayer.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:LinearLayer
_backwardImplementation	pybrain/structure/modules/lstm.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:LSTMLayer
_backwardImplementation	pybrain/structure/modules/mdlstm.py	/^    def _backwardImplementation(self, outerr2, inerr, outbuf, inbuf):$/;"	m	class:MDLSTMLayer
_backwardImplementation	pybrain/structure/modules/module.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:Module
_backwardImplementation	pybrain/structure/modules/sigmoidlayer.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:SigmoidLayer
_backwardImplementation	pybrain/structure/modules/softmax.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:PartialSoftmaxLayer
_backwardImplementation	pybrain/structure/modules/softmax.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:SoftmaxLayer
_backwardImplementation	pybrain/structure/modules/softsign.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:SoftSignLayer
_backwardImplementation	pybrain/structure/modules/statedependentlayer.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:StateDependentLayer
_backwardImplementation	pybrain/structure/modules/tanhlayer.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:TanhLayer
_backwardImplementation	pybrain/structure/networks/feedforward.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:FeedForwardNetworkComponent
_backwardImplementation	pybrain/structure/networks/network.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:Network
_backwardImplementation	pybrain/structure/networks/recurrent.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:RecurrentNetworkComponent
_backwardImplementation	tools/pybrain/pybrain/rl/explorers/continuous/normal.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:NormalExplorer
_backwardImplementation	tools/pybrain/pybrain/rl/explorers/continuous/sde.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:StateDependentExplorer
_backwardImplementation	tools/pybrain/pybrain/structure/connections/connection.py	/^    def _backwardImplementation(self, outerr, inerr, inbuf):$/;"	m	class:Connection
_backwardImplementation	tools/pybrain/pybrain/structure/connections/full.py	/^    def _backwardImplementation(self, outerr, inerr, inbuf):$/;"	m	class:FullConnection
_backwardImplementation	tools/pybrain/pybrain/structure/connections/fullnotself.py	/^    def _backwardImplementation(self, outerr, inerr, inbuf):$/;"	m	class:FullNotSelfConnection
_backwardImplementation	tools/pybrain/pybrain/structure/connections/identity.py	/^    def _backwardImplementation(self, outerr, inerr, inbuf):$/;"	m	class:IdentityConnection
_backwardImplementation	tools/pybrain/pybrain/structure/connections/linear.py	/^    def _backwardImplementation(self, outerr, inerr, inbuf):$/;"	m	class:LinearConnection
_backwardImplementation	tools/pybrain/pybrain/structure/connections/permutation.py	/^    def _backwardImplementation(self, outerr, inerr, inbuf):$/;"	m	class:PermutationConnection
_backwardImplementation	tools/pybrain/pybrain/structure/connections/shared.py	/^    def _backwardImplementation(self, outerr, inerr, inbuf):$/;"	m	class:SharedFullConnection
_backwardImplementation	tools/pybrain/pybrain/structure/connections/shared.py	/^    def _backwardImplementation(self, outerr, inerr, inbuf):$/;"	m	class:SharedSubsamplingConnection
_backwardImplementation	tools/pybrain/pybrain/structure/connections/subsampling.py	/^    def _backwardImplementation(self, outerr, inerr, inbuf):$/;"	m	class:SubsamplingConnection
_backwardImplementation	tools/pybrain/pybrain/structure/modules/gate.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:DoubleGateLayer
_backwardImplementation	tools/pybrain/pybrain/structure/modules/gate.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:GateLayer
_backwardImplementation	tools/pybrain/pybrain/structure/modules/gate.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:MultiplicationLayer
_backwardImplementation	tools/pybrain/pybrain/structure/modules/gate.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:SwitchLayer
_backwardImplementation	tools/pybrain/pybrain/structure/modules/gaussianlayer.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:GaussianLayer
_backwardImplementation	tools/pybrain/pybrain/structure/modules/kohonen.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:KohonenMap
_backwardImplementation	tools/pybrain/pybrain/structure/modules/linearlayer.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:LinearLayer
_backwardImplementation	tools/pybrain/pybrain/structure/modules/lstm.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:LSTMLayer
_backwardImplementation	tools/pybrain/pybrain/structure/modules/mdlstm.py	/^    def _backwardImplementation(self, outerr2, inerr, outbuf, inbuf):$/;"	m	class:MDLSTMLayer
_backwardImplementation	tools/pybrain/pybrain/structure/modules/module.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:Module
_backwardImplementation	tools/pybrain/pybrain/structure/modules/sigmoidlayer.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:SigmoidLayer
_backwardImplementation	tools/pybrain/pybrain/structure/modules/softmax.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:PartialSoftmaxLayer
_backwardImplementation	tools/pybrain/pybrain/structure/modules/softmax.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:SoftmaxLayer
_backwardImplementation	tools/pybrain/pybrain/structure/modules/softsign.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:SoftSignLayer
_backwardImplementation	tools/pybrain/pybrain/structure/modules/statedependentlayer.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:StateDependentLayer
_backwardImplementation	tools/pybrain/pybrain/structure/modules/tanhlayer.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:TanhLayer
_backwardImplementation	tools/pybrain/pybrain/structure/networks/feedforward.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:FeedForwardNetworkComponent
_backwardImplementation	tools/pybrain/pybrain/structure/networks/network.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:Network
_backwardImplementation	tools/pybrain/pybrain/structure/networks/recurrent.py	/^    def _backwardImplementation(self, outerr, inerr, outbuf, inbuf):$/;"	m	class:RecurrentNetworkComponent
_base2oldsample	pybrain/optimization/distributionbased/xnes.py	/^    def _base2oldsample(self, e):$/;"	m	class:XNES
_base2oldsample	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    def _base2oldsample(self, e):$/;"	m	class:XNES
_base2sample	pybrain/optimization/distributionbased/snes.py	/^    def _base2sample(self, e):$/;"	m	class:SNES
_base2sample	pybrain/optimization/distributionbased/xnes.py	/^    def _base2sample(self, e):$/;"	m	class:XNES
_base2sample	tools/pybrain/pybrain/optimization/distributionbased/snes.py	/^    def _base2sample(self, e):$/;"	m	class:SNES
_base2sample	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    def _base2sample(self, e):$/;"	m	class:XNES
_batchLearn	pybrain/optimization/distributionbased/ves.py	/^    def _batchLearn(self):$/;"	m	class:VanillaGradientEvolutionStrategies
_batchLearn	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    def _batchLearn(self):$/;"	m	class:VanillaGradientEvolutionStrategies
_beats	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def _beats(self, h, p):$/;"	m	class:Coevolution
_beats	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def _beats(self, h, p):$/;"	m	class:Coevolution
_bestFound	pybrain/optimization/optimizer.py	/^    def _bestFound(self):$/;"	m	class:BlackBoxOptimizer
_bestFound	pybrain/optimization/optimizer.py	/^    def _bestFound(self):$/;"	m	class:ContinuousOptimizer
_bestFound	tools/pybrain/pybrain/optimization/optimizer.py	/^    def _bestFound(self):$/;"	m	class:BlackBoxOptimizer
_bestFound	tools/pybrain/pybrain/optimization/optimizer.py	/^    def _bestFound(self):$/;"	m	class:ContinuousOptimizer
_boltzmannPolicy	pybrain/rl/learners/valuebased/linearfa.py	/^    def _boltzmannPolicy(self, state, temperature=1.):$/;"	m	class:LinearFALearner
_boltzmannPolicy	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    def _boltzmannPolicy(self, state, temperature=1.):$/;"	m	class:LinearFALearner
_boltzmannProbs	pybrain/rl/learners/valuebased/linearfa.py	/^    def _boltzmannProbs(qvalues, temperature=1.):$/;"	m	class:LinearFALearner
_boltzmannProbs	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    def _boltzmannProbs(qvalues, temperature=1.):$/;"	m	class:LinearFALearner
_buildBorderStructure	pybrain/structure/networks/borderswiping.py	/^    def _buildBorderStructure(self, inmesh, hiddenmesh, outmesh):$/;"	m	class:BorderSwipingNetwork
_buildBorderStructure	tools/pybrain/pybrain/structure/networks/borderswiping.py	/^    def _buildBorderStructure(self, inmesh, hiddenmesh, outmesh):$/;"	m	class:BorderSwipingNetwork
_buildCaptureNetwork	pybrain/structure/networks/custom/capturegame.py	/^    def _buildCaptureNetwork(self):$/;"	m	class:CaptureGameNetwork
_buildCaptureNetwork	tools/pybrain/pybrain/structure/networks/custom/capturegame.py	/^    def _buildCaptureNetwork(self):$/;"	m	class:CaptureGameNetwork
_buildCov	pybrain/auxiliary/gaussprocess.py	/^    def _buildCov(self, a, b):$/;"	m	class:GaussianProcess
_buildCov	tools/pybrain/pybrain/auxiliary/gaussprocess.py	/^    def _buildCov(self, a, b):$/;"	m	class:GaussianProcess
_buildDirectLink	pybrain/structure/networks/custom/capturegame.py	/^    def _buildDirectLink(self, inmesh, outmesh):$/;"	m	class:CaptureGameNetwork
_buildDirectLink	tools/pybrain/pybrain/structure/networks/custom/capturegame.py	/^    def _buildDirectLink(self, inmesh, outmesh):$/;"	m	class:CaptureGameNetwork
_buildGrid	pybrain/auxiliary/gaussprocess.py	/^    def _buildGrid(self):$/;"	m	class:GaussianProcess
_buildGrid	tools/pybrain/pybrain/auxiliary/gaussprocess.py	/^    def _buildGrid(self):$/;"	m	class:GaussianProcess
_buildNetwork	pybrain/tools/shortcuts.py	/^def _buildNetwork(*layers, **options):$/;"	f
_buildNetwork	tools/pybrain/pybrain/tools/shortcuts.py	/^def _buildNetwork(*layers, **options):$/;"	f
_buildStructure	pybrain/structure/networks/convolutional.py	/^    def _buildStructure(self, inputdim, insize, inlayer, convSize, numFeatureMaps):$/;"	m	class:SimpleConvolutionalNetwork
_buildStructure	tools/pybrain/pybrain/structure/networks/convolutional.py	/^    def _buildStructure(self, inputdim, insize, inlayer, convSize, numFeatureMaps):$/;"	m	class:SimpleConvolutionalNetwork
_buildSwipingStructure	pybrain/structure/networks/swiping.py	/^    def _buildSwipingStructure(self, inmesh, hiddenmesh, outmesh):$/;"	m	class:SwipingNetwork
_buildSwipingStructure	tools/pybrain/pybrain/structure/networks/swiping.py	/^    def _buildSwipingStructure(self, inmesh, hiddenmesh, outmesh):$/;"	m	class:SwipingNetwork
_buildTopology	pybrain/structure/networks/mdrnn.py	/^    def _buildTopology(self):$/;"	m	class:_Mdrnn
_buildTopology	tools/pybrain/pybrain/structure/networks/mdrnn.py	/^    def _buildTopology(self):$/;"	m	class:_Mdrnn
_c	pybrain/rl/environments/functions/multimodal.py	/^    _c = 5 \/ pi$/;"	v	class:BraninFunction
_c	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    _c = 5 \/ pi$/;"	v	class:BraninFunction
_calcBaseline	pybrain/optimization/distributionbased/ves.py	/^    def _calcBaseline(self, shapedfitnesses):$/;"	m	class:VanillaGradientEvolutionStrategies
_calcBaseline	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    def _calcBaseline(self, shapedfitnesses):$/;"	m	class:VanillaGradientEvolutionStrategies
_calcBatchUpdate	pybrain/optimization/distributionbased/nes.py	/^    def _calcBatchUpdate(self, fitnesses):$/;"	m	class:ExactNES
_calcBatchUpdate	pybrain/optimization/distributionbased/nes.py	/^    def _calcBatchUpdate(self, fitnesses):$/;"	m	class:OriginalNES
_calcBatchUpdate	pybrain/optimization/distributionbased/ves.py	/^    def _calcBatchUpdate(self, fitnesses):$/;"	m	class:VanillaGradientEvolutionStrategies
_calcBatchUpdate	tools/pybrain/pybrain/optimization/distributionbased/nes.py	/^    def _calcBatchUpdate(self, fitnesses):$/;"	m	class:ExactNES
_calcBatchUpdate	tools/pybrain/pybrain/optimization/distributionbased/nes.py	/^    def _calcBatchUpdate(self, fitnesses):$/;"	m	class:OriginalNES
_calcBatchUpdate	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    def _calcBatchUpdate(self, fitnesses):$/;"	m	class:VanillaGradientEvolutionStrategies
_calcDerivs	pybrain/supervised/trainers/backprop.py	/^    def _calcDerivs(self, seq):$/;"	m	class:BackpropTrainer
_calcDerivs	tools/pybrain/pybrain/supervised/trainers/backprop.py	/^    def _calcDerivs(self, seq):$/;"	m	class:BackpropTrainer
_calcGrid	pybrain/tools/gridsearch.py	/^    def _calcGrid(self, center, level):$/;"	m	class:GridSearchDOE
_calcGrid	tools/pybrain/pybrain/tools/gridsearch.py	/^    def _calcGrid(self, center, level):$/;"	m	class:GridSearchDOE
_calcOnlineUpdate	pybrain/optimization/distributionbased/ves.py	/^    def _calcOnlineUpdate(self, fitnesses):$/;"	m	class:VanillaGradientEvolutionStrategies
_calcOnlineUpdate	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    def _calcOnlineUpdate(self, fitnesses):$/;"	m	class:VanillaGradientEvolutionStrategies
_calcVanillaBatchGradient	pybrain/optimization/distributionbased/ves.py	/^    def _calcVanillaBatchGradient(self, samples, shapedfitnesses):$/;"	m	class:VanillaGradientEvolutionStrategies
_calcVanillaBatchGradient	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    def _calcVanillaBatchGradient(self, samples, shapedfitnesses):$/;"	m	class:VanillaGradientEvolutionStrategies
_calcVanillaOnlineGradient	pybrain/optimization/distributionbased/ves.py	/^    def _calcVanillaOnlineGradient(self, sample, shapedfitnesses):$/;"	m	class:VanillaGradientEvolutionStrategies
_calcVanillaOnlineGradient	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    def _calcVanillaOnlineGradient(self, sample, shapedfitnesses):$/;"	m	class:VanillaGradientEvolutionStrategies
_calculate	pybrain/auxiliary/gaussprocess.py	/^    def _calculate(self):$/;"	m	class:GaussianProcess
_calculate	tools/pybrain/pybrain/auxiliary/gaussprocess.py	/^    def _calculate(self):$/;"	m	class:GaussianProcess
_calculateJobs	pybrain/tools/gridsearch.py	/^    def _calculateJobs(self):$/;"	m	class:GridSearch2D
_calculateJobs	tools/pybrain/pybrain/tools/gridsearch.py	/^    def _calculateJobs(self):$/;"	m	class:GridSearch2D
_calculateModuleOutputSequential	pybrain/tools/validation.py	/^    def _calculateModuleOutputSequential(cls, module, dataset):$/;"	m	class:ModuleValidator
_calculateModuleOutputSequential	tools/pybrain/pybrain/tools/validation.py	/^    def _calculateModuleOutputSequential(cls, module, dataset):$/;"	m	class:ModuleValidator
_calculatePerformance	pybrain/tools/validation.py	/^    def _calculatePerformance(self, output, target):$/;"	m	class:CrossValidator
_calculatePerformance	tools/pybrain/pybrain/tools/validation.py	/^    def _calculatePerformance(self, output, target):$/;"	m	class:CrossValidator
_callback	pybrain/optimization/neldermead.py	/^    def _callback(self, *_):$/;"	m	class:NelderMead
_callback	tools/pybrain/pybrain/optimization/neldermead.py	/^    def _callback(self, *_):$/;"	m	class:NelderMead
_canonicForm	pybrain/structure/networks/borderswiping.py	/^    def _canonicForm(self, tup, dim):$/;"	m	class:BorderSwipingNetwork
_canonicForm	tools/pybrain/pybrain/structure/networks/borderswiping.py	/^    def _canonicForm(self, tup, dim):$/;"	m	class:BorderSwipingNetwork
_capture	pybrain/rl/environments/twoplayergames/capturegame.py	/^    def _capture(self, c, pos):$/;"	m	class:CaptureGame
_capture	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    def _capture(self, c, pos):$/;"	m	class:CaptureGame
_checkGradient	pybrain/supervised/trainers/backprop.py	/^    def _checkGradient(self, dataset=None, silent=False):$/;"	m	class:BackpropTrainer
_checkGradient	tools/pybrain/pybrain/supervised/trainers/backprop.py	/^    def _checkGradient(self, dataset=None, silent=False):$/;"	m	class:BackpropTrainer
_checkItem	pybrain/supervised/knn/lsh/minhash.py	/^    def _checkItem(self, item):$/;"	m	class:MinHash
_checkItem	tools/pybrain/pybrain/supervised/knn/lsh/minhash.py	/^    def _checkItem(self, item):$/;"	m	class:MinHash
_checkMaxId	pybrain/tools/plotting/multiline.py	/^    def _checkMaxId(self, id):$/;"	m	class:MultilinePlotter
_checkMaxId	tools/pybrain/pybrain/tools/plotting/multiline.py	/^    def _checkMaxId(self, id):$/;"	m	class:MultilinePlotter
_competitiveSharedFitness	pybrain/optimization/populationbased/coevolution/competitivecoevolution.py	/^    def _competitiveSharedFitness(self, hosts, parasites):$/;"	m	class:CompetitiveCoevolution
_competitiveSharedFitness	tools/pybrain/pybrain/optimization/populationbased/coevolution/competitivecoevolution.py	/^    def _competitiveSharedFitness(self, hosts, parasites):$/;"	m	class:CompetitiveCoevolution
_computeDensities	pybrain/optimization/distributionbased/fem.py	/^    def _computeDensities(self, sample):$/;"	m	class:FEM
_computeDensities	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^    def _computeDensities(self, sample):$/;"	m	class:FEM
_computeUpdateSize	pybrain/optimization/distributionbased/fem.py	/^    def _computeUpdateSize(self, densities, sampleIndex):$/;"	m	class:FEM
_computeUpdateSize	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^    def _computeUpdateSize(self, densities, sampleIndex):$/;"	m	class:FEM
_connect	pybrain/rl/environments/ode/actuators.py	/^    def _connect(self, world):$/;"	m	class:Actuator
_connect	pybrain/rl/environments/ode/actuators.py	/^    def _connect(self, world):$/;"	m	class:CopyJointActuator
_connect	pybrain/rl/environments/ode/actuators.py	/^    def _connect(self, world):$/;"	m	class:JointActuator
_connect	pybrain/rl/environments/ode/actuators.py	/^    def _connect(self, world):$/;"	m	class:SpecificJointActuator
_connect	pybrain/rl/environments/ode/sensors.py	/^    def _connect(self, world):$/;"	m	class:BodyPositionSensor
_connect	pybrain/rl/environments/ode/sensors.py	/^    def _connect(self, world):$/;"	m	class:JointSensor
_connect	pybrain/rl/environments/ode/sensors.py	/^    def _connect(self, world):$/;"	m	class:Sensor
_connect	pybrain/rl/environments/ode/sensors.py	/^    def _connect(self, world):$/;"	m	class:SpecificBodyPositionSensor
_connect	pybrain/rl/environments/ode/sensors.py	/^    def _connect(self, world):$/;"	m	class:SpecificJointSensor
_connect	pybrain/rl/environments/ode/sensors.py	/^    def _connect(self, world):$/;"	m	class:SpecificJointVelocitySensor
_connect	tools/pybrain/pybrain/rl/environments/ode/actuators.py	/^    def _connect(self, world):$/;"	m	class:Actuator
_connect	tools/pybrain/pybrain/rl/environments/ode/actuators.py	/^    def _connect(self, world):$/;"	m	class:CopyJointActuator
_connect	tools/pybrain/pybrain/rl/environments/ode/actuators.py	/^    def _connect(self, world):$/;"	m	class:JointActuator
_connect	tools/pybrain/pybrain/rl/environments/ode/actuators.py	/^    def _connect(self, world):$/;"	m	class:SpecificJointActuator
_connect	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def _connect(self, world):$/;"	m	class:BodyPositionSensor
_connect	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def _connect(self, world):$/;"	m	class:JointSensor
_connect	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def _connect(self, world):$/;"	m	class:Sensor
_connect	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def _connect(self, world):$/;"	m	class:SpecificBodyPositionSensor
_connect	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def _connect(self, world):$/;"	m	class:SpecificJointSensor
_connect	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def _connect(self, world):$/;"	m	class:SpecificJointVelocitySensor
_constructParameterInfo	pybrain/structure/networks/neurondecomposable.py	/^    def _constructParameterInfo(self):$/;"	m	class:NeuronDecomposableNetwork
_constructParameterInfo	tools/pybrain/pybrain/structure/networks/neurondecomposable.py	/^    def _constructParameterInfo(self):$/;"	m	class:NeuronDecomposableNetwork
_containerIterator	pybrain/structure/networks/network.py	/^    def _containerIterator(self):$/;"	m	class:Network
_containerIterator	pybrain/structure/networks/recurrent.py	/^    def _containerIterator(self):$/;"	m	class:RecurrentNetworkComponent
_containerIterator	tools/pybrain/pybrain/structure/networks/network.py	/^    def _containerIterator(self):$/;"	m	class:Network
_containerIterator	tools/pybrain/pybrain/structure/networks/recurrent.py	/^    def _containerIterator(self):$/;"	m	class:RecurrentNetworkComponent
_convertAllDataToOneOfMany	pybrain/tools/neuralnets.py	/^    def _convertAllDataToOneOfMany(self, values=[0, 1]):$/;"	m	class:NNclassifier
_convertAllDataToOneOfMany	tools/pybrain/pybrain/tools/neuralnets.py	/^    def _convertAllDataToOneOfMany(self, values=[0, 1]):$/;"	m	class:NNclassifier
_convertArray1d	pybrain/datasets/dataset.py	/^    def _convertArray1d(self, vector):$/;"	m	class:DataSet
_convertArray1d	tools/pybrain/pybrain/datasets/dataset.py	/^    def _convertArray1d(self, vector):$/;"	m	class:DataSet
_convertArray2d	pybrain/datasets/dataset.py	/^    def _convertArray2d(self, vector, column=False):$/;"	m	class:DataSet
_convertArray2d	tools/pybrain/pybrain/datasets/dataset.py	/^    def _convertArray2d(self, vector, column=False):$/;"	m	class:DataSet
_convertIndexToPos	pybrain/rl/environments/twoplayergames/capturegameplayers/moduledecision.py	/^    def _convertIndexToPos(self, i):$/;"	m	class:ModuleDecidingPlayer
_convertIndexToPos	pybrain/rl/environments/twoplayergames/gomokuplayers/moduledecision.py	/^    def _convertIndexToPos(self, i):$/;"	m	class:ModuleDecidingPlayer
_convertIndexToPos	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/moduledecision.py	/^    def _convertIndexToPos(self, i):$/;"	m	class:ModuleDecidingPlayer
_convertIndexToPos	tools/pybrain/pybrain/rl/environments/twoplayergames/gomokuplayers/moduledecision.py	/^    def _convertIndexToPos(self, i):$/;"	m	class:ModuleDecidingPlayer
_convertList	pybrain/datasets/dataset.py	/^    def _convertList(self, vector):$/;"	m	class:DataSet
_convertList	tools/pybrain/pybrain/datasets/dataset.py	/^    def _convertList(self, vector):$/;"	m	class:DataSet
_convertPosToIndex	pybrain/rl/environments/twoplayergames/capturegameplayers/moduledecision.py	/^    def _convertPosToIndex(self, p):$/;"	m	class:ModuleDecidingPlayer
_convertPosToIndex	pybrain/rl/environments/twoplayergames/gomokuplayers/moduledecision.py	/^    def _convertPosToIndex(self, p):$/;"	m	class:ModuleDecidingPlayer
_convertPosToIndex	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/moduledecision.py	/^    def _convertPosToIndex(self, p):$/;"	m	class:ModuleDecidingPlayer
_convertPosToIndex	tools/pybrain/pybrain/rl/environments/twoplayergames/gomokuplayers/moduledecision.py	/^    def _convertPosToIndex(self, p):$/;"	m	class:ModuleDecidingPlayer
_convertToClassNb	pybrain/datasets/classification.py	/^    def _convertToClassNb(self):$/;"	m	class:ClassificationDataSet
_convertToClassNb	tools/pybrain/pybrain/datasets/classification.py	/^    def _convertToClassNb(self):$/;"	m	class:ClassificationDataSet
_convertToOneOfMany	pybrain/datasets/classification.py	/^    def _convertToOneOfMany(self, bounds=(0, 1)):$/;"	m	class:ClassificationDataSet
_convertToOneOfMany	tools/pybrain/pybrain/datasets/classification.py	/^    def _convertToOneOfMany(self, bounds=(0, 1)):$/;"	m	class:ClassificationDataSet
_countValues	pybrain/rl/environments/ode/actuators.py	/^    def _countValues(self):$/;"	m	class:JointActuator
_countValues	tools/pybrain/pybrain/rl/environments/ode/actuators.py	/^    def _countValues(self):$/;"	m	class:JointActuator
_createFullInput	pybrain/supervised/evolino/networkwrapper.py	/^    def _createFullInput(self, input, output):$/;"	m	class:EvolinoNetwork
_createFullInput	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def _createFullInput(self, input, output):$/;"	m	class:EvolinoNetwork
_create_box	pybrain/rl/environments/ode/environment.py	/^    def _create_box(self, space, density, lx, ly, lz):$/;"	m	class:ODEEnvironment
_create_box	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def _create_box(self, space, density, lx, ly, lz):$/;"	m	class:ODEEnvironment
_create_sphere	pybrain/rl/environments/ode/environment.py	/^    def _create_sphere(self, space, density, radius):$/;"	m	class:ODEEnvironment
_create_sphere	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def _create_sphere(self, space, density, radius):$/;"	m	class:ODEEnvironment
_currentEvaluations	pybrain/optimization/distributionbased/rank1.py	/^    def _currentEvaluations(self):        $/;"	m	class:Rank1NES
_currentEvaluations	pybrain/optimization/distributionbased/snes.py	/^    def _currentEvaluations(self):        $/;"	m	class:SNES
_currentEvaluations	pybrain/optimization/distributionbased/xnes.py	/^    def _currentEvaluations(self):$/;"	m	class:XNES
_currentEvaluations	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^    def _currentEvaluations(self):        $/;"	m	class:Rank1NES
_currentEvaluations	tools/pybrain/pybrain/optimization/distributionbased/snes.py	/^    def _currentEvaluations(self):        $/;"	m	class:SNES
_currentEvaluations	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    def _currentEvaluations(self):$/;"	m	class:XNES
_d	pybrain/rl/environments/functions/multimodal.py	/^    _d = 6.$/;"	v	class:BraninFunction
_d	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    _d = 6.$/;"	v	class:BraninFunction
_dens2mass	pybrain/rl/environments/ode/tools/xodetools.py	/^    def _dens2mass(self, shape, size, dens):$/;"	m	class:XODEfile
_dens2mass	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def _dens2mass(self, shape, size, dens):$/;"	m	class:XODEfile
_dependencies	pybrain/tests/unittests/_test_equivalence_to_ctypes.py	/^_dependencies = ['arac']$/;"	v
_dependencies	pybrain/tests/unittests/tools/test_rlgluebridge.py	/^_dependencies = ['rlglue']$/;"	v
_dependencies	tools/pybrain/pybrain/tests/unittests/_test_equivalence_to_ctypes.py	/^_dependencies = ['arac']$/;"	v
_dependencies	tools/pybrain/pybrain/tests/unittests/tools/test_rlgluebridge.py	/^_dependencies = ['rlglue']$/;"	v
_derivs	pybrain/rl/environments/cartpole/cartpole.py	/^    def _derivs(self, x, t):$/;"	m	class:CartPoleEnvironment
_derivs	pybrain/structure/evolvables/cheaplycopiable.py	/^    def _derivs(self):$/;"	m	class:CheaplyCopiable
_derivs	tools/pybrain/pybrain/rl/environments/cartpole/cartpole.py	/^    def _derivs(self, x, t):$/;"	m	class:CartPoleEnvironment
_derivs	tools/pybrain/pybrain/structure/evolvables/cheaplycopiable.py	/^    def _derivs(self):$/;"	m	class:CheaplyCopiable
_doTournament	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def _doTournament(self, pop1, pop2, tournamentSize=None):$/;"	m	class:Coevolution
_doTournament	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def _doTournament(self, pop1, pop2, tournamentSize=None):$/;"	m	class:Coevolution
_doe_pat	pybrain/tools/gridsearch.py	/^    _doe_pat = array([ [ -1.0 , +1.0 ]                , [ 0.0, +1.0 ]                , [ +1.0 , +1.0 ] ,$/;"	v	class:GridSearchDOE
_doe_pat	tools/pybrain/pybrain/tools/gridsearch.py	/^    _doe_pat = array([ [ -1.0 , +1.0 ]                , [ 0.0, +1.0 ]                , [ +1.0 , +1.0 ] ,$/;"	v	class:GridSearchDOE
_drawfunc	pybrain/rl/environments/ode/viewer.py	/^    def _drawfunc (self):$/;"	m	class:ODEViewer
_drawfunc	tools/pybrain/pybrain/rl/environments/ode/viewer.py	/^    def _drawfunc (self):$/;"	m	class:ODEViewer
_e	pybrain/rl/environments/functions/multimodal.py	/^    _e = 10.$/;"	v	class:BraninFunction
_e	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    _e = 10.$/;"	v	class:BraninFunction
_eliteSize	pybrain/optimization/populationbased/ga.py	/^    _eliteSize = None # override with an exact number$/;"	v	class:GA
_eliteSize	tools/pybrain/pybrain/optimization/populationbased/ga.py	/^    _eliteSize = None # override with an exact number$/;"	v	class:GA
_endElement	pybrain/rl/environments/ode/xode_changes/body.py	/^    def _endElement(self, name):$/;"	m	class:Body
_endElement	pybrain/rl/environments/ode/xode_changes/body.py	/^    def _endElement(self, name):$/;"	m	class:Mass
_endElement	pybrain/rl/environments/ode/xode_changes/geom.py	/^    def _endElement(self, name):$/;"	m	class:Geom
_endElement	tools/pybrain/pybrain/rl/environments/ode/xode_changes/body.py	/^    def _endElement(self, name):$/;"	m	class:Body
_endElement	tools/pybrain/pybrain/rl/environments/ode/xode_changes/body.py	/^    def _endElement(self, name):$/;"	m	class:Mass
_endElement	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^    def _endElement(self, name):$/;"	m	class:Geom
_establishRecurrence	pybrain/supervised/evolino/networkwrapper.py	/^    def _establishRecurrence(self):$/;"	m	class:NetworkWrapper
_establishRecurrence	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def _establishRecurrence(self):$/;"	m	class:NetworkWrapper
_evaluateNet	pybrain/supervised/evolino/filter.py	/^    def _evaluateNet(self, net, dataset, wtRatio):$/;"	m	class:EvolinoEvaluation
_evaluateNet	tools/pybrain/pybrain/supervised/evolino/filter.py	/^    def _evaluateNet(self, net, dataset, wtRatio):$/;"	m	class:EvolinoEvaluation
_evaluatePopulation	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def _evaluatePopulation(self):$/;"	m	class:Coevolution
_evaluatePopulation	pybrain/optimization/populationbased/coevolution/competitivecoevolution.py	/^    def _evaluatePopulation(self):$/;"	m	class:CompetitiveCoevolution
_evaluatePopulation	pybrain/optimization/populationbased/coevolution/multipopulationcoevolution.py	/^    def _evaluatePopulation(self):$/;"	m	class:MultiPopulationCoevolution
_evaluatePopulation	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def _evaluatePopulation(self):$/;"	m	class:Coevolution
_evaluatePopulation	tools/pybrain/pybrain/optimization/populationbased/coevolution/competitivecoevolution.py	/^    def _evaluatePopulation(self):$/;"	m	class:CompetitiveCoevolution
_evaluatePopulation	tools/pybrain/pybrain/optimization/populationbased/coevolution/multipopulationcoevolution.py	/^    def _evaluatePopulation(self):$/;"	m	class:MultiPopulationCoevolution
_evaluateSequence	pybrain/datasets/importance.py	/^    def _evaluateSequence(self, f, seq, verbose = False):$/;"	m	class:ImportanceDataSet
_evaluateSequence	pybrain/datasets/supervised.py	/^    def _evaluateSequence(self, f, seq, verbose = False):$/;"	m	class:SupervisedDataSet
_evaluateSequence	tools/pybrain/pybrain/datasets/importance.py	/^    def _evaluateSequence(self, f, seq, verbose = False):$/;"	m	class:ImportanceDataSet
_evaluateSequence	tools/pybrain/pybrain/datasets/supervised.py	/^    def _evaluateSequence(self, f, seq, verbose = False):$/;"	m	class:SupervisedDataSet
_exampleConfig	pybrain/rl/environments/functions/lennardjones.py	/^    def _exampleConfig(self, numatoms, noise=0.05, edge=2.):$/;"	m	class:LennardJones
_exampleConfig	tools/pybrain/pybrain/rl/environments/functions/lennardjones.py	/^    def _exampleConfig(self, numatoms, noise=0.05, edge=2.):$/;"	m	class:LennardJones
_explorer	pybrain/rl/learners/valuebased/valuebased.py	/^    _explorer = None$/;"	v	class:ValueBasedLearner
_explorer	tools/pybrain/pybrain/rl/learners/valuebased/valuebased.py	/^    _explorer = None$/;"	v	class:ValueBasedLearner
_extendPopulation	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def _extendPopulation(self, seeds, size):$/;"	m	class:Coevolution
_extendPopulation	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def _extendPopulation(self, seeds, size):$/;"	m	class:Coevolution
_extrapolateBorderAt	pybrain/structure/networks/borderswiping.py	/^    def _extrapolateBorderAt(self, t, using):$/;"	m	class:BorderSwipingNetwork
_extrapolateBorderAt	tools/pybrain/pybrain/structure/networks/borderswiping.py	/^    def _extrapolateBorderAt(self, t, using):$/;"	m	class:BorderSwipingNetwork
_f	pybrain/rl/environments/functions/multimodal.py	/^    _f = 1. \/ (8 * pi)$/;"	v	class:BraninFunction
_f	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    _f = 1. \/ (8 * pi)$/;"	v	class:BraninFunction
_fillQueue	pybrain/rl/experiments/queued.py	/^    def _fillQueue(self, queuelength):$/;"	m	class:QueuedExperiment
_fillQueue	tools/pybrain/pybrain/rl/experiments/queued.py	/^    def _fillQueue(self, queuelength):$/;"	m	class:QueuedExperiment
_findAmountOfGrids	pybrain/supervised/knn/lsh/nearoptimal.py	/^    def _findAmountOfGrids(self):$/;"	m	class:MultiDimHash
_findAmountOfGrids	tools/pybrain/pybrain/supervised/knn/lsh/nearoptimal.py	/^    def _findAmountOfGrids(self):$/;"	m	class:MultiDimHash
_findHypercube	pybrain/supervised/knn/lsh/nearoptimal.py	/^    def _findHypercube(self, point):$/;"	m	class:MultiDimHash
_findHypercube	tools/pybrain/pybrain/supervised/knn/lsh/nearoptimal.py	/^    def _findHypercube(self, point):$/;"	m	class:MultiDimHash
_findIndex	pybrain/supervised/trainers/svmtrainer.py	/^    def _findIndex(self, point):$/;"	m	class:GridSearchDOE
_findIndex	tools/pybrain/pybrain/supervised/trainers/svmtrainer.py	/^    def _findIndex(self, point):$/;"	m	class:GridSearchDOE
_findKnnCandidates	pybrain/supervised/knn/lsh/nearoptimal.py	/^    def _findKnnCandidates(self, point):$/;"	m	class:MultiDimHash
_findKnnCandidates	tools/pybrain/pybrain/supervised/knn/lsh/nearoptimal.py	/^    def _findKnnCandidates(self, point):$/;"	m	class:MultiDimHash
_findLocalBall	pybrain/supervised/knn/lsh/nearoptimal.py	/^    _findLocalBall = _findLocalBall_noinline$/;"	v	class:MultiDimHash
_findLocalBall	tools/pybrain/pybrain/supervised/knn/lsh/nearoptimal.py	/^    _findLocalBall = _findLocalBall_noinline$/;"	v	class:MultiDimHash
_findLocalBall_inline	pybrain/supervised/knn/lsh/nearoptimal.py	/^    def _findLocalBall_inline(self, point):$/;"	m	class:MultiDimHash
_findLocalBall_inline	tools/pybrain/pybrain/supervised/knn/lsh/nearoptimal.py	/^    def _findLocalBall_inline(self, point):$/;"	m	class:MultiDimHash
_findLocalBall_noinline	pybrain/supervised/knn/lsh/nearoptimal.py	/^    def _findLocalBall_noinline(self, point):$/;"	m	class:MultiDimHash
_findLocalBall_noinline	tools/pybrain/pybrain/supervised/knn/lsh/nearoptimal.py	/^    def _findLocalBall_noinline(self, point):$/;"	m	class:MultiDimHash
_firstOne	pybrain/supervised/knn/lsh/minhash.py	/^    def _firstOne(self, arr):$/;"	m	class:MinHash
_firstOne	tools/pybrain/pybrain/supervised/knn/lsh/minhash.py	/^    def _firstOne(self, arr):$/;"	m	class:MinHash
_fiveRow	pybrain/rl/environments/twoplayergames/gomoku.py	/^    def _fiveRow(self, color, pos):$/;"	m	class:GomokuGame
_fiveRow	tools/pybrain/pybrain/rl/environments/twoplayergames/gomoku.py	/^    def _fiveRow(self, color, pos):$/;"	m	class:GomokuGame
_fixedStartingPos	pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    def _fixedStartingPos(self):$/;"	m	class:RelativeCaptureTask
_fixedStartingPos	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    def _fixedStartingPos(self):$/;"	m	class:RelativeCaptureTask
_flipDirection	pybrain/optimization/optimizer.py	/^    def _flipDirection(self):$/;"	m	class:BlackBoxOptimizer
_flipDirection	tools/pybrain/pybrain/optimization/optimizer.py	/^    def _flipDirection(self):$/;"	m	class:BlackBoxOptimizer
_forward	pybrain/rl/environments/mazes/tasks/shuttle.py	/^    def _forward(self):$/;"	m	class:ShuttleDocking
_forward	tools/pybrain/pybrain/rl/environments/mazes/tasks/shuttle.py	/^    def _forward(self):$/;"	m	class:ShuttleDocking
_forwardImplementation	policy/BoltzmanAC.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:BoltzmanPolicy
_forwardImplementation	pybrain/rl/explorers/continuous/normal.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:NormalExplorer
_forwardImplementation	pybrain/rl/explorers/continuous/sde.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:StateDependentExplorer
_forwardImplementation	pybrain/rl/explorers/discrete/boltzmann.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:BoltzmannExplorer
_forwardImplementation	pybrain/rl/explorers/discrete/discretesde.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:DiscreteStateDependentExplorer
_forwardImplementation	pybrain/rl/explorers/discrete/egreedy.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:EpsilonGreedyExplorer
_forwardImplementation	pybrain/rl/learners/valuebased/interface.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:ActionValueNetwork
_forwardImplementation	pybrain/rl/learners/valuebased/interface.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:ActionValueTable
_forwardImplementation	pybrain/structure/connections/connection.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:Connection
_forwardImplementation	pybrain/structure/connections/full.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:FullConnection
_forwardImplementation	pybrain/structure/connections/fullnotself.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:FullNotSelfConnection
_forwardImplementation	pybrain/structure/connections/identity.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:IdentityConnection
_forwardImplementation	pybrain/structure/connections/linear.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:LinearConnection
_forwardImplementation	pybrain/structure/connections/permutation.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:PermutationConnection
_forwardImplementation	pybrain/structure/connections/shared.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:SharedFullConnection
_forwardImplementation	pybrain/structure/connections/shared.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:SharedSubsamplingConnection
_forwardImplementation	pybrain/structure/connections/subsampling.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:SubsamplingConnection
_forwardImplementation	pybrain/structure/modules/biasunit.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:BiasUnit
_forwardImplementation	pybrain/structure/modules/gate.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:DoubleGateLayer
_forwardImplementation	pybrain/structure/modules/gate.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:GateLayer
_forwardImplementation	pybrain/structure/modules/gate.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:MultiplicationLayer
_forwardImplementation	pybrain/structure/modules/gate.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:SwitchLayer
_forwardImplementation	pybrain/structure/modules/gaussianlayer.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:GaussianLayer
_forwardImplementation	pybrain/structure/modules/kohonen.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:KohonenMap
_forwardImplementation	pybrain/structure/modules/linearlayer.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:LinearLayer
_forwardImplementation	pybrain/structure/modules/lstm.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:LSTMLayer
_forwardImplementation	pybrain/structure/modules/mdlstm.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:MDLSTMLayer
_forwardImplementation	pybrain/structure/modules/mdrnnlayer.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:MdrnnLayer
_forwardImplementation	pybrain/structure/modules/module.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:Module
_forwardImplementation	pybrain/structure/modules/samplelayer.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:BernoulliLayer
_forwardImplementation	pybrain/structure/modules/sigmoidlayer.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:SigmoidLayer
_forwardImplementation	pybrain/structure/modules/softmax.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:PartialSoftmaxLayer
_forwardImplementation	pybrain/structure/modules/softmax.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:SoftmaxLayer
_forwardImplementation	pybrain/structure/modules/softsign.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:SoftSignLayer
_forwardImplementation	pybrain/structure/modules/statedependentlayer.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:StateDependentLayer
_forwardImplementation	pybrain/structure/modules/table.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:Table
_forwardImplementation	pybrain/structure/modules/tanhlayer.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:TanhLayer
_forwardImplementation	pybrain/structure/networks/feedforward.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:FeedForwardNetworkComponent
_forwardImplementation	pybrain/structure/networks/network.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:Network
_forwardImplementation	pybrain/structure/networks/recurrent.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:RecurrentNetworkComponent
_forwardImplementation	tools/pybrain/pybrain/rl/explorers/continuous/normal.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:NormalExplorer
_forwardImplementation	tools/pybrain/pybrain/rl/explorers/continuous/sde.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:StateDependentExplorer
_forwardImplementation	tools/pybrain/pybrain/rl/explorers/discrete/boltzmann.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:BoltzmannExplorer
_forwardImplementation	tools/pybrain/pybrain/rl/explorers/discrete/discretesde.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:DiscreteStateDependentExplorer
_forwardImplementation	tools/pybrain/pybrain/rl/explorers/discrete/egreedy.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:EpsilonGreedyExplorer
_forwardImplementation	tools/pybrain/pybrain/rl/learners/valuebased/interface.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:ActionValueNetwork
_forwardImplementation	tools/pybrain/pybrain/rl/learners/valuebased/interface.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:ActionValueTable
_forwardImplementation	tools/pybrain/pybrain/structure/connections/connection.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:Connection
_forwardImplementation	tools/pybrain/pybrain/structure/connections/full.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:FullConnection
_forwardImplementation	tools/pybrain/pybrain/structure/connections/fullnotself.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:FullNotSelfConnection
_forwardImplementation	tools/pybrain/pybrain/structure/connections/identity.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:IdentityConnection
_forwardImplementation	tools/pybrain/pybrain/structure/connections/linear.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:LinearConnection
_forwardImplementation	tools/pybrain/pybrain/structure/connections/permutation.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:PermutationConnection
_forwardImplementation	tools/pybrain/pybrain/structure/connections/shared.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:SharedFullConnection
_forwardImplementation	tools/pybrain/pybrain/structure/connections/shared.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:SharedSubsamplingConnection
_forwardImplementation	tools/pybrain/pybrain/structure/connections/subsampling.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:SubsamplingConnection
_forwardImplementation	tools/pybrain/pybrain/structure/modules/biasunit.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:BiasUnit
_forwardImplementation	tools/pybrain/pybrain/structure/modules/gate.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:DoubleGateLayer
_forwardImplementation	tools/pybrain/pybrain/structure/modules/gate.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:GateLayer
_forwardImplementation	tools/pybrain/pybrain/structure/modules/gate.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:MultiplicationLayer
_forwardImplementation	tools/pybrain/pybrain/structure/modules/gate.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:SwitchLayer
_forwardImplementation	tools/pybrain/pybrain/structure/modules/gaussianlayer.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:GaussianLayer
_forwardImplementation	tools/pybrain/pybrain/structure/modules/kohonen.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:KohonenMap
_forwardImplementation	tools/pybrain/pybrain/structure/modules/linearlayer.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:LinearLayer
_forwardImplementation	tools/pybrain/pybrain/structure/modules/lstm.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:LSTMLayer
_forwardImplementation	tools/pybrain/pybrain/structure/modules/mdlstm.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:MDLSTMLayer
_forwardImplementation	tools/pybrain/pybrain/structure/modules/mdrnnlayer.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:MdrnnLayer
_forwardImplementation	tools/pybrain/pybrain/structure/modules/module.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:Module
_forwardImplementation	tools/pybrain/pybrain/structure/modules/samplelayer.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:BernoulliLayer
_forwardImplementation	tools/pybrain/pybrain/structure/modules/sigmoidlayer.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:SigmoidLayer
_forwardImplementation	tools/pybrain/pybrain/structure/modules/softmax.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:PartialSoftmaxLayer
_forwardImplementation	tools/pybrain/pybrain/structure/modules/softmax.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:SoftmaxLayer
_forwardImplementation	tools/pybrain/pybrain/structure/modules/softsign.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:SoftSignLayer
_forwardImplementation	tools/pybrain/pybrain/structure/modules/statedependentlayer.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:StateDependentLayer
_forwardImplementation	tools/pybrain/pybrain/structure/modules/table.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:Table
_forwardImplementation	tools/pybrain/pybrain/structure/modules/tanhlayer.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:TanhLayer
_forwardImplementation	tools/pybrain/pybrain/structure/networks/feedforward.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:FeedForwardNetworkComponent
_forwardImplementation	tools/pybrain/pybrain/structure/networks/network.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:Network
_forwardImplementation	tools/pybrain/pybrain/structure/networks/recurrent.py	/^    def _forwardImplementation(self, inbuf, outbuf):$/;"	m	class:RecurrentNetworkComponent
_freePos	pybrain/rl/environments/mazes/maze.py	/^    def _freePos(self):$/;"	m	class:Maze
_freePos	tools/pybrain/pybrain/rl/environments/mazes/maze.py	/^    def _freePos(self):$/;"	m	class:Maze
_generateConformingBatch	pybrain/optimization/distributionbased/distributionbased.py	/^    def _generateConformingBatch(self):$/;"	m	class:DistributionBasedOptimizer
_generateConformingBatch	tools/pybrain/pybrain/optimization/distributionbased/distributionbased.py	/^    def _generateConformingBatch(self):$/;"	m	class:DistributionBasedOptimizer
_generateName	pybrain/structure/networks/custom/capturegame.py	/^    def _generateName(self):$/;"	m	class:CaptureGameNetwork
_generateName	pybrain/utilities.py	/^    def _generateName(self):$/;"	m	class:Named
_generateName	tools/pybrain/pybrain/structure/networks/custom/capturegame.py	/^    def _generateName(self):$/;"	m	class:CaptureGameNetwork
_generateName	tools/pybrain/pybrain/utilities.py	/^    def _generateName(self):$/;"	m	class:Named
_generateSample	pybrain/optimization/distributionbased/distributionbased.py	/^    def _generateSample(self):$/;"	m	class:DistributionBasedOptimizer
_generateSample	tools/pybrain/pybrain/optimization/distributionbased/distributionbased.py	/^    def _generateSample(self):$/;"	m	class:DistributionBasedOptimizer
_generateValMap	pybrain/tools/plotting/fitnesslandscapes.py	/^    def _generateValMap(self):$/;"	m	class:FitnessPlotter
_generateValMap	tools/pybrain/pybrain/tools/plotting/fitnesslandscapes.py	/^    def _generateValMap(self):$/;"	m	class:FitnessPlotter
_getAction	pybrain/tools/rlgluebridge.py	/^    def _getAction(self):$/;"	m	class:RlglueAgentAdapter
_getAction	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    def _getAction(self):$/;"	m	class:RlglueAgentAdapter
_getActionProb	policy/BoltzmanAC.py	/^    def _getActionProb(self, feaList, theta):$/;"	m	class:BoltzmanPolicy
_getExplorer	pybrain/rl/learners/directsearch/policygradient.py	/^    def _getExplorer(self):$/;"	m	class:PolicyGradientLearner
_getExplorer	pybrain/rl/learners/valuebased/valuebased.py	/^    def _getExplorer(self):$/;"	m	class:ValueBasedLearner
_getExplorer	tools/pybrain/pybrain/rl/learners/directsearch/policygradient.py	/^    def _getExplorer(self):$/;"	m	class:PolicyGradientLearner
_getExplorer	tools/pybrain/pybrain/rl/learners/valuebased/valuebased.py	/^    def _getExplorer(self):$/;"	m	class:ValueBasedLearner
_getFeatureList	task/RobotMotionTask.py	/^    def _getFeatureList(self, x):$/;"	m	class:RobotMotionTask
_getFeatureListC	task/RobotMotionTask.py	/^    def _getFeatureListC(self):$/;"	m	class:RobotMotionTask
_getFitness	pybrain/optimization/populationbased/pso.py	/^    def _getFitness(self):$/;"	m	class:Particle
_getFitness	tools/pybrain/pybrain/optimization/populationbased/pso.py	/^    def _getFitness(self):$/;"	m	class:Particle
_getGenomeOfLayer	pybrain/structure/modules/evolinonetwork.py	/^    def _getGenomeOfLayer(self, layer):$/;"	m	class:EvolinoNetwork
_getGenomeOfLayer	pybrain/supervised/evolino/networkwrapper.py	/^    def _getGenomeOfLayer(self, layer):$/;"	m	class:EvolinoNetwork
_getGenomeOfLayer	pybrain/supervised/evolino/networkwrapper.py	/^    def _getGenomeOfLayer(self, layer):$/;"	m	class:NetworkWrapper
_getGenomeOfLayer	tools/pybrain/pybrain/structure/modules/evolinonetwork.py	/^    def _getGenomeOfLayer(self, layer):$/;"	m	class:EvolinoNetwork
_getGenomeOfLayer	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def _getGenomeOfLayer(self, layer):$/;"	m	class:EvolinoNetwork
_getGenomeOfLayer	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def _getGenomeOfLayer(self, layer):$/;"	m	class:NetworkWrapper
_getInputConnectionsOfLayer	pybrain/structure/modules/evolinonetwork.py	/^    def _getInputConnectionsOfLayer(self, layer):$/;"	m	class:EvolinoNetwork
_getInputConnectionsOfLayer	pybrain/supervised/evolino/networkwrapper.py	/^    def _getInputConnectionsOfLayer(self, layer):$/;"	m	class:EvolinoNetwork
_getInputConnectionsOfLayer	pybrain/supervised/evolino/networkwrapper.py	/^    def _getInputConnectionsOfLayer(self, layer):$/;"	m	class:NetworkWrapper
_getInputConnectionsOfLayer	tools/pybrain/pybrain/structure/modules/evolinonetwork.py	/^    def _getInputConnectionsOfLayer(self, layer):$/;"	m	class:EvolinoNetwork
_getInputConnectionsOfLayer	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def _getInputConnectionsOfLayer(self, layer):$/;"	m	class:EvolinoNetwork
_getInputConnectionsOfLayer	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def _getInputConnectionsOfLayer(self, layer):$/;"	m	class:NetworkWrapper
_getLastOutput	pybrain/structure/modules/evolinonetwork.py	/^    def _getLastOutput(self):$/;"	m	class:EvolinoNetwork
_getLastOutput	pybrain/supervised/evolino/networkwrapper.py	/^    def _getLastOutput(self):$/;"	m	class:EvolinoNetwork
_getLastOutput	tools/pybrain/pybrain/structure/modules/evolinonetwork.py	/^    def _getLastOutput(self):$/;"	m	class:EvolinoNetwork
_getLastOutput	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def _getLastOutput(self):$/;"	m	class:EvolinoNetwork
_getLearning	pybrain/rl/agents/learning.py	/^    def _getLearning(self):$/;"	m	class:LearningAgent
_getLearning	tools/pybrain/pybrain/rl/agents/learning.py	/^    def _getLearning(self):$/;"	m	class:LearningAgent
_getLearningRate	pybrain/rl/learners/directsearch/policygradient.py	/^    def _getLearningRate(self):$/;"	m	class:PolicyGradientLearner
_getLearningRate	tools/pybrain/pybrain/rl/learners/directsearch/policygradient.py	/^    def _getLearningRate(self):$/;"	m	class:PolicyGradientLearner
_getMaxVariance	pybrain/optimization/distributionbased/rank1.py	/^    def _getMaxVariance(self):$/;"	m	class:Rank1NES
_getMaxVariance	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^    def _getMaxVariance(self):$/;"	m	class:Rank1NES
_getMinimize	pybrain/optimization/optimizer.py	/^    def _getMinimize(self): return self.__minimize$/;"	m	class:BlackBoxOptimizer
_getMinimize	tools/pybrain/pybrain/optimization/optimizer.py	/^    def _getMinimize(self): return self.__minimize$/;"	m	class:BlackBoxOptimizer
_getModule	pybrain/rl/explorers/discrete/discrete.py	/^    def _getModule(self):$/;"	m	class:DiscreteExplorer
_getModule	pybrain/rl/explorers/discrete/discretesde.py	/^    def _getModule(self):$/;"	m	class:DiscreteStateDependentExplorer
_getModule	pybrain/rl/learners/directsearch/policygradient.py	/^    def _getModule(self):$/;"	m	class:PolicyGradientLearner
_getModule	pybrain/rl/learners/valuebased/valuebased.py	/^    def _getModule(self):$/;"	m	class:ValueBasedLearner
_getModule	tools/pybrain/pybrain/rl/explorers/discrete/discrete.py	/^    def _getModule(self):$/;"	m	class:DiscreteExplorer
_getModule	tools/pybrain/pybrain/rl/explorers/discrete/discretesde.py	/^    def _getModule(self):$/;"	m	class:DiscreteStateDependentExplorer
_getModule	tools/pybrain/pybrain/rl/learners/directsearch/policygradient.py	/^    def _getModule(self):$/;"	m	class:PolicyGradientLearner
_getModule	tools/pybrain/pybrain/rl/learners/valuebased/valuebased.py	/^    def _getModule(self):$/;"	m	class:ValueBasedLearner
_getName	pybrain/structure/connections/shared.py	/^    def _getName(self):$/;"	m	class:SharedConnection
_getName	pybrain/utilities.py	/^    def _getName(self):$/;"	m	class:Named
_getName	tools/pybrain/pybrain/structure/connections/shared.py	/^    def _getName(self):$/;"	m	class:SharedConnection
_getName	tools/pybrain/pybrain/utilities.py	/^    def _getName(self):$/;"	m	class:Named
_getRadius	pybrain/supervised/knn/lsh/nearoptimal.py	/^    def _getRadius(self):$/;"	m	class:MultiDimHash
_getRadius	tools/pybrain/pybrain/supervised/knn/lsh/nearoptimal.py	/^    def _getRadius(self):$/;"	m	class:MultiDimHash
_getRawOutput	pybrain/structure/modules/evolinonetwork.py	/^    def _getRawOutput(self):$/;"	m	class:EvolinoNetwork
_getRawOutput	pybrain/supervised/evolino/networkwrapper.py	/^    def _getRawOutput(self):$/;"	m	class:EvolinoNetwork
_getRawOutput	pybrain/supervised/evolino/networkwrapper.py	/^    def _getRawOutput(self):$/;"	m	class:NetworkWrapper
_getRawOutput	tools/pybrain/pybrain/structure/modules/evolinonetwork.py	/^    def _getRawOutput(self):$/;"	m	class:EvolinoNetwork
_getRawOutput	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def _getRawOutput(self):$/;"	m	class:EvolinoNetwork
_getRawOutput	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def _getRawOutput(self):$/;"	m	class:NetworkWrapper
_getSequenceField	pybrain/datasets/sequential.py	/^    def _getSequenceField(self, index, field):$/;"	m	class:SequentialDataSet
_getSequenceField	tools/pybrain/pybrain/datasets/sequential.py	/^    def _getSequenceField(self, index, field):$/;"	m	class:SequentialDataSet
_getSigma	pybrain/rl/explorers/continuous/normal.py	/^    def _getSigma(self):$/;"	m	class:NormalExplorer
_getSigma	pybrain/rl/explorers/continuous/sde.py	/^    def _getSigma(self):$/;"	m	class:StateDependentExplorer
_getSigma	tools/pybrain/pybrain/rl/explorers/continuous/normal.py	/^    def _getSigma(self):$/;"	m	class:NormalExplorer
_getSigma	tools/pybrain/pybrain/rl/explorers/continuous/sde.py	/^    def _getSigma(self):$/;"	m	class:StateDependentExplorer
_getTrainerForParams	pybrain/tools/gridsearch.py	/^    def _getTrainerForParams(self, params):$/;"	m	class:GridSearchCostGamma
_getTrainerForParams	pybrain/tools/gridsearch.py	/^    def _getTrainerForParams(self, params):$/;"	m	class:GridSearchDOECostGamma
_getTrainerForParams	tools/pybrain/pybrain/tools/gridsearch.py	/^    def _getTrainerForParams(self, params):$/;"	m	class:GridSearchCostGamma
_getTrainerForParams	tools/pybrain/pybrain/tools/gridsearch.py	/^    def _getTrainerForParams(self, params):$/;"	m	class:GridSearchDOECostGamma
_giveReward	pybrain/tools/rlgluebridge.py	/^    def _giveReward(self, reward):$/;"	m	class:RlglueAgentAdapter
_giveReward	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    def _giveReward(self, reward):$/;"	m	class:RlglueAgentAdapter
_globalOptima	pybrain/rl/environments/functions/multimodal.py	/^    _globalOptima = [[-pi, 12.275], [pi, 2.275], [9.42478, 2.475]]$/;"	v	class:BraninFunction
_globalOptima	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    _globalOptima = [[-pi, 12.275], [pi, 2.275], [9.42478, 2.475]]$/;"	v	class:BraninFunction
_globalScore	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def _globalScore(self, p):$/;"	m	class:Coevolution
_globalScore	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def _globalScore(self, p):$/;"	m	class:Coevolution
_globalWarming	pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    def _globalWarming(self):$/;"	m	class:RelativeGomokuTask
_globalWarming	pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    def _globalWarming(self):$/;"	m	class:RelativeCaptureTask
_globalWarming	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    def _globalWarming(self):$/;"	m	class:RelativeGomokuTask
_globalWarming	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    def _globalWarming(self):$/;"	m	class:RelativeCaptureTask
_greedyAction	pybrain/rl/learners/valuebased/linearfa.py	/^    def _greedyAction(self, state):$/;"	m	class:LinearFALearner
_greedyAction	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    def _greedyAction(self, state):$/;"	m	class:LinearFALearner
_greedyPolicy	pybrain/rl/learners/valuebased/linearfa.py	/^    def _greedyPolicy(self, state):$/;"	m	class:LinearFALearner
_greedyPolicy	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    def _greedyPolicy(self, state):$/;"	m	class:LinearFALearner
_growBuffers	pybrain/structure/modules/mdrnnlayer.py	/^    def _growBuffers(self):$/;"	m	class:MdrnnLayer
_growBuffers	pybrain/structure/modules/module.py	/^    def _growBuffers(self):$/;"	m	class:Module
_growBuffers	pybrain/structure/networks/network.py	/^    def _growBuffers(self):$/;"	m	class:Network
_growBuffers	tools/pybrain/pybrain/structure/modules/mdrnnlayer.py	/^    def _growBuffers(self):$/;"	m	class:MdrnnLayer
_growBuffers	tools/pybrain/pybrain/structure/modules/module.py	/^    def _growBuffers(self):$/;"	m	class:Module
_growBuffers	tools/pybrain/pybrain/structure/networks/network.py	/^    def _growBuffers(self):$/;"	m	class:Network
_handicapIterator	pybrain/rl/environments/twoplayergames/capturegame.py	/^    def _handicapIterator(self):$/;"	m	class:CaptureGame
_handicapIterator	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    def _handicapIterator(self):$/;"	m	class:CaptureGame
_hasConverged	pybrain/optimization/distributionbased/ves.py	/^    def _hasConverged(self):$/;"	m	class:VanillaGradientEvolutionStrategies
_hasConverged	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    def _hasConverged(self):$/;"	m	class:VanillaGradientEvolutionStrategies
_hash	pybrain/supervised/knn/lsh/minhash.py	/^    def _hash(self, item):$/;"	m	class:MinHash
_hash	tools/pybrain/pybrain/supervised/knn/lsh/minhash.py	/^    def _hash(self, item):$/;"	m	class:MinHash
_idlefunc	pybrain/rl/environments/ode/viewer.py	/^    def _idlefunc(self):$/;"	m	class:ODEViewer
_idlefunc	tools/pybrain/pybrain/rl/environments/ode/viewer.py	/^    def _idlefunc(self):$/;"	m	class:ODEViewer
_import	pybrain/utilities.py	/^def _import(name):$/;"	f
_import	tools/pybrain/pybrain/utilities.py	/^def _import(name):$/;"	f
_initBatchSize	pybrain/optimization/distributionbased/rank1.py	/^    def _initBatchSize(self):$/;"	m	class:Rank1NES
_initBatchSize	pybrain/optimization/distributionbased/snes.py	/^    def _initBatchSize(self):$/;"	m	class:SNES
_initBatchSize	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^    def _initBatchSize(self):$/;"	m	class:Rank1NES
_initBatchSize	tools/pybrain/pybrain/optimization/distributionbased/snes.py	/^    def _initBatchSize(self):$/;"	m	class:SNES
_initLearningRate	pybrain/optimization/distributionbased/rank1.py	/^    def _initLearningRate(self):$/;"	m	class:Rank1NES
_initLearningRate	pybrain/optimization/distributionbased/snes.py	/^    def _initLearningRate(self):$/;"	m	class:SNES
_initLearningRate	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^    def _initLearningRate(self):$/;"	m	class:Rank1NES
_initLearningRate	tools/pybrain/pybrain/optimization/distributionbased/snes.py	/^    def _initLearningRate(self):$/;"	m	class:SNES
_initPopulation	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def _initPopulation(self, seeds):$/;"	m	class:Coevolution
_initPopulation	pybrain/optimization/populationbased/coevolution/competitivecoevolution.py	/^    def _initPopulation(self, seeds):$/;"	m	class:CompetitiveCoevolution
_initPopulation	pybrain/optimization/populationbased/coevolution/multipopulationcoevolution.py	/^    def _initPopulation(self, seeds):$/;"	m	class:MultiPopulationCoevolution
_initPopulation	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def _initPopulation(self, seeds):$/;"	m	class:Coevolution
_initPopulation	tools/pybrain/pybrain/optimization/populationbased/coevolution/competitivecoevolution.py	/^    def _initPopulation(self, seeds):$/;"	m	class:CompetitiveCoevolution
_initPopulation	tools/pybrain/pybrain/optimization/populationbased/coevolution/multipopulationcoevolution.py	/^    def _initPopulation(self, seeds):$/;"	m	class:MultiPopulationCoevolution
_initialValues	pybrain/tools/benchmark.py	/^    def _initialValues(self):$/;"	m	class:BenchmarkDataSet
_initialValues	tools/pybrain/pybrain/tools/benchmark.py	/^    def _initialValues(self):$/;"	m	class:BenchmarkDataSet
_initializeGrids	pybrain/supervised/knn/lsh/nearoptimal.py	/^    def _initializeGrids(self):$/;"	m	class:MultiDimHash
_initializeGrids	tools/pybrain/pybrain/supervised/knn/lsh/nearoptimal.py	/^    def _initializeGrids(self):$/;"	m	class:MultiDimHash
_initializeNetwork	pybrain/rl/learners/directsearch/policygradient.py	/^    def _initializeNetwork(self):$/;"	m	class:PolicyGradientLearner
_initializeNetwork	tools/pybrain/pybrain/rl/learners/directsearch/policygradient.py	/^    def _initializeNetwork(self):$/;"	m	class:PolicyGradientLearner
_initializeProjection	pybrain/supervised/knn/lsh/nearoptimal.py	/^    def _initializeProjection(self):$/;"	m	class:MultiDimHash
_initializeProjection	tools/pybrain/pybrain/supervised/knn/lsh/nearoptimal.py	/^    def _initializeProjection(self):$/;"	m	class:MultiDimHash
_integrateObservation	pybrain/tools/rlgluebridge.py	/^    def _integrateObservation(self, observation):$/;"	m	class:RlglueAgentAdapter
_integrateObservation	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    def _integrateObservation(self, observation):$/;"	m	class:RlglueAgentAdapter
_isLastTimestep	pybrain/structure/modules/lstm.py	/^    def _isLastTimestep(self):$/;"	m	class:LSTMLayer
_isLastTimestep	pybrain/structure/networks/recurrent.py	/^    def _isLastTimestep(self):$/;"	m	class:RecurrentNetworkComponent
_isLastTimestep	tools/pybrain/pybrain/structure/modules/lstm.py	/^    def _isLastTimestep(self):$/;"	m	class:LSTMLayer
_isLastTimestep	tools/pybrain/pybrain/structure/networks/recurrent.py	/^    def _isLastTimestep(self):$/;"	m	class:RecurrentNetworkComponent
_isOutBound	environments/TrapMaze.py	/^    def _isOutBound(self, pos):$/;"	m	class:TrapMaze
_isTrap	environments/TrapMaze.py	/^    def _isTrap(self, pos): return self.mazeTable[pos[0], pos[1]] == TrapMaze.trapFlag$/;"	m	class:TrapMaze
_isWall	environments/TrapMaze.py	/^    def _isWall(self, pos): return self.mazeTable[pos[0], pos[1]] == TrapMaze.wallFlag$/;"	m	class:TrapMaze
_iterPos	pybrain/rl/environments/twoplayergames/capturegame.py	/^    def _iterPos(self):$/;"	m	class:CaptureGame
_iterPos	pybrain/rl/environments/twoplayergames/gomoku.py	/^    def _iterPos(self):$/;"	m	class:GomokuGame
_iterPos	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    def _iterPos(self):$/;"	m	class:CaptureGame
_iterPos	tools/pybrain/pybrain/rl/environments/twoplayergames/gomoku.py	/^    def _iterPos(self):$/;"	m	class:GomokuGame
_iterateOverUnits	pybrain/structure/networks/swiping.py	/^    def _iterateOverUnits(self):$/;"	m	class:SwipingNetwork
_iterateOverUnits	tools/pybrain/pybrain/structure/networks/swiping.py	/^    def _iterateOverUnits(self):$/;"	m	class:SwipingNetwork
_k	pybrain/rl/environments/functions/multimodal.py	/^    _k = 4.189828872724339$/;"	v	class:Schwefel20Function
_k	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    _k = 4.189828872724339$/;"	v	class:Schwefel20Function
_k2	pybrain/rl/environments/functions/multimodal.py	/^    _k2 = 4.20966874633\/2$/;"	v	class:Schwefel20Function
_k2	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    _k2 = 4.20966874633\/2$/;"	v	class:Schwefel20Function
_kernel	pybrain/auxiliary/gaussprocess.py	/^    def _kernel(self, a, b):$/;"	m	class:GaussianProcess
_kernel	tools/pybrain/pybrain/auxiliary/gaussprocess.py	/^    def _kernel(self, a, b):$/;"	m	class:GaussianProcess
_keyfunc	pybrain/rl/environments/ode/viewer.py	/^    def _keyfunc (self, c, x, y):$/;"	m	class:ODEViewer
_keyfunc	tools/pybrain/pybrain/rl/environments/ode/viewer.py	/^    def _keyfunc (self, c, x, y):$/;"	m	class:ODEViewer
_killProcess	pybrain/tools/rlgluebridge.py	/^    def _killProcess(self, pid):$/;"	m	class:RLCExperiment
_killProcess	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    def _killProcess(self, pid):$/;"	m	class:RLCExperiment
_killsWhich	pybrain/rl/environments/twoplayergames/pente.py	/^    def _killsWhich(self, c, pos):$/;"	m	class:PenteGame
_killsWhich	tools/pybrain/pybrain/rl/environments/twoplayergames/pente.py	/^    def _killsWhich(self, c, pos):$/;"	m	class:PenteGame
_lambda	pybrain/rl/learners/valuebased/linearfa.py	/^    _lambda = 0.9$/;"	v	class:QLambda_LinFA
_lambda	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    _lambda = 0.9$/;"	v	class:QLambda_LinFA
_lastA	pybrain/optimization/distributionbased/xnes.py	/^    def _lastA(self): return self._allDistributions[-2][1]$/;"	m	class:XNES
_lastA	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    def _lastA(self): return self._allDistributions[-2][1]$/;"	m	class:XNES
_lastCenter	pybrain/optimization/distributionbased/xnes.py	/^    def _lastCenter(self): return self._allDistributions[-2][0]$/;"	m	class:XNES
_lastCenter	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    def _lastCenter(self): return self._allDistributions[-2][0]$/;"	m	class:XNES
_learnStep	pybrain/optimization/distributionbased/cmaes.py	/^    def _learnStep(self):$/;"	m	class:CMAES
_learnStep	pybrain/optimization/distributionbased/fem.py	/^    def _learnStep(self):$/;"	m	class:FEM
_learnStep	pybrain/optimization/distributionbased/rank1.py	/^    def _learnStep(self):            $/;"	m	class:Rank1NES
_learnStep	pybrain/optimization/distributionbased/snes.py	/^    def _learnStep(self):$/;"	m	class:SNES
_learnStep	pybrain/optimization/distributionbased/ves.py	/^    def _learnStep(self):$/;"	m	class:VanillaGradientEvolutionStrategies
_learnStep	pybrain/optimization/distributionbased/xnes.py	/^    def _learnStep(self):$/;"	m	class:XNES
_learnStep	pybrain/optimization/finitedifference/fd.py	/^    def _learnStep(self):$/;"	m	class:FiniteDifferences
_learnStep	pybrain/optimization/finitedifference/pgpe.py	/^    def _learnStep(self):$/;"	m	class:PGPE
_learnStep	pybrain/optimization/finitedifference/spsa.py	/^    def _learnStep(self):$/;"	m	class:SimpleSPSA
_learnStep	pybrain/optimization/hillclimber.py	/^    def _learnStep(self):$/;"	m	class:HillClimber
_learnStep	pybrain/optimization/hillclimber.py	/^    def _learnStep(self):$/;"	m	class:StochasticHillClimber
_learnStep	pybrain/optimization/memetic/innerinversememetic.py	/^    def _learnStep(self):$/;"	m	class:InnerInverseMemeticSearch
_learnStep	pybrain/optimization/memetic/innermemetic.py	/^    def _learnStep(self):$/;"	m	class:InnerMemeticSearch
_learnStep	pybrain/optimization/memetic/inversememetic.py	/^    def _learnStep(self):$/;"	m	class:InverseMemeticSearch
_learnStep	pybrain/optimization/memetic/memetic.py	/^    def _learnStep(self):$/;"	m	class:MemeticSearch
_learnStep	pybrain/optimization/neldermead.py	/^    def _learnStep(self):$/;"	m	class:NelderMead
_learnStep	pybrain/optimization/optimizer.py	/^    def _learnStep(self):$/;"	m	class:BlackBoxOptimizer
_learnStep	pybrain/optimization/populationbased/es.py	/^    def _learnStep(self):$/;"	m	class:ES
_learnStep	pybrain/optimization/populationbased/evolution.py	/^    def _learnStep(self):$/;"	m	class:Evolution
_learnStep	pybrain/optimization/populationbased/multiobjective/nsga2.py	/^    def _learnStep(self):$/;"	m	class:MultiObjectiveGA
_learnStep	pybrain/optimization/populationbased/pso.py	/^    def _learnStep(self):$/;"	m	class:ParticleSwarmOptimizer
_learnStep	pybrain/optimization/randomsearch.py	/^    def _learnStep(self):$/;"	m	class:RandomSearch
_learnStep	tools/pybrain/pybrain/optimization/distributionbased/cmaes.py	/^    def _learnStep(self):$/;"	m	class:CMAES
_learnStep	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^    def _learnStep(self):$/;"	m	class:FEM
_learnStep	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^    def _learnStep(self):            $/;"	m	class:Rank1NES
_learnStep	tools/pybrain/pybrain/optimization/distributionbased/snes.py	/^    def _learnStep(self):$/;"	m	class:SNES
_learnStep	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    def _learnStep(self):$/;"	m	class:VanillaGradientEvolutionStrategies
_learnStep	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    def _learnStep(self):$/;"	m	class:XNES
_learnStep	tools/pybrain/pybrain/optimization/finitedifference/fd.py	/^    def _learnStep(self):$/;"	m	class:FiniteDifferences
_learnStep	tools/pybrain/pybrain/optimization/finitedifference/pgpe.py	/^    def _learnStep(self):$/;"	m	class:PGPE
_learnStep	tools/pybrain/pybrain/optimization/finitedifference/spsa.py	/^    def _learnStep(self):$/;"	m	class:SimpleSPSA
_learnStep	tools/pybrain/pybrain/optimization/hillclimber.py	/^    def _learnStep(self):$/;"	m	class:HillClimber
_learnStep	tools/pybrain/pybrain/optimization/hillclimber.py	/^    def _learnStep(self):$/;"	m	class:StochasticHillClimber
_learnStep	tools/pybrain/pybrain/optimization/memetic/innerinversememetic.py	/^    def _learnStep(self):$/;"	m	class:InnerInverseMemeticSearch
_learnStep	tools/pybrain/pybrain/optimization/memetic/innermemetic.py	/^    def _learnStep(self):$/;"	m	class:InnerMemeticSearch
_learnStep	tools/pybrain/pybrain/optimization/memetic/inversememetic.py	/^    def _learnStep(self):$/;"	m	class:InverseMemeticSearch
_learnStep	tools/pybrain/pybrain/optimization/memetic/memetic.py	/^    def _learnStep(self):$/;"	m	class:MemeticSearch
_learnStep	tools/pybrain/pybrain/optimization/neldermead.py	/^    def _learnStep(self):$/;"	m	class:NelderMead
_learnStep	tools/pybrain/pybrain/optimization/optimizer.py	/^    def _learnStep(self):$/;"	m	class:BlackBoxOptimizer
_learnStep	tools/pybrain/pybrain/optimization/populationbased/es.py	/^    def _learnStep(self):$/;"	m	class:ES
_learnStep	tools/pybrain/pybrain/optimization/populationbased/evolution.py	/^    def _learnStep(self):$/;"	m	class:Evolution
_learnStep	tools/pybrain/pybrain/optimization/populationbased/multiobjective/nsga2.py	/^    def _learnStep(self):$/;"	m	class:MultiObjectiveGA
_learnStep	tools/pybrain/pybrain/optimization/populationbased/pso.py	/^    def _learnStep(self):$/;"	m	class:ParticleSwarmOptimizer
_learnStep	tools/pybrain/pybrain/optimization/randomsearch.py	/^    def _learnStep(self):$/;"	m	class:RandomSearch
_legalizeIt	pybrain/rl/environments/twoplayergames/capturegameplayers/moduledecision.py	/^    def _legalizeIt(self, a):$/;"	m	class:ModuleDecidingPlayer
_legalizeIt	pybrain/rl/environments/twoplayergames/gomokuplayers/moduledecision.py	/^    def _legalizeIt(self, a):$/;"	m	class:ModuleDecidingPlayer
_legalizeIt	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/moduledecision.py	/^    def _legalizeIt(self, a):$/;"	m	class:ModuleDecidingPlayer
_legalizeIt	tools/pybrain/pybrain/rl/environments/twoplayergames/gomokuplayers/moduledecision.py	/^    def _legalizeIt(self, a):$/;"	m	class:ModuleDecidingPlayer
_linkToAll	pybrain/structure/networks/custom/capturegame.py	/^    def _linkToAll(self, inmod, mesh, conn):$/;"	m	class:CaptureGameNetwork
_linkToAll	tools/pybrain/pybrain/structure/networks/custom/capturegame.py	/^    def _linkToAll(self, inmod, mesh, conn):$/;"	m	class:CaptureGameNetwork
_loadTexture	pybrain/rl/environments/ode/viewer.py	/^    def _loadTexture(textureFile):$/;"	m	class:ODEViewer
_loadTexture	tools/pybrain/pybrain/rl/environments/ode/viewer.py	/^    def _loadTexture(textureFile):$/;"	m	class:ODEViewer
_logDerivFactorSigma	pybrain/optimization/distributionbased/ves.py	/^    def _logDerivFactorSigma(self, sample, x, invSigma, factorSigma):$/;"	m	class:VanillaGradientEvolutionStrategies
_logDerivFactorSigma	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    def _logDerivFactorSigma(self, sample, x, invSigma, factorSigma):$/;"	m	class:VanillaGradientEvolutionStrategies
_logDerivX	pybrain/optimization/distributionbased/ves.py	/^    def _logDerivX(self, sample, x, invSigma):$/;"	m	class:VanillaGradientEvolutionStrategies
_logDerivX	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    def _logDerivX(self, sample, x, invSigma):$/;"	m	class:VanillaGradientEvolutionStrategies
_logDerivsFactorSigma	pybrain/optimization/distributionbased/nes.py	/^    def _logDerivsFactorSigma(self, samples, mu, invSigma, factorSigma):$/;"	m	class:OriginalNES
_logDerivsFactorSigma	pybrain/optimization/distributionbased/ves.py	/^    def _logDerivsFactorSigma(self, samples, x, invSigma, factorSigma):$/;"	m	class:VanillaGradientEvolutionStrategies
_logDerivsFactorSigma	tools/pybrain/pybrain/optimization/distributionbased/nes.py	/^    def _logDerivsFactorSigma(self, samples, mu, invSigma, factorSigma):$/;"	m	class:OriginalNES
_logDerivsFactorSigma	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    def _logDerivsFactorSigma(self, samples, x, invSigma, factorSigma):$/;"	m	class:VanillaGradientEvolutionStrategies
_logDerivsX	pybrain/optimization/distributionbased/ves.py	/^    def _logDerivsX(self, samples, x, invSigma):$/;"	m	class:VanillaGradientEvolutionStrategies
_logDerivsX	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    def _logDerivsX(self, samples, x, invSigma):$/;"	m	class:VanillaGradientEvolutionStrategies
_makeMdrnnLayer	pybrain/structure/networks/mdrnn.py	/^    def _makeMdrnnLayer(self):$/;"	m	class:_Mdrnn
_makeMdrnnLayer	tools/pybrain/pybrain/structure/networks/mdrnn.py	/^    def _makeMdrnnLayer(self):$/;"	m	class:_Mdrnn
_manipulateGenome	pybrain/supervised/evolino/gfilter.py	/^    def _manipulateGenome(self, genome, manfunc=None):$/;"	m	class:SimpleGenomeManipulation
_manipulateGenome	tools/pybrain/pybrain/supervised/evolino/gfilter.py	/^    def _manipulateGenome(self, genome, manfunc=None):$/;"	m	class:SimpleGenomeManipulation
_manipulateValue	pybrain/supervised/evolino/gfilter.py	/^    def _manipulateValue(self, value):$/;"	m	class:Randomization
_manipulateValue	pybrain/supervised/evolino/gfilter.py	/^    def _manipulateValue(self, value):$/;"	m	class:SimpleGenomeManipulation
_manipulateValue	pybrain/supervised/evolino/gfilter.py	/^    def _manipulateValue(self, value):$/;"	m	class:SimpleMutation
_manipulateValue	tools/pybrain/pybrain/supervised/evolino/gfilter.py	/^    def _manipulateValue(self, value):$/;"	m	class:Randomization
_manipulateValue	tools/pybrain/pybrain/supervised/evolino/gfilter.py	/^    def _manipulateValue(self, value):$/;"	m	class:SimpleGenomeManipulation
_manipulateValue	tools/pybrain/pybrain/supervised/evolino/gfilter.py	/^    def _manipulateValue(self, value):$/;"	m	class:SimpleMutation
_mass2dens	pybrain/rl/environments/ode/tools/xodetools.py	/^    def _mass2dens(self, shape, size, mass):$/;"	m	class:XODEfile
_mass2dens	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def _mass2dens(self, shape, size, mass):$/;"	m	class:XODEfile
_module	pybrain/rl/explorers/discrete/discrete.py	/^    _module = None$/;"	v	class:DiscreteExplorer
_module	pybrain/rl/learners/directsearch/policygradient.py	/^    _module = None$/;"	v	class:PolicyGradientLearner
_module	pybrain/rl/learners/valuebased/valuebased.py	/^    _module = None$/;"	v	class:ValueBasedLearner
_module	tools/pybrain/pybrain/rl/explorers/discrete/discrete.py	/^    _module = None$/;"	v	class:DiscreteExplorer
_module	tools/pybrain/pybrain/rl/learners/directsearch/policygradient.py	/^    _module = None$/;"	v	class:PolicyGradientLearner
_module	tools/pybrain/pybrain/rl/learners/valuebased/valuebased.py	/^    _module = None$/;"	v	class:ValueBasedLearner
_motionfunc	pybrain/rl/environments/ode/viewer.py	/^    def _motionfunc(self, x, z):$/;"	m	class:ODEViewer
_motionfunc	tools/pybrain/pybrain/rl/environments/ode/viewer.py	/^    def _motionfunc(self, x, z):$/;"	m	class:ODEViewer
_moveGridIntoBounds	pybrain/tools/gridsearch.py	/^    def _moveGridIntoBounds(self, grid):$/;"	m	class:GridSearchDOE
_moveGridIntoBounds	tools/pybrain/pybrain/tools/gridsearch.py	/^    def _moveGridIntoBounds(self, grid):$/;"	m	class:GridSearchDOE
_moveInDir	pybrain/rl/environments/mazes/maze.py	/^    def _moveInDir(self, pos, dir):$/;"	m	class:Maze
_moveInDir	tools/pybrain/pybrain/rl/environments/mazes/maze.py	/^    def _moveInDir(self, pos, dir):$/;"	m	class:Maze
_mutateIndividual	pybrain/supervised/evolino/gfilter.py	/^    def _mutateIndividual(self, individual):$/;"	m	class:SimpleMutation
_mutateIndividual	tools/pybrain/pybrain/supervised/evolino/gfilter.py	/^    def _mutateIndividual(self, individual):$/;"	m	class:SimpleMutation
_name	pybrain/utilities.py	/^    _name = None$/;"	v	class:Named
_name	tools/pybrain/pybrain/utilities.py	/^    _name = None$/;"	v	class:Named
_nameIds	pybrain/utilities.py	/^    _nameIds = count(0)$/;"	v	class:Named
_nameIds	tools/pybrain/pybrain/utilities.py	/^    _nameIds = count(0)$/;"	v	class:Named
_near_callback	pybrain/rl/environments/ode/environment.py	/^    def _near_callback(self, args, geom1, geom2):$/;"	m	class:ODEEnvironment
_near_callback	pybrain/rl/environments/ode/instances/ccrl.py	/^    def _near_callback(self, args, geom1, geom2):$/;"	m	class:CCRLEnvironment
_near_callback	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def _near_callback(self, args, geom1, geom2):$/;"	m	class:ODEEnvironment
_near_callback	tools/pybrain/pybrain/rl/environments/ode/instances/ccrl.py	/^    def _near_callback(self, args, geom1, geom2):$/;"	m	class:CCRLEnvironment
_neighbors	pybrain/rl/environments/twoplayergames/capturegame.py	/^    def _neighbors(self, pos):$/;"	m	class:CaptureGame
_neighbors	pybrain/rl/environments/twoplayergames/gomoku.py	/^    def _neighbors(self, pos):$/;"	m	class:GomokuGame
_neighbors	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    def _neighbors(self, pos):$/;"	m	class:CaptureGame
_neighbors	tools/pybrain/pybrain/rl/environments/twoplayergames/gomoku.py	/^    def _neighbors(self, pos):$/;"	m	class:GomokuGame
_neuronIterator	pybrain/structure/networks/neurondecomposable.py	/^    def _neuronIterator(self):$/;"	m	class:NeuronDecomposableNetwork
_neuronIterator	tools/pybrain/pybrain/structure/networks/neurondecomposable.py	/^    def _neuronIterator(self):$/;"	m	class:NeuronDecomposableNetwork
_newpdf	pybrain/optimization/distributionbased/xnes.py	/^    def _newpdf(self, s):$/;"	m	class:XNES
_newpdf	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    def _newpdf(self, s):$/;"	m	class:XNES
_next_id	pybrain/supervised/evolino/individual.py	/^    _next_id = 0$/;"	v	class:EvolinoSubIndividual
_next_id	tools/pybrain/pybrain/supervised/evolino/individual.py	/^    _next_id = 0$/;"	v	class:EvolinoSubIndividual
_non_dominated_front_arr	pybrain/tools/nondominated.py	/^def _non_dominated_front_arr(iterable, key=lambda x: x, allowequality=True):$/;"	f
_non_dominated_front_arr	tools/pybrain/pybrain/tools/nondominated.py	/^def _non_dominated_front_arr(iterable, key=lambda x: x, allowequality=True):$/;"	f
_non_dominated_front_fast	pybrain/tools/nondominated.py	/^def _non_dominated_front_fast(iterable, key=lambda x: x, allowequality=True):$/;"	f
_non_dominated_front_fast	tools/pybrain/pybrain/tools/nondominated.py	/^def _non_dominated_front_fast(iterable, key=lambda x: x, allowequality=True):$/;"	f
_non_dominated_front_merge	pybrain/tools/nondominated.py	/^def _non_dominated_front_merge(iterable, key=lambda x: x, allowequality=True):$/;"	f
_non_dominated_front_merge	tools/pybrain/pybrain/tools/nondominated.py	/^def _non_dominated_front_merge(iterable, key=lambda x: x, allowequality=True):$/;"	f
_non_dominated_front_merge_arr	pybrain/tools/nondominated.py	/^def _non_dominated_front_merge_arr(iterable, key=lambda x: x, allowequality=True):$/;"	f
_non_dominated_front_merge_arr	tools/pybrain/pybrain/tools/nondominated.py	/^def _non_dominated_front_merge_arr(iterable, key=lambda x: x, allowequality=True):$/;"	f
_non_dominated_front_old	pybrain/tools/nondominated.py	/^def _non_dominated_front_old(iterable, key=lambda x: x, allowequality=True):$/;"	f
_non_dominated_front_old	tools/pybrain/pybrain/tools/nondominated.py	/^def _non_dominated_front_old(iterable, key=lambda x: x, allowequality=True):$/;"	f
_notify	pybrain/optimization/distributionbased/rank1.py	/^    def _notify(self):$/;"	m	class:Rank1NES
_notify	pybrain/optimization/memetic/memetic.py	/^    def _notify(self):$/;"	m	class:MemeticSearch
_notify	pybrain/optimization/optimizer.py	/^    def _notify(self):$/;"	m	class:BlackBoxOptimizer
_notify	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^    def _notify(self):$/;"	m	class:Rank1NES
_notify	tools/pybrain/pybrain/optimization/memetic/memetic.py	/^    def _notify(self):$/;"	m	class:MemeticSearch
_notify	tools/pybrain/pybrain/optimization/optimizer.py	/^    def _notify(self):$/;"	m	class:BlackBoxOptimizer
_numSelected	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def _numSelected(self):$/;"	m	class:Coevolution
_numSelected	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def _numSelected(self):$/;"	m	class:Coevolution
_oldpdf	pybrain/optimization/distributionbased/xnes.py	/^    def _oldpdf(self, s):$/;"	m	class:XNES
_oldpdf	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    def _oldpdf(self, s):$/;"	m	class:XNES
_onStep	pybrain/tools/gridsearch.py	/^    def _onStep(self):$/;"	m	class:GridSearch2D
_onStep	tools/pybrain/pybrain/tools/gridsearch.py	/^    def _onStep(self):$/;"	m	class:GridSearch2D
_oneEvaluation	pybrain/optimization/memetic/memetic.py	/^    def _oneEvaluation(self, evaluable):$/;"	m	class:MemeticSearch
_oneEvaluation	pybrain/optimization/optimizer.py	/^    def _oneEvaluation(self, evaluable):$/;"	m	class:BlackBoxOptimizer
_oneEvaluation	tools/pybrain/pybrain/optimization/memetic/memetic.py	/^    def _oneEvaluation(self, evaluable):$/;"	m	class:MemeticSearch
_oneEvaluation	tools/pybrain/pybrain/optimization/optimizer.py	/^    def _oneEvaluation(self, evaluable):$/;"	m	class:BlackBoxOptimizer
_oneGame	pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    def _oneGame(self, preset = None):$/;"	m	class:RelativeGomokuTask
_oneGame	pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    def _oneGame(self, preset=None):$/;"	m	class:RelativeCaptureTask
_oneGame	pybrain/rl/experiments/tournament.py	/^    def _oneGame(self, p1, p2):$/;"	m	class:Tournament
_oneGame	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    def _oneGame(self, preset = None):$/;"	m	class:RelativeGomokuTask
_oneGame	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    def _oneGame(self, preset=None):$/;"	m	class:RelativeCaptureTask
_oneGame	tools/pybrain/pybrain/rl/experiments/tournament.py	/^    def _oneGame(self, p1, p2):$/;"	m	class:Tournament
_oneGeneration	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def _oneGeneration(self):$/;"	m	class:Coevolution
_oneGeneration	pybrain/optimization/populationbased/coevolution/competitivecoevolution.py	/^    def _oneGeneration(self):$/;"	m	class:CompetitiveCoevolution
_oneGeneration	pybrain/optimization/populationbased/coevolution/multipopulationcoevolution.py	/^    def _oneGeneration(self):$/;"	m	class:MultiPopulationCoevolution
_oneGeneration	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def _oneGeneration(self):$/;"	m	class:Coevolution
_oneGeneration	tools/pybrain/pybrain/optimization/populationbased/coevolution/competitivecoevolution.py	/^    def _oneGeneration(self):$/;"	m	class:CompetitiveCoevolution
_oneGeneration	tools/pybrain/pybrain/optimization/populationbased/coevolution/multipopulationcoevolution.py	/^    def _oneGeneration(self):$/;"	m	class:MultiPopulationCoevolution
_oneInteraction	pybrain/rl/experiments/episodic.py	/^    def _oneInteraction(self):$/;"	m	class:EpisodicExperiment
_oneInteraction	pybrain/rl/experiments/experiment.py	/^    def _oneInteraction(self):$/;"	m	class:Experiment
_oneInteraction	tools/pybrain/pybrain/rl/experiments/episodic.py	/^    def _oneInteraction(self):$/;"	m	class:EpisodicExperiment
_oneInteraction	tools/pybrain/pybrain/rl/experiments/experiment.py	/^    def _oneInteraction(self):$/;"	m	class:Experiment
_onlineLearn	pybrain/optimization/distributionbased/ves.py	/^    def _onlineLearn(self):$/;"	m	class:VanillaGradientEvolutionStrategies
_onlineLearn	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    def _onlineLearn(self):$/;"	m	class:VanillaGradientEvolutionStrategies
_oscillatify	pybrain/rl/environments/functions/transformations.py	/^    def _oscillatify(x):$/;"	m	class:BBOBTransformationFunction
_oscillatify	tools/pybrain/pybrain/rl/environments/functions/transformations.py	/^    def _oscillatify(x):$/;"	m	class:BBOBTransformationFunction
_parseBodies	pybrain/rl/environments/ode/environment.py	/^    def _parseBodies(self, node):$/;"	m	class:ODEEnvironment
_parseBodies	pybrain/rl/environments/ode/sensors.py	/^    def _parseBodies(self, node):$/;"	m	class:BodyPositionSensor
_parseBodies	pybrain/rl/environments/ode/sensors.py	/^    def _parseBodies(self, node=None):$/;"	m	class:SpecificBodyPositionSensor
_parseBodies	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def _parseBodies(self, node):$/;"	m	class:ODEEnvironment
_parseBodies	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def _parseBodies(self, node):$/;"	m	class:BodyPositionSensor
_parseBodies	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def _parseBodies(self, node=None):$/;"	m	class:SpecificBodyPositionSensor
_parseGeomBox	pybrain/rl/environments/ode/xode_changes/geom.py	/^    def _parseGeomBox(self, attrs):$/;"	m	class:Geom
_parseGeomBox	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^    def _parseGeomBox(self, attrs):$/;"	m	class:Geom
_parseGeomCCylinder	pybrain/rl/environments/ode/xode_changes/geom.py	/^    def _parseGeomCCylinder(self, attrs):$/;"	m	class:Geom
_parseGeomCCylinder	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^    def _parseGeomCCylinder(self, attrs):$/;"	m	class:Geom
_parseGeomCylinder	pybrain/rl/environments/ode/xode_changes/geom.py	/^    def _parseGeomCylinder(self, attrs):$/;"	m	class:Geom
_parseGeomCylinder	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^    def _parseGeomCylinder(self, attrs):$/;"	m	class:Geom
_parseGeomPlane	pybrain/rl/environments/ode/xode_changes/geom.py	/^    def _parseGeomPlane(self, attrs):$/;"	m	class:Geom
_parseGeomPlane	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^    def _parseGeomPlane(self, attrs):$/;"	m	class:Geom
_parseGeomRay	pybrain/rl/environments/ode/xode_changes/geom.py	/^    def _parseGeomRay(self, attrs):$/;"	m	class:Geom
_parseGeomRay	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^    def _parseGeomRay(self, attrs):$/;"	m	class:Geom
_parseGeomSphere	pybrain/rl/environments/ode/xode_changes/geom.py	/^    def _parseGeomSphere(self, attrs):$/;"	m	class:Geom
_parseGeomSphere	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^    def _parseGeomSphere(self, attrs):$/;"	m	class:Geom
_parseJoints	pybrain/rl/environments/ode/actuators.py	/^    def _parseJoints(self, node):$/;"	m	class:JointActuator
_parseJoints	pybrain/rl/environments/ode/actuators.py	/^    def _parseJoints(self, node=None):$/;"	m	class:CopyJointActuator
_parseJoints	pybrain/rl/environments/ode/actuators.py	/^    def _parseJoints(self, node=None):$/;"	m	class:SpecificJointActuator
_parseJoints	pybrain/rl/environments/ode/sensors.py	/^    def _parseJoints(self, node):$/;"	m	class:JointSensor
_parseJoints	pybrain/rl/environments/ode/sensors.py	/^    def _parseJoints(self, node=None):$/;"	m	class:SpecificJointSensor
_parseJoints	pybrain/rl/environments/ode/sensors.py	/^    def _parseJoints(self, node=None):$/;"	m	class:SpecificJointVelocitySensor
_parseJoints	tools/pybrain/pybrain/rl/environments/ode/actuators.py	/^    def _parseJoints(self, node):$/;"	m	class:JointActuator
_parseJoints	tools/pybrain/pybrain/rl/environments/ode/actuators.py	/^    def _parseJoints(self, node=None):$/;"	m	class:CopyJointActuator
_parseJoints	tools/pybrain/pybrain/rl/environments/ode/actuators.py	/^    def _parseJoints(self, node=None):$/;"	m	class:SpecificJointActuator
_parseJoints	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def _parseJoints(self, node):$/;"	m	class:JointSensor
_parseJoints	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def _parseJoints(self, node=None):$/;"	m	class:SpecificJointSensor
_parseJoints	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def _parseJoints(self, node=None):$/;"	m	class:SpecificJointVelocitySensor
_parseMassShape	pybrain/rl/environments/ode/xode_changes/body.py	/^    def _parseMassShape(self, attrs):$/;"	m	class:Mass
_parseMassShape	tools/pybrain/pybrain/rl/environments/ode/xode_changes/body.py	/^    def _parseMassShape(self, attrs):$/;"	m	class:Mass
_parseTriMesh	pybrain/rl/environments/ode/xode_changes/geom.py	/^    def _parseTriMesh(self, attrs):$/;"	m	class:Geom
_parseTriMesh	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^    def _parseTriMesh(self, attrs):$/;"	m	class:Geom
_passivemotionfunc	pybrain/rl/environments/ode/viewer.py	/^    def _passivemotionfunc(self, x, z):$/;"	m	class:ODEViewer
_passivemotionfunc	tools/pybrain/pybrain/rl/environments/ode/viewer.py	/^    def _passivemotionfunc(self, x, z):$/;"	m	class:ODEViewer
_permsForSwiping	pybrain/structure/networks/mdrnn.py	/^    def _permsForSwiping(self):$/;"	m	class:_Mdrnn
_permsForSwiping	pybrain/structure/networks/mdrnn.py	/^    def _permsForSwiping(self):$/;"	m	class:_MultiDirectionalMdrnn
_permsForSwiping	tools/pybrain/pybrain/structure/networks/mdrnn.py	/^    def _permsForSwiping(self):$/;"	m	class:_Mdrnn
_permsForSwiping	tools/pybrain/pybrain/structure/networks/mdrnn.py	/^    def _permsForSwiping(self):$/;"	m	class:_MultiDirectionalMdrnn
_permuteSequence	pybrain/tools/gridsearch.py	/^    def _permuteSequence(self, seq):$/;"	m	class:GridSearch2D
_permuteSequence	tools/pybrain/pybrain/tools/gridsearch.py	/^    def _permuteSequence(self, seq):$/;"	m	class:GridSearch2D
_permute_sequence	pybrain/supervised/trainers/svmtrainer.py	/^    def _permute_sequence(self, seq):$/;"	m	class:GridSearch
_permute_sequence	tools/pybrain/pybrain/supervised/trainers/svmtrainer.py	/^    def _permute_sequence(self, seq):$/;"	m	class:GridSearch
_popsize	pybrain/optimization/populationbased/es.py	/^    def _popsize(self):$/;"	m	class:ES
_popsize	tools/pybrain/pybrain/optimization/populationbased/es.py	/^    def _popsize(self):$/;"	m	class:ES
_population	pybrain/optimization/distributionbased/rank1.py	/^    def _population(self):$/;"	m	class:Rank1NES
_population	pybrain/optimization/distributionbased/snes.py	/^    def _population(self):$/;"	m	class:SNES
_population	pybrain/optimization/distributionbased/xnes.py	/^    def _population(self):$/;"	m	class:XNES
_population	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^    def _population(self):$/;"	m	class:Rank1NES
_population	tools/pybrain/pybrain/optimization/distributionbased/snes.py	/^    def _population(self):$/;"	m	class:SNES
_population	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    def _population(self):$/;"	m	class:XNES
_printPredefined	pybrain/structure/networks/swiping.py	/^    def _printPredefined(self, dic=None, indent=0):$/;"	m	class:SwipingNetwork
_printPredefined	tools/pybrain/pybrain/structure/networks/swiping.py	/^    def _printPredefined(self, dic=None, indent=0):$/;"	m	class:SwipingNetwork
_print_help	pybrain/rl/environments/ode/environment.py	/^    def _print_help(self):$/;"	m	class:ODEEnvironment
_print_help	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def _print_help(self):$/;"	m	class:ODEEnvironment
_printfunc	pybrain/rl/environments/ode/environment.py	/^    def _printfunc (self):$/;"	m	class:ODEEnvironment
_printfunc	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def _printfunc (self):$/;"	m	class:ODEEnvironment
_produceAllPairs	pybrain/rl/experiments/tournament.py	/^    def _produceAllPairs(self):$/;"	m	class:Tournament
_produceAllPairs	tools/pybrain/pybrain/rl/experiments/tournament.py	/^    def _produceAllPairs(self):$/;"	m	class:Tournament
_produceNewSample	pybrain/optimization/distributionbased/fem.py	/^    def _produceNewSample(self):$/;"	m	class:FEM
_produceNewSample	pybrain/optimization/distributionbased/ves.py	/^    def _produceNewSample(self, z=None):$/;"	m	class:VanillaGradientEvolutionStrategies
_produceNewSample	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^    def _produceNewSample(self):$/;"	m	class:FEM
_produceNewSample	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    def _produceNewSample(self, z=None):$/;"	m	class:VanillaGradientEvolutionStrategies
_produceSample	pybrain/optimization/distributionbased/rank1.py	/^    def _produceSample(self):$/;"	m	class:Rank1NES
_produceSample	pybrain/optimization/distributionbased/snes.py	/^    def _produceSample(self):$/;"	m	class:SNES
_produceSample	pybrain/optimization/distributionbased/xnes.py	/^    def _produceSample(self):$/;"	m	class:XNES
_produceSample	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^    def _produceSample(self):$/;"	m	class:Rank1NES
_produceSample	tools/pybrain/pybrain/optimization/distributionbased/snes.py	/^    def _produceSample(self):$/;"	m	class:SNES
_produceSample	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    def _produceSample(self):$/;"	m	class:XNES
_produceSamples	pybrain/optimization/distributionbased/rank1.py	/^    def _produceSamples(self):$/;"	m	class:Rank1NES
_produceSamples	pybrain/optimization/distributionbased/snes.py	/^    def _produceSamples(self):$/;"	m	class:SNES
_produceSamples	pybrain/optimization/distributionbased/ves.py	/^    def _produceSamples(self):$/;"	m	class:VanillaGradientEvolutionStrategies
_produceSamples	pybrain/optimization/distributionbased/xnes.py	/^    def _produceSamples(self):$/;"	m	class:XNES
_produceSamples	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^    def _produceSamples(self):$/;"	m	class:Rank1NES
_produceSamples	tools/pybrain/pybrain/optimization/distributionbased/snes.py	/^    def _produceSamples(self):$/;"	m	class:SNES
_produceSamples	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    def _produceSamples(self):$/;"	m	class:VanillaGradientEvolutionStrategies
_produceSamples	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    def _produceSamples(self):$/;"	m	class:XNES
_provideSequences	pybrain/datasets/sequential.py	/^    def _provideSequences(self):$/;"	m	class:SequentialDataSet
_provideSequences	pybrain/datasets/supervised.py	/^    def _provideSequences(self):$/;"	m	class:SupervisedDataSet
_provideSequences	tools/pybrain/pybrain/datasets/sequential.py	/^    def _provideSequences(self):$/;"	m	class:SequentialDataSet
_provideSequences	tools/pybrain/pybrain/datasets/supervised.py	/^    def _provideSequences(self):$/;"	m	class:SupervisedDataSet
_qValues	pybrain/rl/learners/valuebased/linearfa.py	/^    def _qValues(self, state):$/;"	m	class:LinearFALearner
_qValues	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    def _qValues(self, state):$/;"	m	class:LinearFALearner
_range_f	pybrain/supervised/trainers/svmtrainer.py	/^    def _range_f(self, begin, end, step):$/;"	m	class:GridSearch
_range_f	tools/pybrain/pybrain/supervised/trainers/svmtrainer.py	/^    def _range_f(self, begin, end, step):$/;"	m	class:GridSearch
_redraw	pybrain/supervised/trainers/svmtrainer.py	/^    def _redraw(self, db, tofile=0, eta=None):$/;"	m	class:GridSearch
_redraw	tools/pybrain/pybrain/supervised/trainers/svmtrainer.py	/^    def _redraw(self, db, tofile=0, eta=None):$/;"	m	class:GridSearch
_relEval	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def _relEval(self, p, opp):$/;"	m	class:Coevolution
_relEval	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def _relEval(self, p, opp):$/;"	m	class:Coevolution
_render	pybrain/rl/environments/cartpole/renderer.py	/^    def _render(self):$/;"	m	class:CartPoleRenderer
_render	pybrain/rl/environments/flexcube/viewer.py	/^    def _render(self):$/;"	m	class:FlexCubeRenderer
_render	pybrain/rl/environments/renderer.py	/^    def _render(self):$/;"	m	class:Renderer
_render	pybrain/rl/environments/shipsteer/viewer.py	/^    def _render(self):$/;"	m	class:FlexCubeRenderer
_render	pybrain/rl/environments/simple/renderer.py	/^    def _render(self):$/;"	m	class:SimpleRenderer
_render	tools/pybrain/pybrain/rl/environments/cartpole/renderer.py	/^    def _render(self):$/;"	m	class:CartPoleRenderer
_render	tools/pybrain/pybrain/rl/environments/flexcube/viewer.py	/^    def _render(self):$/;"	m	class:FlexCubeRenderer
_render	tools/pybrain/pybrain/rl/environments/renderer.py	/^    def _render(self):$/;"	m	class:Renderer
_render	tools/pybrain/pybrain/rl/environments/shipsteer/viewer.py	/^    def _render(self):$/;"	m	class:FlexCubeRenderer
_render	tools/pybrain/pybrain/rl/environments/simple/renderer.py	/^    def _render(self):$/;"	m	class:SimpleRenderer
_replaceByMutation	pybrain/optimization/populationbased/es.py	/^    def _replaceByMutation(self, index):$/;"	m	class:ES
_replaceByMutation	tools/pybrain/pybrain/optimization/populationbased/es.py	/^    def _replaceByMutation(self, index):$/;"	m	class:ES
_replaceParamsByMother	pybrain/structure/connections/shared.py	/^    def _replaceParamsByMother(self, mother):$/;"	m	class:SharedConnection
_replaceParamsByMother	tools/pybrain/pybrain/structure/connections/shared.py	/^    def _replaceParamsByMother(self, mother):$/;"	m	class:SharedConnection
_rescale	pybrain/tools/plotting/fitnesslandscapes.py	/^    def _rescale(self, xmin, xmax, ymin, ymax):$/;"	m	class:FitnessPlotter
_rescale	tools/pybrain/pybrain/tools/plotting/fitnesslandscapes.py	/^    def _rescale(self, xmin, xmax, ymin, ymax):$/;"	m	class:FitnessPlotter
_resetBuffers	pybrain/structure/evolvables/cheaplycopiable.py	/^    def _resetBuffers(self):$/;"	m	class:CheaplyCopiable
_resetBuffers	pybrain/structure/evolvables/maskedmodule.py	/^    def _resetBuffers(self):$/;"	m	class:MaskedModule
_resetBuffers	pybrain/structure/modules/mdrnnlayer.py	/^    def _resetBuffers(self, length=1):$/;"	m	class:MdrnnLayer
_resetBuffers	pybrain/structure/modules/module.py	/^    def _resetBuffers(self, length=1):$/;"	m	class:Module
_resetBuffers	pybrain/structure/networks/network.py	/^    def _resetBuffers(self, length=1):$/;"	m	class:Network
_resetBuffers	tools/pybrain/pybrain/structure/evolvables/cheaplycopiable.py	/^    def _resetBuffers(self):$/;"	m	class:CheaplyCopiable
_resetBuffers	tools/pybrain/pybrain/structure/evolvables/maskedmodule.py	/^    def _resetBuffers(self):$/;"	m	class:MaskedModule
_resetBuffers	tools/pybrain/pybrain/structure/modules/mdrnnlayer.py	/^    def _resetBuffers(self, length=1):$/;"	m	class:MdrnnLayer
_resetBuffers	tools/pybrain/pybrain/structure/modules/module.py	/^    def _resetBuffers(self, length=1):$/;"	m	class:Module
_resetBuffers	tools/pybrain/pybrain/structure/networks/network.py	/^    def _resetBuffers(self, length=1):$/;"	m	class:Network
_resize	pybrain/datasets/dataset.py	/^    def _resize(self, label=None):$/;"	m	class:DataSet
_resize	tools/pybrain/pybrain/datasets/dataset.py	/^    def _resize(self, label=None):$/;"	m	class:DataSet
_resizeArray	pybrain/datasets/dataset.py	/^    def _resizeArray(self, a):$/;"	m	class:DataSet
_resizeArray	tools/pybrain/pybrain/datasets/dataset.py	/^    def _resizeArray(self, a):$/;"	m	class:DataSet
_revertToSafety	pybrain/optimization/distributionbased/ves.py	/^    def _revertToSafety(self):$/;"	m	class:VanillaGradientEvolutionStrategies
_revertToSafety	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    def _revertToSafety(self):$/;"	m	class:VanillaGradientEvolutionStrategies
_sample2base	pybrain/optimization/distributionbased/snes.py	/^    def _sample2base(self, sample):       $/;"	m	class:SNES
_sample2base	pybrain/optimization/distributionbased/xnes.py	/^    def _sample2base(self, sample):$/;"	m	class:XNES
_sample2base	tools/pybrain/pybrain/optimization/distributionbased/snes.py	/^    def _sample2base(self, sample):       $/;"	m	class:SNES
_sample2base	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    def _sample2base(self, sample):$/;"	m	class:XNES
_save_points	pybrain/supervised/trainers/svmtrainer.py	/^    def _save_points(self, res):$/;"	m	class:GridSearch
_save_points	tools/pybrain/pybrain/supervised/trainers/svmtrainer.py	/^    def _save_points(self, res):$/;"	m	class:GridSearch
_screenshot	pybrain/rl/environments/ode/viewer.py	/^    def _screenshot(self, path_prefix='.', format='PNG'):$/;"	m	class:ODEViewer
_screenshot	tools/pybrain/pybrain/rl/environments/ode/viewer.py	/^    def _screenshot(self, path_prefix='.', format='PNG'):$/;"	m	class:ODEViewer
_selectAndReproduce	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def _selectAndReproduce(self, pop, fits):$/;"	m	class:Coevolution
_selectAndReproduce	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def _selectAndReproduce(self, pop, fits):$/;"	m	class:Coevolution
_setDataFields	pybrain/tools/svmdata.py	/^    def _setDataFields(self, x, y):$/;"	m	class:SVMData
_setDataFields	tools/pybrain/pybrain/tools/svmdata.py	/^    def _setDataFields(self, x, y):$/;"	m	class:SVMData
_setDerivatives	pybrain/structure/modules/lstm.py	/^    def _setDerivatives(self, d, owner = None):$/;"	m	class:LSTMLayer
_setDerivatives	pybrain/structure/modules/mdlstm.py	/^    def _setDerivatives(self, d, owner=None):$/;"	m	class:MDLSTMLayer
_setDerivatives	pybrain/structure/networks/network.py	/^    def _setDerivatives(self, d, owner=None):$/;"	m	class:Network
_setDerivatives	pybrain/structure/parametercontainer.py	/^    def _setDerivatives(self, d, owner = None):$/;"	m	class:ParameterContainer
_setDerivatives	tools/pybrain/pybrain/structure/modules/lstm.py	/^    def _setDerivatives(self, d, owner = None):$/;"	m	class:LSTMLayer
_setDerivatives	tools/pybrain/pybrain/structure/modules/mdlstm.py	/^    def _setDerivatives(self, d, owner=None):$/;"	m	class:MDLSTMLayer
_setDerivatives	tools/pybrain/pybrain/structure/networks/network.py	/^    def _setDerivatives(self, d, owner=None):$/;"	m	class:Network
_setDerivatives	tools/pybrain/pybrain/structure/parametercontainer.py	/^    def _setDerivatives(self, d, owner = None):$/;"	m	class:ParameterContainer
_setExplorer	pybrain/rl/learners/directsearch/policygradient.py	/^    def _setExplorer(self, explorer):$/;"	m	class:PolicyGradientLearner
_setExplorer	pybrain/rl/learners/valuebased/valuebased.py	/^    def _setExplorer(self, explorer):$/;"	m	class:ValueBasedLearner
_setExplorer	tools/pybrain/pybrain/rl/learners/directsearch/policygradient.py	/^    def _setExplorer(self, explorer):$/;"	m	class:PolicyGradientLearner
_setExplorer	tools/pybrain/pybrain/rl/learners/valuebased/valuebased.py	/^    def _setExplorer(self, explorer):$/;"	m	class:ValueBasedLearner
_setFitness	pybrain/optimization/populationbased/pso.py	/^    def _setFitness(self, value):$/;"	m	class:Particle
_setFitness	tools/pybrain/pybrain/optimization/populationbased/pso.py	/^    def _setFitness(self, value):$/;"	m	class:Particle
_setGenomeOfLayer	pybrain/structure/modules/evolinonetwork.py	/^    def _setGenomeOfLayer(self, layer, weights):$/;"	m	class:EvolinoNetwork
_setGenomeOfLayer	pybrain/supervised/evolino/networkwrapper.py	/^    def _setGenomeOfLayer(self, layer, weights):$/;"	m	class:EvolinoNetwork
_setGenomeOfLayer	pybrain/supervised/evolino/networkwrapper.py	/^    def _setGenomeOfLayer(self, layer, weights):$/;"	m	class:NetworkWrapper
_setGenomeOfLayer	tools/pybrain/pybrain/structure/modules/evolinonetwork.py	/^    def _setGenomeOfLayer(self, layer, weights):$/;"	m	class:EvolinoNetwork
_setGenomeOfLayer	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def _setGenomeOfLayer(self, layer, weights):$/;"	m	class:EvolinoNetwork
_setGenomeOfLayer	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def _setGenomeOfLayer(self, layer, weights):$/;"	m	class:NetworkWrapper
_setInitEvaluable	pybrain/optimization/finitedifference/fd.py	/^    def _setInitEvaluable(self, evaluable):$/;"	m	class:FiniteDifferences
_setInitEvaluable	pybrain/optimization/optimizer.py	/^    def _setInitEvaluable(self, evaluable):$/;"	m	class:BlackBoxOptimizer
_setInitEvaluable	pybrain/optimization/optimizer.py	/^    def _setInitEvaluable(self, evaluable):$/;"	m	class:ContinuousOptimizer
_setInitEvaluable	pybrain/optimization/optimizer.py	/^    def _setInitEvaluable(self, evaluable):$/;"	m	class:TopologyOptimizer
_setInitEvaluable	pybrain/optimization/populationbased/pso.py	/^    def _setInitEvaluable(self, evaluable):$/;"	m	class:ParticleSwarmOptimizer
_setInitEvaluable	tools/pybrain/pybrain/optimization/finitedifference/fd.py	/^    def _setInitEvaluable(self, evaluable):$/;"	m	class:FiniteDifferences
_setInitEvaluable	tools/pybrain/pybrain/optimization/optimizer.py	/^    def _setInitEvaluable(self, evaluable):$/;"	m	class:BlackBoxOptimizer
_setInitEvaluable	tools/pybrain/pybrain/optimization/optimizer.py	/^    def _setInitEvaluable(self, evaluable):$/;"	m	class:ContinuousOptimizer
_setInitEvaluable	tools/pybrain/pybrain/optimization/optimizer.py	/^    def _setInitEvaluable(self, evaluable):$/;"	m	class:TopologyOptimizer
_setInitEvaluable	tools/pybrain/pybrain/optimization/populationbased/pso.py	/^    def _setInitEvaluable(self, evaluable):$/;"	m	class:ParticleSwarmOptimizer
_setLastOutput	pybrain/structure/modules/evolinonetwork.py	/^    def _setLastOutput(self, output):$/;"	m	class:EvolinoNetwork
_setLastOutput	pybrain/supervised/evolino/networkwrapper.py	/^    def _setLastOutput(self, output):$/;"	m	class:EvolinoNetwork
_setLastOutput	tools/pybrain/pybrain/structure/modules/evolinonetwork.py	/^    def _setLastOutput(self, output):$/;"	m	class:EvolinoNetwork
_setLastOutput	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def _setLastOutput(self, output):$/;"	m	class:EvolinoNetwork
_setLearning	pybrain/rl/agents/learning.py	/^    def _setLearning(self, flag):$/;"	m	class:LearningAgent
_setLearning	tools/pybrain/pybrain/rl/agents/learning.py	/^    def _setLearning(self, flag):$/;"	m	class:LearningAgent
_setLearningRate	pybrain/rl/learners/directsearch/policygradient.py	/^    def _setLearningRate(self, alpha):$/;"	m	class:PolicyGradientLearner
_setLearningRate	tools/pybrain/pybrain/rl/learners/directsearch/policygradient.py	/^    def _setLearningRate(self, alpha):$/;"	m	class:PolicyGradientLearner
_setMinimize	pybrain/optimization/optimizer.py	/^    def _setMinimize(self, flag):$/;"	m	class:BlackBoxOptimizer
_setMinimize	tools/pybrain/pybrain/optimization/optimizer.py	/^    def _setMinimize(self, flag):$/;"	m	class:BlackBoxOptimizer
_setModule	pybrain/rl/explorers/discrete/discrete.py	/^    def _setModule(self, module):$/;"	m	class:DiscreteExplorer
_setModule	pybrain/rl/explorers/discrete/discretesde.py	/^    def _setModule(self, module):$/;"	m	class:DiscreteStateDependentExplorer
_setModule	pybrain/rl/learners/directsearch/policygradient.py	/^    def _setModule(self, module):$/;"	m	class:PolicyGradientLearner
_setModule	pybrain/rl/learners/valuebased/valuebased.py	/^    def _setModule(self, module):$/;"	m	class:ValueBasedLearner
_setModule	tools/pybrain/pybrain/rl/explorers/discrete/discrete.py	/^    def _setModule(self, module):$/;"	m	class:DiscreteExplorer
_setModule	tools/pybrain/pybrain/rl/explorers/discrete/discretesde.py	/^    def _setModule(self, module):$/;"	m	class:DiscreteStateDependentExplorer
_setModule	tools/pybrain/pybrain/rl/learners/directsearch/policygradient.py	/^    def _setModule(self, module):$/;"	m	class:PolicyGradientLearner
_setModule	tools/pybrain/pybrain/rl/learners/valuebased/valuebased.py	/^    def _setModule(self, module):$/;"	m	class:ValueBasedLearner
_setName	pybrain/structure/connections/shared.py	/^    def _setName(self, newname):$/;"	m	class:SharedConnection
_setName	pybrain/utilities.py	/^    def _setName(self, newname):$/;"	m	class:Named
_setName	tools/pybrain/pybrain/structure/connections/shared.py	/^    def _setName(self, newname):$/;"	m	class:SharedConnection
_setName	tools/pybrain/pybrain/utilities.py	/^    def _setName(self, newname):$/;"	m	class:Named
_setObject	pybrain/rl/environments/ode/xode_changes/geom.py	/^    def _setObject(self, kclass, **kwargs):$/;"	m	class:Geom
_setObject	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^    def _setObject(self, kclass, **kwargs):$/;"	m	class:Geom
_setParameters	pybrain/structure/evolvables/maskedparameters.py	/^    def _setParameters(self, x):$/;"	m	class:MaskedParameters
_setParameters	pybrain/structure/evolvables/topology.py	/^    def _setParameters(self, x):$/;"	m	class:TopologyEvolvable
_setParameters	pybrain/structure/modules/lstm.py	/^    def _setParameters(self, p, owner = None):$/;"	m	class:LSTMLayer
_setParameters	pybrain/structure/modules/mdlstm.py	/^    def _setParameters(self, p, owner=None):$/;"	m	class:MDLSTMLayer
_setParameters	pybrain/structure/networks/network.py	/^    def _setParameters(self, p, owner=None):$/;"	m	class:Network
_setParameters	pybrain/structure/parametercontainer.py	/^    def _setParameters(self, p, owner = None):$/;"	m	class:ParameterContainer
_setParameters	tools/pybrain/pybrain/structure/evolvables/maskedparameters.py	/^    def _setParameters(self, x):$/;"	m	class:MaskedParameters
_setParameters	tools/pybrain/pybrain/structure/evolvables/topology.py	/^    def _setParameters(self, x):$/;"	m	class:TopologyEvolvable
_setParameters	tools/pybrain/pybrain/structure/modules/lstm.py	/^    def _setParameters(self, p, owner = None):$/;"	m	class:LSTMLayer
_setParameters	tools/pybrain/pybrain/structure/modules/mdlstm.py	/^    def _setParameters(self, p, owner=None):$/;"	m	class:MDLSTMLayer
_setParameters	tools/pybrain/pybrain/structure/networks/network.py	/^    def _setParameters(self, p, owner=None):$/;"	m	class:Network
_setParameters	tools/pybrain/pybrain/structure/parametercontainer.py	/^    def _setParameters(self, p, owner = None):$/;"	m	class:ParameterContainer
_setRadius	pybrain/supervised/knn/lsh/nearoptimal.py	/^    def _setRadius(self, value):$/;"	m	class:MultiDimHash
_setRadius	tools/pybrain/pybrain/supervised/knn/lsh/nearoptimal.py	/^    def _setRadius(self, value):$/;"	m	class:MultiDimHash
_setSigma	pybrain/rl/explorers/continuous/normal.py	/^    def _setSigma(self, sigma):$/;"	m	class:NormalExplorer
_setSigma	pybrain/rl/explorers/continuous/sde.py	/^    def _setSigma(self, sigma):$/;"	m	class:StateDependentExplorer
_setSigma	tools/pybrain/pybrain/rl/explorers/continuous/normal.py	/^    def _setSigma(self, sigma):$/;"	m	class:NormalExplorer
_setSigma	tools/pybrain/pybrain/rl/explorers/continuous/sde.py	/^    def _setSigma(self, sigma):$/;"	m	class:StateDependentExplorer
_setStone	pybrain/rl/environments/twoplayergames/capturegame.py	/^    def _setStone(self, c, pos):$/;"	m	class:CaptureGame
_setStone	pybrain/rl/environments/twoplayergames/gomoku.py	/^    def _setStone(self, c, pos):$/;"	m	class:GomokuGame
_setStone	pybrain/rl/environments/twoplayergames/pente.py	/^    def _setStone(self, c, pos, tokill=None):$/;"	m	class:PenteGame
_setStone	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    def _setStone(self, c, pos):$/;"	m	class:CaptureGame
_setStone	tools/pybrain/pybrain/rl/environments/twoplayergames/gomoku.py	/^    def _setStone(self, c, pos):$/;"	m	class:GomokuGame
_setStone	tools/pybrain/pybrain/rl/environments/twoplayergames/pente.py	/^    def _setStone(self, c, pos, tokill=None):$/;"	m	class:PenteGame
_setTemperature	pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    def _setTemperature(self):$/;"	m	class:RelativeGomokuTask
_setTemperature	pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    def _setTemperature(self):$/;"	m	class:RelativeCaptureTask
_setTemperature	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    def _setTemperature(self):$/;"	m	class:RelativeGomokuTask
_setTemperature	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    def _setTemperature(self):$/;"	m	class:RelativeCaptureTask
_setWorldParameters	pybrain/rl/environments/ode/environment.py	/^    def _setWorldParameters(self):$/;"	m	class:ODEEnvironment
_setWorldParameters	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def _setWorldParameters(self):$/;"	m	class:ODEEnvironment
_sharedSampling	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def _sharedSampling(self, numSelect, selectFrom, relativeTo):$/;"	m	class:Coevolution
_sharedSampling	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def _sharedSampling(self, numSelect, selectFrom, relativeTo):$/;"	m	class:Coevolution
_sortPopulation	pybrain/optimization/populationbased/es.py	/^    def _sortPopulation(self, noHallOfFame = False):$/;"	m	class:ES
_sortPopulation	tools/pybrain/pybrain/optimization/populationbased/es.py	/^    def _sortPopulation(self, noHallOfFame = False):$/;"	m	class:ES
_standardPermutation	pybrain/structure/networks/mdrnn.py	/^    def _standardPermutation(self):$/;"	m	class:_Mdrnn
_standardPermutation	tools/pybrain/pybrain/structure/networks/mdrnn.py	/^    def _standardPermutation(self):$/;"	m	class:_Mdrnn
_startElement	pybrain/rl/environments/ode/xode_changes/body.py	/^    def _startElement(self, name, attrs):$/;"	m	class:Body
_startElement	pybrain/rl/environments/ode/xode_changes/body.py	/^    def _startElement(self, name, attrs):$/;"	m	class:Mass
_startElement	pybrain/rl/environments/ode/xode_changes/geom.py	/^    def _startElement(self, name, attrs):$/;"	m	class:Geom
_startElement	tools/pybrain/pybrain/rl/environments/ode/xode_changes/body.py	/^    def _startElement(self, name, attrs):$/;"	m	class:Body
_startElement	tools/pybrain/pybrain/rl/environments/ode/xode_changes/body.py	/^    def _startElement(self, name, attrs):$/;"	m	class:Mass
_startElement	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^    def _startElement(self, name, attrs):$/;"	m	class:Geom
_stepQueueLoop	pybrain/rl/experiments/queued.py	/^    def _stepQueueLoop(self):$/;"	m	class:QueuedExperiment
_stepQueueLoop	tools/pybrain/pybrain/rl/experiments/queued.py	/^    def _stepQueueLoop(self):$/;"	m	class:QueuedExperiment
_stepsPerGeneration	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def _stepsPerGeneration(self):$/;"	m	class:Coevolution
_stepsPerGeneration	pybrain/optimization/populationbased/coevolution/multipopulationcoevolution.py	/^    def _stepsPerGeneration(self):$/;"	m	class:MultiPopulationCoevolution
_stepsPerGeneration	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def _stepsPerGeneration(self):$/;"	m	class:Coevolution
_stepsPerGeneration	tools/pybrain/pybrain/optimization/populationbased/coevolution/multipopulationcoevolution.py	/^    def _stepsPerGeneration(self):$/;"	m	class:MultiPopulationCoevolution
_stoppingCriterion	pybrain/optimization/distributionbased/rank1.py	/^    def _stoppingCriterion(self):$/;"	m	class:Rank1NES
_stoppingCriterion	pybrain/optimization/distributionbased/snes.py	/^    def _stoppingCriterion(self):$/;"	m	class:SNES
_stoppingCriterion	pybrain/optimization/optimizer.py	/^    def _stoppingCriterion(self):$/;"	m	class:BlackBoxOptimizer
_stoppingCriterion	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^    def _stoppingCriterion(self):$/;"	m	class:Rank1NES
_stoppingCriterion	tools/pybrain/pybrain/optimization/distributionbased/snes.py	/^    def _stoppingCriterion(self):$/;"	m	class:SNES
_stoppingCriterion	tools/pybrain/pybrain/optimization/optimizer.py	/^    def _stoppingCriterion(self):$/;"	m	class:BlackBoxOptimizer
_suicide	pybrain/rl/environments/twoplayergames/capturegame.py	/^    def _suicide(self, c, pos):$/;"	m	class:CaptureGame
_suicide	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    def _suicide(self, c, pos):$/;"	m	class:CaptureGame
_tab	pybrain/rl/environments/ode/tools/xmltools.py	/^    _tab = "\\t"$/;"	v	class:XMLstruct
_tab	tools/pybrain/pybrain/rl/environments/ode/tools/xmltools.py	/^    _tab = "\\t"$/;"	v	class:XMLstruct
_topologicalSort	pybrain/structure/networks/network.py	/^    def _topologicalSort(self):$/;"	m	class:Network
_topologicalSort	tools/pybrain/pybrain/structure/networks/network.py	/^    def _topologicalSort(self):$/;"	m	class:Network
_turn	pybrain/rl/environments/mazes/tasks/shuttle.py	/^    def _turn(self):$/;"	m	class:ShuttleDocking
_turn	tools/pybrain/pybrain/rl/environments/mazes/tasks/shuttle.py	/^    def _turn(self):$/;"	m	class:ShuttleDocking
_update	pybrain/rl/environments/ode/actuators.py	/^    def _update(self, action):$/;"	m	class:Actuator
_update	pybrain/rl/environments/ode/actuators.py	/^    def _update(self, action):$/;"	m	class:CopyJointActuator
_update	pybrain/rl/environments/ode/actuators.py	/^    def _update(self, action):$/;"	m	class:JointActuator
_update	pybrain/rl/environments/ode/sensors.py	/^    def _update(self):$/;"	m	class:BodyDistanceSensor
_update	pybrain/rl/environments/ode/sensors.py	/^    def _update(self):$/;"	m	class:BodyPositionSensor
_update	pybrain/rl/environments/ode/sensors.py	/^    def _update(self):$/;"	m	class:DistToPointSensor
_update	pybrain/rl/environments/ode/sensors.py	/^    def _update(self):$/;"	m	class:JointSensor
_update	pybrain/rl/environments/ode/sensors.py	/^    def _update(self):$/;"	m	class:JointVelocitySensor
_update	pybrain/rl/environments/ode/sensors.py	/^    def _update(self):$/;"	m	class:Sensor
_update	tools/pybrain/pybrain/rl/environments/ode/actuators.py	/^    def _update(self, action):$/;"	m	class:Actuator
_update	tools/pybrain/pybrain/rl/environments/ode/actuators.py	/^    def _update(self, action):$/;"	m	class:CopyJointActuator
_update	tools/pybrain/pybrain/rl/environments/ode/actuators.py	/^    def _update(self, action):$/;"	m	class:JointActuator
_update	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def _update(self):$/;"	m	class:BodyDistanceSensor
_update	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def _update(self):$/;"	m	class:BodyPositionSensor
_update	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def _update(self):$/;"	m	class:DistToPointSensor
_update	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def _update(self):$/;"	m	class:JointSensor
_update	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def _update(self):$/;"	m	class:JointVelocitySensor
_update	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def _update(self):$/;"	m	class:Sensor
_updateAlphas	pybrain/optimization/distributionbased/fem.py	/^    def _updateAlphas(self, updateSize):$/;"	m	class:FEM
_updateAlphas	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^    def _updateAlphas(self, updateSize):$/;"	m	class:FEM
_updateDistribution	pybrain/optimization/distributionbased/distributionbased.py	/^    def _updateDistribution(self, dparamDeltas):$/;"	m	class:DistributionBasedOptimizer
_updateDistribution	tools/pybrain/pybrain/optimization/distributionbased/distributionbased.py	/^    def _updateDistribution(self, dparamDeltas):$/;"	m	class:DistributionBasedOptimizer
_updateEtraces	pybrain/rl/learners/valuebased/linearfa.py	/^    def _updateEtraces(self, state, action, responsibility=1.):$/;"	m	class:QLambda_LinFA
_updateEtraces	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    def _updateEtraces(self, state, action, responsibility=1.):$/;"	m	class:QLambda_LinFA
_updateMus	pybrain/optimization/distributionbased/fem.py	/^    def _updateMus(self, updateSize, lastSample):$/;"	m	class:FEM
_updateMus	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^    def _updateMus(self, updateSize, lastSample):$/;"	m	class:FEM
_updateShaping	pybrain/optimization/distributionbased/fem.py	/^    def _updateShaping(self):$/;"	m	class:FEM
_updateShaping	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^    def _updateShaping(self):$/;"	m	class:FEM
_updateSigmas	pybrain/optimization/distributionbased/fem.py	/^    def _updateSigmas(self, updateSize, lastSample):$/;"	m	class:FEM
_updateSigmas	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^    def _updateSigmas(self, updateSize, lastSample):$/;"	m	class:FEM
_updateWeights	learners/HessianACLearner.py	/^    def _updateWeights(self, xk, uk, gk, xkp1, ukp1, xkPsi, xkp1Psi, xkVarsigma, xkp1Varsigma):$/;"	m	class:HessianACLearner
_updateWeights	learners/TDLearner.py	/^    def _updateWeights(self, xk, uk, gk, xkPsi, xkp1, ukp1, gkp1, xkp1Psi):$/;"	m	class:TDLearner
_updateWeights	pybrain/rl/learners/valuebased/linearfa.py	/^    def _updateWeights(self, state, action, reward, next_state):$/;"	m	class:QLambda_LinFA
_updateWeights	pybrain/rl/learners/valuebased/linearfa.py	/^    def _updateWeights(self, state, action, reward, next_state):$/;"	m	class:Q_LinFA
_updateWeights	pybrain/rl/learners/valuebased/linearfa.py	/^    def _updateWeights(self, state, action, reward, next_state, behavior_policy=None, learned_policy=None, outcome_reward=None):$/;"	m	class:GQLambda
_updateWeights	pybrain/rl/learners/valuebased/linearfa.py	/^    def _updateWeights(self, state, action, reward, next_state, learned_policy=None):$/;"	m	class:LSTDQLambda
_updateWeights	pybrain/rl/learners/valuebased/linearfa.py	/^    def _updateWeights(self, state, action, reward, next_state, next_action):$/;"	m	class:LSPI
_updateWeights	pybrain/rl/learners/valuebased/linearfa.py	/^    def _updateWeights(self, state, action, reward, next_state, next_action):$/;"	m	class:SARSALambda_LinFA
_updateWeights	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    def _updateWeights(self, state, action, reward, next_state):$/;"	m	class:QLambda_LinFA
_updateWeights	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    def _updateWeights(self, state, action, reward, next_state):$/;"	m	class:Q_LinFA
_updateWeights	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    def _updateWeights(self, state, action, reward, next_state, behavior_policy=None, learned_policy=None, outcome_reward=None):$/;"	m	class:GQLambda
_updateWeights	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    def _updateWeights(self, state, action, reward, next_state, learned_policy=None):$/;"	m	class:LSTDQLambda
_updateWeights	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    def _updateWeights(self, state, action, reward, next_state, next_action):$/;"	m	class:LSPI
_updateWeights	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    def _updateWeights(self, state, action, reward, next_state, next_action):$/;"	m	class:SARSALambda_LinFA
_validate	pybrain/tools/gridsearch.py	/^    def _validate(self, params):$/;"	m	class:GridSearch2D
_validate	pybrain/tools/gridsearch.py	/^    def _validate(self, params):$/;"	m	class:GridSearchCostGamma
_validate	pybrain/tools/gridsearch.py	/^    def _validate(self, params):$/;"	m	class:GridSearchDOE
_validate	pybrain/tools/gridsearch.py	/^    def _validate(self, params):$/;"	m	class:GridSearchDOECostGamma
_validate	tools/pybrain/pybrain/tools/gridsearch.py	/^    def _validate(self, params):$/;"	m	class:GridSearch2D
_validate	tools/pybrain/pybrain/tools/gridsearch.py	/^    def _validate(self, params):$/;"	m	class:GridSearchCostGamma
_validate	tools/pybrain/pybrain/tools/gridsearch.py	/^    def _validate(self, params):$/;"	m	class:GridSearchDOE
_validate	tools/pybrain/pybrain/tools/gridsearch.py	/^    def _validate(self, params):$/;"	m	class:GridSearchDOECostGamma
_validateGenomeLayer	pybrain/structure/modules/evolinonetwork.py	/^    def _validateGenomeLayer(self, layer):$/;"	m	class:EvolinoNetwork
_validateGenomeLayer	pybrain/supervised/evolino/networkwrapper.py	/^    def _validateGenomeLayer(self, layer):$/;"	m	class:EvolinoNetwork
_validateGenomeLayer	pybrain/supervised/evolino/networkwrapper.py	/^    def _validateGenomeLayer(self, layer):$/;"	m	class:NetworkWrapper
_validateGenomeLayer	tools/pybrain/pybrain/structure/modules/evolinonetwork.py	/^    def _validateGenomeLayer(self, layer):$/;"	m	class:EvolinoNetwork
_validateGenomeLayer	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def _validateGenomeLayer(self, layer):$/;"	m	class:EvolinoNetwork
_validateGenomeLayer	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def _validateGenomeLayer(self, layer):$/;"	m	class:NetworkWrapper
_validateWrapper	pybrain/tools/gridsearch.py	/^    def _validateWrapper(self, params):$/;"	m	class:GridSearchDOE
_validateWrapper	tools/pybrain/pybrain/tools/gridsearch.py	/^    def _validateWrapper(self, params):$/;"	m	class:GridSearchDOE
_verifyDimensions	pybrain/structure/networks/swiping.py	/^    def _verifyDimensions(self, inmesh, hiddenmesh, outmesh):$/;"	m	class:SwipingNetwork
_verifyDimensions	tools/pybrain/pybrain/structure/networks/swiping.py	/^    def _verifyDimensions(self, inmesh, hiddenmesh, outmesh):$/;"	m	class:SwipingNetwork
_wasOpposed	pybrain/optimization/optimizer.py	/^    _wasOpposed = False$/;"	v	class:BlackBoxOptimizer
_wasOpposed	tools/pybrain/pybrain/optimization/optimizer.py	/^    _wasOpposed = False$/;"	v	class:BlackBoxOptimizer
_wasUnwrapped	pybrain/optimization/optimizer.py	/^    _wasUnwrapped = False$/;"	v	class:BlackBoxOptimizer
_wasUnwrapped	tools/pybrain/pybrain/optimization/optimizer.py	/^    _wasUnwrapped = False$/;"	v	class:BlackBoxOptimizer
_wasWrapped	pybrain/optimization/optimizer.py	/^    _wasWrapped = False$/;"	v	class:BlackBoxOptimizer
_wasWrapped	tools/pybrain/pybrain/optimization/optimizer.py	/^    _wasWrapped = False$/;"	v	class:BlackBoxOptimizer
_washout	pybrain/supervised/evolino/networkwrapper.py	/^    def _washout(self, input, target, first_idx=None, last_idx=None):$/;"	m	class:EvolinoNetwork
_washout	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def _washout(self, input, target, first_idx=None, last_idx=None):$/;"	m	class:EvolinoNetwork
a	pybrain/rl/environments/functions/unimodal.py	/^    a = 10$/;"	v	class:DiffPowFunction
a	pybrain/rl/environments/functions/unimodal.py	/^    a = 10$/;"	v	class:StepElliFunction
a	pybrain/rl/environments/functions/unimodal.py	/^    a = 1000$/;"	v	class:ElliFunction
a	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^    a = 10$/;"	v	class:DiffPowFunction
a	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^    a = 10$/;"	v	class:StepElliFunction
a	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^    a = 1000$/;"	v	class:ElliFunction
aDim	compare.py	/^aDim = 1$/;"	v
aDim	enac.py	/^aDim = 1$/;"	v
aDim	main.py	/^aDim = 1$/;"	v
absEvalProportion	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    absEvalProportion = 0$/;"	v	class:Coevolution
absEvalProportion	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    absEvalProportion = 0$/;"	v	class:Coevolution
absEvaluator	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    absEvaluator = None$/;"	v	class:Coevolution
absEvaluator	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    absEvaluator = None$/;"	v	class:Coevolution
abstractMethod	pybrain/utilities.py	/^def abstractMethod():$/;"	f
abstractMethod	tools/pybrain/pybrain/utilities.py	/^def abstractMethod():$/;"	f
act	pybrain/rl/environments/flexcube/environment.py	/^    def act(self, a):$/;"	m	class:FlexCubeEnvironment
act	tools/pybrain/pybrain/rl/environments/flexcube/environment.py	/^    def act(self, a):$/;"	m	class:FlexCubeEnvironment
action_list	pybrain/rl/environments/classic/acrobot.py	/^    action_list = (-1.0 , 0.0 , 1.0)$/;"	v	class:AcrobotTask
action_list	pybrain/rl/environments/classic/mountaincar.py	/^    action_list = (-1.0 , 0.0 , 1.0)$/;"	v	class:MountainCar
action_list	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    action_list = (-1.0 , 0.0 , 1.0)$/;"	v	class:AcrobotTask
action_list	tools/pybrain/pybrain/rl/environments/classic/mountaincar.py	/^    action_list = (-1.0 , 0.0 , 1.0)$/;"	v	class:MountainCar
actions	pybrain/rl/environments/mazes/polarmaze.py	/^    actions = 5$/;"	v	class:PolarMaze
actions	pybrain/rl/environments/mazes/tasks/pomdp.py	/^    actions = 4$/;"	v	class:POMDPTask
actions	pybrain/rl/environments/mazes/tasks/shuttle.py	/^    actions = 3$/;"	v	class:ShuttleDocking
actions	pybrain/rl/environments/mazes/tasks/tiger.py	/^    actions = 3$/;"	v	class:TigerTask
actions	tools/pybrain/pybrain/rl/environments/mazes/polarmaze.py	/^    actions = 5$/;"	v	class:PolarMaze
actions	tools/pybrain/pybrain/rl/environments/mazes/tasks/pomdp.py	/^    actions = 4$/;"	v	class:POMDPTask
actions	tools/pybrain/pybrain/rl/environments/mazes/tasks/shuttle.py	/^    actions = 3$/;"	v	class:ShuttleDocking
actions	tools/pybrain/pybrain/rl/environments/mazes/tasks/tiger.py	/^    actions = 3$/;"	v	class:TigerTask
activate	pybrain/rl/explorers/continuous/sde.py	/^    def activate(self, state, action):$/;"	m	class:StateDependentExplorer
activate	pybrain/rl/explorers/discrete/boltzmann.py	/^    def activate(self, state, action):$/;"	m	class:BoltzmannExplorer
activate	pybrain/rl/explorers/discrete/discretesde.py	/^    def activate(self, state, action):$/;"	m	class:DiscreteStateDependentExplorer
activate	pybrain/rl/explorers/explorer.py	/^    def activate(self, state, action):$/;"	m	class:Explorer
activate	pybrain/structure/evolvables/cheaplycopiable.py	/^    def activate(self, *args, **kwargs):$/;"	m	class:CheaplyCopiable
activate	pybrain/structure/evolvables/maskedmodule.py	/^    def activate(self, *args, **kwargs):$/;"	m	class:MaskedModule
activate	pybrain/structure/modules/evolinonetwork.py	/^    def activate(self, input):$/;"	m	class:EvolinoNetwork
activate	pybrain/structure/modules/module.py	/^    def activate(self, inpt):$/;"	m	class:Module
activate	pybrain/structure/networks/feedforward.py	/^    def activate(self, inpt):$/;"	m	class:FeedForwardNetworkComponent
activate	pybrain/structure/networks/mdrnn.py	/^    def activate(self, inpt):$/;"	m	class:_AccumulatingMdrnn
activate	pybrain/structure/networks/mdrnn.py	/^    def activate(self, inpt):$/;"	m	class:_Mdrnn
activate	pybrain/structure/networks/rbm.py	/^    def activate(self, inpt):$/;"	m	class:Rbm
activate	pybrain/structure/networks/recurrent.py	/^    def activate(self, inpt):$/;"	m	class:RecurrentNetworkComponent
activate	pybrain/supervised/evolino/networkwrapper.py	/^    def activate(self, input):$/;"	m	class:EvolinoNetwork
activate	tools/pybrain/pybrain/rl/explorers/continuous/sde.py	/^    def activate(self, state, action):$/;"	m	class:StateDependentExplorer
activate	tools/pybrain/pybrain/rl/explorers/discrete/boltzmann.py	/^    def activate(self, state, action):$/;"	m	class:BoltzmannExplorer
activate	tools/pybrain/pybrain/rl/explorers/discrete/discretesde.py	/^    def activate(self, state, action):$/;"	m	class:DiscreteStateDependentExplorer
activate	tools/pybrain/pybrain/rl/explorers/explorer.py	/^    def activate(self, state, action):$/;"	m	class:Explorer
activate	tools/pybrain/pybrain/structure/evolvables/cheaplycopiable.py	/^    def activate(self, *args, **kwargs):$/;"	m	class:CheaplyCopiable
activate	tools/pybrain/pybrain/structure/evolvables/maskedmodule.py	/^    def activate(self, *args, **kwargs):$/;"	m	class:MaskedModule
activate	tools/pybrain/pybrain/structure/modules/evolinonetwork.py	/^    def activate(self, input):$/;"	m	class:EvolinoNetwork
activate	tools/pybrain/pybrain/structure/modules/module.py	/^    def activate(self, inpt):$/;"	m	class:Module
activate	tools/pybrain/pybrain/structure/networks/feedforward.py	/^    def activate(self, inpt):$/;"	m	class:FeedForwardNetworkComponent
activate	tools/pybrain/pybrain/structure/networks/mdrnn.py	/^    def activate(self, inpt):$/;"	m	class:_AccumulatingMdrnn
activate	tools/pybrain/pybrain/structure/networks/mdrnn.py	/^    def activate(self, inpt):$/;"	m	class:_Mdrnn
activate	tools/pybrain/pybrain/structure/networks/rbm.py	/^    def activate(self, inpt):$/;"	m	class:Rbm
activate	tools/pybrain/pybrain/structure/networks/recurrent.py	/^    def activate(self, inpt):$/;"	m	class:RecurrentNetworkComponent
activate	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def activate(self, input):$/;"	m	class:EvolinoNetwork
activateOnDataset	pybrain/structure/evolvables/maskedmodule.py	/^    def activateOnDataset(self, *args, **kwargs):$/;"	m	class:MaskedModule
activateOnDataset	pybrain/structure/modules/module.py	/^    def activateOnDataset(self, dataset):$/;"	m	class:Module
activateOnDataset	pybrain/structure/modules/svmunit.py	/^    def activateOnDataset(self, dataset, values=False):$/;"	m	class:SVMUnit
activateOnDataset	tools/pybrain/pybrain/structure/evolvables/maskedmodule.py	/^    def activateOnDataset(self, *args, **kwargs):$/;"	m	class:MaskedModule
activateOnDataset	tools/pybrain/pybrain/structure/modules/module.py	/^    def activateOnDataset(self, dataset):$/;"	m	class:Module
activateOnDataset	tools/pybrain/pybrain/structure/modules/svmunit.py	/^    def activateOnDataset(self, dataset, values=False):$/;"	m	class:SVMUnit
activeMouse	pybrain/rl/environments/flexcube/viewer.py	/^    def activeMouse(self, x, y):$/;"	m	class:FlexCubeRenderer
activeMouse	pybrain/rl/environments/shipsteer/viewer.py	/^    def activeMouse(self, x, y):$/;"	m	class:FlexCubeRenderer
activeMouse	tools/pybrain/pybrain/rl/environments/flexcube/viewer.py	/^    def activeMouse(self, x, y):$/;"	m	class:FlexCubeRenderer
activeMouse	tools/pybrain/pybrain/rl/environments/shipsteer/viewer.py	/^    def activeMouse(self, x, y):$/;"	m	class:FlexCubeRenderer
adaptAgent	pybrain/tools/rlgluebridge.py	/^def adaptAgent(agent_klass):$/;"	f
adaptAgent	tools/pybrain/pybrain/tools/rlgluebridge.py	/^def adaptAgent(agent_klass):$/;"	f
adaptAgentObject	pybrain/tools/rlgluebridge.py	/^def adaptAgentObject(agent_object):$/;"	f
adaptAgentObject	tools/pybrain/pybrain/tools/rlgluebridge.py	/^def adaptAgentObject(agent_object):$/;"	f
adaptiveShaping	pybrain/optimization/distributionbased/fem.py	/^    adaptiveShaping = False$/;"	v	class:FEM
adaptiveShaping	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^    adaptiveShaping = False$/;"	v	class:FEM
add	pybrain/tools/kwargsprocessor.py	/^    def add(self, name, **kwargs):$/;"	m	class:KWArgsProcessor
add	tools/pybrain/pybrain/tools/kwargsprocessor.py	/^    def add(self, name, **kwargs):$/;"	m	class:KWArgsProcessor
addActuator	pybrain/rl/environments/ode/environment.py	/^    def addActuator(self, actuator):$/;"	m	class:ODEEnvironment
addActuator	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def addActuator(self, actuator):$/;"	m	class:ODEEnvironment
addClient	pybrain/tools/networking/udpconnection.py	/^    def addClient(self, cIP):$/;"	m	class:UDPServer
addClient	tools/pybrain/pybrain/tools/networking/udpconnection.py	/^    def addClient(self, cIP):$/;"	m	class:UDPServer
addConnection	pybrain/structure/networks/network.py	/^    def addConnection(self, c):$/;"	m	class:Network
addConnection	tools/pybrain/pybrain/structure/networks/network.py	/^    def addConnection(self, c):$/;"	m	class:Network
addCovEllipse	pybrain/tools/plotting/fitnesslandscapes.py	/^    def addCovEllipse(self, emat, center, segments=50, rescale=True, color='c', transp=1.):$/;"	m	class:FitnessPlotter
addCovEllipse	tools/pybrain/pybrain/tools/plotting/fitnesslandscapes.py	/^    def addCovEllipse(self, emat, center, segments=50, rescale=True, color='c', transp=1.):$/;"	m	class:FitnessPlotter
addData	pybrain/tools/plotting/multiline.py	/^    def addData(self, id0, x, y):$/;"	m	class:MultilinePlotter
addData	tools/pybrain/pybrain/tools/plotting/multiline.py	/^    def addData(self, id0, x, y):$/;"	m	class:MultilinePlotter
addDataset	pybrain/auxiliary/gaussprocess.py	/^    def addDataset(self, dataset):$/;"	m	class:GaussianProcess
addDataset	tools/pybrain/pybrain/auxiliary/gaussprocess.py	/^    def addDataset(self, dataset):$/;"	m	class:GaussianProcess
addExps	pybrain/tools/example_tools.py	/^    def addExps(self):$/;"	m	class:ExTools
addExps	tools/pybrain/pybrain/tools/example_tools.py	/^    def addExps(self):$/;"	m	class:ExTools
addField	pybrain/datasets/dataset.py	/^    def addField(self, label, dim):$/;"	m	class:DataSet
addField	tools/pybrain/pybrain/datasets/dataset.py	/^    def addField(self, label, dim):$/;"	m	class:DataSet
addIndividual	pybrain/supervised/evolino/gpopulation.py	/^    def addIndividual(self, individual):$/;"	m	class:Population
addIndividual	pybrain/supervised/evolino/gpopulation.py	/^    def addIndividual(self, individual):$/;"	m	class:SimplePopulation
addIndividual	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^    def addIndividual(self, individual):$/;"	m	class:Population
addIndividual	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^    def addIndividual(self, individual):$/;"	m	class:SimplePopulation
addIndividualFitness	pybrain/supervised/evolino/population.py	/^    def addIndividualFitness(self, individual, fitness):$/;"	m	class:EvolinoSubPopulation
addIndividualFitness	tools/pybrain/pybrain/supervised/evolino/population.py	/^    def addIndividualFitness(self, individual, fitness):$/;"	m	class:EvolinoSubPopulation
addIndividuals	pybrain/supervised/evolino/gpopulation.py	/^    def addIndividuals(self, individuals):$/;"	m	class:Population
addIndividuals	pybrain/supervised/evolino/gpopulation.py	/^    def addIndividuals(self, individuals):$/;"	m	class:SimplePopulation
addIndividuals	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^    def addIndividuals(self, individuals):$/;"	m	class:Population
addIndividuals	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^    def addIndividuals(self, individuals):$/;"	m	class:SimplePopulation
addInputModule	pybrain/structure/networks/network.py	/^    def addInputModule(self, m):$/;"	m	class:Network
addInputModule	tools/pybrain/pybrain/structure/networks/network.py	/^    def addInputModule(self, m):$/;"	m	class:Network
addModule	pybrain/structure/networks/network.py	/^    def addModule(self, m):$/;"	m	class:Network
addModule	pybrain/structure/networks/neurondecomposable.py	/^    def addModule(self, m):$/;"	m	class:NeuronDecomposableNetwork
addModule	tools/pybrain/pybrain/structure/networks/network.py	/^    def addModule(self, m):$/;"	m	class:Network
addModule	tools/pybrain/pybrain/structure/networks/neurondecomposable.py	/^    def addModule(self, m):$/;"	m	class:NeuronDecomposableNetwork
addOutputModule	pybrain/structure/networks/network.py	/^    def addOutputModule(self, m):$/;"	m	class:Network
addOutputModule	tools/pybrain/pybrain/structure/networks/network.py	/^    def addOutputModule(self, m):$/;"	m	class:Network
addRecurrentConnection	pybrain/structure/networks/recurrent.py	/^    def addRecurrentConnection(self, c):$/;"	m	class:RecurrentNetworkComponent
addRecurrentConnection	tools/pybrain/pybrain/structure/networks/recurrent.py	/^    def addRecurrentConnection(self, c):$/;"	m	class:RecurrentNetworkComponent
addResult	pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    def addResult(self, h, win, moves):$/;"	m	class:HandicapCaptureTask
addResult	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    def addResult(self, h, win, moves):$/;"	m	class:HandicapCaptureTask
addReward	pybrain/rl/environments/episodic.py	/^    def addReward(self):$/;"	m	class:EpisodicTask
addReward	tools/pybrain/pybrain/rl/environments/episodic.py	/^    def addReward(self):$/;"	m	class:EpisodicTask
addSample	pybrain/auxiliary/gaussprocess.py	/^    def addSample(self, train, target):$/;"	m	class:GaussianProcess
addSample	pybrain/datasets/importance.py	/^    def addSample(self, inp, target, importance=None):$/;"	m	class:ImportanceDataSet
addSample	pybrain/datasets/reinforcement.py	/^    def addSample(self, state, action, reward):$/;"	m	class:ReinforcementDataSet
addSample	pybrain/datasets/supervised.py	/^    def addSample(self, inp, target):$/;"	m	class:SupervisedDataSet
addSample	pybrain/datasets/unsupervised.py	/^    def addSample(self, sample):$/;"	m	class:UnsupervisedDataSet
addSample	tools/pybrain/pybrain/auxiliary/gaussprocess.py	/^    def addSample(self, train, target):$/;"	m	class:GaussianProcess
addSample	tools/pybrain/pybrain/datasets/importance.py	/^    def addSample(self, inp, target, importance=None):$/;"	m	class:ImportanceDataSet
addSample	tools/pybrain/pybrain/datasets/reinforcement.py	/^    def addSample(self, state, action, reward):$/;"	m	class:ReinforcementDataSet
addSample	tools/pybrain/pybrain/datasets/supervised.py	/^    def addSample(self, inp, target):$/;"	m	class:SupervisedDataSet
addSample	tools/pybrain/pybrain/datasets/unsupervised.py	/^    def addSample(self, sample):$/;"	m	class:UnsupervisedDataSet
addSamples	pybrain/tools/plotting/fitnesslandscapes.py	/^    def addSamples(self, samples, rescale=True, color=''):$/;"	m	class:FitnessPlotter
addSamples	tools/pybrain/pybrain/tools/plotting/fitnesslandscapes.py	/^    def addSamples(self, samples, rescale=True, color=''):$/;"	m	class:FitnessPlotter
addSensor	pybrain/rl/environments/ode/environment.py	/^    def addSensor(self, sensor):$/;"	m	class:ODEEnvironment
addSensor	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def addSensor(self, sensor):$/;"	m	class:ODEEnvironment
addTextNode	pybrain/tools/customxml/handling.py	/^    def addTextNode(self, node, text):$/;"	m	class:XMLHandling
addTextNode	tools/pybrain/pybrain/tools/customxml/handling.py	/^    def addTextNode(self, node, text):$/;"	m	class:XMLHandling
addTexture	pybrain/rl/environments/ode/environment.py	/^    def addTexture(self, name, texture):$/;"	m	class:ODEEnvironment
addTexture	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def addTexture(self, name, texture):$/;"	m	class:ODEEnvironment
addToDictFile	pybrain/tools/filehandling.py	/^def addToDictFile(name, key, data, verbose=False):$/;"	f
addToDictFile	tools/pybrain/pybrain/tools/filehandling.py	/^def addToDictFile(name, key, data, verbose=False):$/;"	f
addVect	pybrain/rl/environments/flexcube/objects3d.py	/^    def addVect(self, point1, point2):$/;"	m	class:Objects3D
addVect	tools/pybrain/pybrain/rl/environments/flexcube/objects3d.py	/^    def addVect(self, point1, point2):$/;"	m	class:Objects3D
affixToEnvironment	pybrain/rl/environments/ode/tools/xodetools.py	/^    def affixToEnvironment(self, name):$/;"	m	class:XODEfile
affixToEnvironment	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def affixToEnvironment(self, name):$/;"	m	class:XODEfile
agent	enac.py	/^agent = LSTDACAgent(policy, learner,  sDim, aDim)$/;"	v
agent	examples/ENAC.py	/^agent = ExplorerLearningAgent(policy, learner, explorer)$/;"	v
agent	examples/ENAC_TL.py	/^agent = LearningAgent(policy, learner)$/;"	v
agent	examples/LSTDAC.py	/^agent = LSTDACAgent(policy, learner)$/;"	v
agent	examples/QLambda_LinFA.py	/^agent = LinearFA_Agent(learner)$/;"	v
agent	examples/Q_LinFA.py	/^agent = LinearFA_Agent(learner)$/;"	v
agent	examples/SARSA_TL.py	/^agent = LearningAgent(table, learner)$/;"	v
agent	main.py	/^agent = LSTDACAgent(policy, learner, sDim, aDim)$/;"	v
agent	pybrain/tools/example_tools.py	/^    agent = None$/;"	v	class:ExTools
agent	tools/pybrain/docs/tutorials/rl.py	/^agent = LearningAgent(controller, learner)$/;"	v
agent	tools/pybrain/examples/optimization/optimizers_for_rl.py	/^agent = OptimizationAgent(net, learner)$/;"	v
agent	tools/pybrain/examples/rl/environments/cartpole/cart_all.py	/^        agent = OptimizationAgent(net, eval(e))$/;"	v
agent	tools/pybrain/examples/rl/environments/cartpole/cart_cma.py	/^    agent = OptimizationAgent(net, CMAES(storeAllEvaluations = True))$/;"	v
agent	tools/pybrain/examples/rl/environments/cartpole/cart_enac.py	/^    agent = LearningAgent(net, ENAC())$/;"	v
agent	tools/pybrain/examples/rl/environments/cartpole/cart_fem.py	/^    agent = OptimizationAgent(net, FEM(storeAllEvaluations = True))$/;"	v
agent	tools/pybrain/examples/rl/environments/cartpole/cart_nes.py	/^    agent = OptimizationAgent(net, ExactNES(storeAllEvaluations = True))$/;"	v
agent	tools/pybrain/examples/rl/environments/cartpole/cart_pgpe.py	/^    agent = OptimizationAgent(net, PGPE(storeAllEvaluations = True))$/;"	v
agent	tools/pybrain/examples/rl/environments/cartpole/cart_reinf.py	/^    agent = LearningAgent(net, Reinforce())$/;"	v
agent	tools/pybrain/examples/rl/environments/cartpole/play_cartpole.py	/^agent = LearningAgent(net, None)$/;"	v
agent	tools/pybrain/examples/rl/environments/flexcube/flexcube_pgpe.py	/^    agent = OptimizationAgent(net, PGPE(storeAllEvaluations = True))$/;"	v
agent	tools/pybrain/examples/rl/environments/flexcube/flexcube_spsa.py	/^    agent = OptimizationAgent(net, SimpleSPSA(storeAllEvaluations = True))$/;"	v
agent	tools/pybrain/examples/rl/environments/maze/td.py	/^agent = LearningAgent(table, learner)$/;"	v
agent	tools/pybrain/examples/rl/environments/ode/acrobot_fd.py	/^    agent = OptimizationAgent(net, FiniteDifferences(storeAllEvaluations = True))$/;"	v
agent	tools/pybrain/examples/rl/environments/ode/acrobot_pgpe.py	/^    agent = OptimizationAgent(net, PGPE(storeAllEvaluations = True,$/;"	v
agent	tools/pybrain/examples/rl/environments/ode/ccrl_glass_pgpe.py	/^    agent = OptimizationAgent(net, PGPE(storeAllEvaluations = True))$/;"	v
agent	tools/pybrain/examples/rl/environments/ode/ccrl_plate_pgpe.py	/^    agent = OptimizationAgent(net, PGPE(storeAllEvaluations = True))$/;"	v
agent	tools/pybrain/examples/rl/environments/ode/johnnie_pgpe.py	/^    agent = OptimizationAgent(net, PGPE(storeAllEvaluations = True))$/;"	v
agent	tools/pybrain/examples/rl/environments/ode/johnnie_reinforce.py	/^    agent = LearningAgent(net, Reinforce())$/;"	v
agent	tools/pybrain/examples/rl/environments/shipsteer/shipbench_pgpe.py	/^    agent = OptimizationAgent(net, PGPE(learningRate = 0.3,$/;"	v
agent	tools/pybrain/examples/rl/environments/shipsteer/shipbench_sde.py	/^agent = LearningAgent(net, learner)$/;"	v
agent	tools/pybrain/examples/rl/valuebased/nfq.py	/^agent = LearningAgent(module, learner)$/;"	v
agent	tools/pybrain/examples/rl/valuebased/td.py	/^agent = LearningAgent(table, learner)$/;"	v
agent	tools/pybrain/pybrain/tools/example_tools.py	/^    agent = None$/;"	v	class:ExTools
agent_cleanup	pybrain/tools/rlgluebridge.py	/^    def agent_cleanup(self):$/;"	m	class:RlglueAgentAdapter
agent_cleanup	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    def agent_cleanup(self):$/;"	m	class:RlglueAgentAdapter
agent_end	pybrain/tools/rlgluebridge.py	/^    def agent_end(self, reward):$/;"	m	class:RlglueAgentAdapter
agent_end	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    def agent_end(self, reward):$/;"	m	class:RlglueAgentAdapter
agent_freeze	pybrain/tools/rlgluebridge.py	/^    def agent_freeze(self):$/;"	m	class:RlglueAgentAdapter
agent_freeze	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    def agent_freeze(self):$/;"	m	class:RlglueAgentAdapter
agent_init	pybrain/tools/rlgluebridge.py	/^    def agent_init(self, task_specification=None):$/;"	m	class:RlglueAgentAdapter
agent_init	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    def agent_init(self, task_specification=None):$/;"	m	class:RlglueAgentAdapter
agent_message	pybrain/tools/rlgluebridge.py	/^    def agent_message(self, message):$/;"	m	class:RlglueAgentAdapter
agent_message	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    def agent_message(self, message):$/;"	m	class:RlglueAgentAdapter
agent_start	pybrain/tools/rlgluebridge.py	/^    def agent_start(self, firstObservation):$/;"	m	class:RlglueAgentAdapter
agent_start	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    def agent_start(self, firstObservation):$/;"	m	class:RlglueAgentAdapter
agent_step	pybrain/tools/rlgluebridge.py	/^    def agent_step(self, reward, observation):$/;"	m	class:RlglueAgentAdapter
agent_step	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    def agent_step(self, reward, observation):$/;"	m	class:RlglueAgentAdapter
agents	tools/pybrain/examples/rl/environments/capturegame/minitournament.py	/^agents = [randAgent, killAgent, netAgent, netAgentGreedy]$/;"	v
algo	tools/pybrain/examples/optimization/optimizerinterface.py	/^algo = CMAES$/;"	v
algo	tools/pybrain/examples/optimization/optimizerinterface.py	/^algo = HillClimber$/;"	v
algos	pybrain/rl/learners/valuebased/linearfa.py	/^    algos = [Q_LinFA, QLambda_LinFA, SARSALambda_LinFA, LSPI, LSTDQLambda, GQLambda]    $/;"	v	class:LearningTester
algos	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    algos = [Q_LinFA, QLambda_LinFA, SARSALambda_LinFA, LSPI, LSTDQLambda, GQLambda]    $/;"	v	class:LearningTester
allActions	pybrain/rl/environments/mazes/maze.py	/^    allActions = [N, E, S, W]$/;"	v	class:Maze
allActions	pybrain/rl/environments/mazes/polarmaze.py	/^    allActions = [Stay, Forward, TurnAround, TurnLeft, TurnRight]$/;"	v	class:PolarMaze
allActions	tools/pybrain/pybrain/rl/environments/mazes/maze.py	/^    allActions = [N, E, S, W]$/;"	v	class:Maze
allActions	tools/pybrain/pybrain/rl/environments/mazes/polarmaze.py	/^    allActions = [Stay, Forward, TurnAround, TurnLeft, TurnRight]$/;"	v	class:PolarMaze
allPts	pybrain/supervised/trainers/svmtrainer.py	/^    allPts = []$/;"	v	class:GridSearch
allPts	tools/pybrain/pybrain/supervised/trainers/svmtrainer.py	/^    allPts = []$/;"	v	class:GridSearch
allScores	pybrain/supervised/trainers/svmtrainer.py	/^    allScores = []$/;"	v	class:GridSearch
allScores	tools/pybrain/pybrain/supervised/trainers/svmtrainer.py	/^    allScores = []$/;"	v	class:GridSearch
all_rewards	enac.py	/^        all_rewards = experiment.doEpisodes(1)$/;"	v
allalgos	pybrain/tests/optimizationtest.py	/^    allalgos = filter(lambda c: (isclass(c)$/;"	v
allalgos	tools/pybrain/pybrain/tests/optimizationtest.py	/^    allalgos = filter(lambda c: (isclass(c)$/;"	v
alldata	tools/pybrain/docs/tutorials/fnn.py	/^alldata = ClassificationDataSet(2, 1, nb_classes=3)$/;"	v
allowEquality	pybrain/optimization/populationbased/multiobjective/nsga2.py	/^    allowEquality = True$/;"	v	class:MultiObjectiveGA
allowEquality	tools/pybrain/pybrain/optimization/populationbased/multiobjective/nsga2.py	/^    allowEquality = True$/;"	v	class:MultiObjectiveGA
alternateStarting	pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^    alternateStarting = False$/;"	v	class:CaptureGameTask
alternateStarting	pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^    alternateStarting = False$/;"	v	class:GomokuTask
alternateStarting	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^    alternateStarting = False$/;"	v	class:CaptureGameTask
alternateStarting	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^    alternateStarting = False$/;"	v	class:GomokuTask
and_task	pybrain/rl/environments/classic/xor.py	/^    and_task = False$/;"	v	class:XORTask
and_task	tools/pybrain/pybrain/rl/environments/classic/xor.py	/^    and_task = False$/;"	v	class:XORTask
append	pybrain/datasets/dataset.py	/^    def append(self, label, row):$/;"	m	class:DataSet
append	tools/pybrain/pybrain/datasets/dataset.py	/^    def append(self, label, row):$/;"	m	class:DataSet
appendLinked	pybrain/datasets/dataset.py	/^    def appendLinked(self, *args):$/;"	m	class:DataSet
appendLinked	tools/pybrain/pybrain/datasets/dataset.py	/^    def appendLinked(self, *args):$/;"	m	class:DataSet
appendToFile	pybrain/tools/customxml/networkwriter.py	/^    def appendToFile(net, filename):$/;"	m	class:NetworkWriter
appendToFile	tools/pybrain/pybrain/tools/customxml/networkwriter.py	/^    def appendToFile(net, filename):$/;"	m	class:NetworkWriter
apply	pybrain/supervised/evolino/filter.py	/^    def apply(self, population):$/;"	m	class:EvolinoBurstMutation
apply	pybrain/supervised/evolino/filter.py	/^    def apply(self, population):$/;"	m	class:EvolinoEvaluation
apply	pybrain/supervised/evolino/filter.py	/^    def apply(self, population):$/;"	m	class:EvolinoReproduction
apply	pybrain/supervised/evolino/filter.py	/^    def apply(self, population):$/;"	m	class:EvolinoSelection
apply	pybrain/supervised/evolino/filter.py	/^    def apply(self, population):$/;"	m	class:EvolinoSubReproduction
apply	pybrain/supervised/evolino/filter.py	/^    def apply(self, population):$/;"	m	class:EvolinoSubSelection
apply	pybrain/supervised/evolino/gfilter.py	/^    def apply(self, population):$/;"	m	class:Filter
apply	pybrain/supervised/evolino/gfilter.py	/^    def apply(self, population):$/;"	m	class:Randomization
apply	pybrain/supervised/evolino/gfilter.py	/^    def apply(self, population):$/;"	m	class:SimpleMutation
apply	tools/pybrain/pybrain/supervised/evolino/filter.py	/^    def apply(self, population):$/;"	m	class:EvolinoBurstMutation
apply	tools/pybrain/pybrain/supervised/evolino/filter.py	/^    def apply(self, population):$/;"	m	class:EvolinoEvaluation
apply	tools/pybrain/pybrain/supervised/evolino/filter.py	/^    def apply(self, population):$/;"	m	class:EvolinoReproduction
apply	tools/pybrain/pybrain/supervised/evolino/filter.py	/^    def apply(self, population):$/;"	m	class:EvolinoSelection
apply	tools/pybrain/pybrain/supervised/evolino/filter.py	/^    def apply(self, population):$/;"	m	class:EvolinoSubReproduction
apply	tools/pybrain/pybrain/supervised/evolino/filter.py	/^    def apply(self, population):$/;"	m	class:EvolinoSubSelection
apply	tools/pybrain/pybrain/supervised/evolino/gfilter.py	/^    def apply(self, population):$/;"	m	class:Filter
apply	tools/pybrain/pybrain/supervised/evolino/gfilter.py	/^    def apply(self, population):$/;"	m	class:Randomization
apply	tools/pybrain/pybrain/supervised/evolino/gfilter.py	/^    def apply(self, population):$/;"	m	class:SimpleMutation
approxChiFunction	pybrain/tools/functions.py	/^def approxChiFunction(dim):$/;"	f
approxChiFunction	tools/pybrain/pybrain/tools/functions.py	/^def approxChiFunction(dim):$/;"	f
argdict	pybrain/utilities.py	/^    argdict = None$/;"	v	class:XMLBuildable
argdict	tools/pybrain/pybrain/utilities.py	/^    argdict = None$/;"	v	class:XMLBuildable
arrayPermutation	pybrain/supervised/knn/lsh/minhash.py	/^def arrayPermutation(permutation):$/;"	f
arrayPermutation	tools/pybrain/pybrain/supervised/knn/lsh/minhash.py	/^def arrayPermutation(permutation):$/;"	f
asBinary	pybrain/utilities.py	/^def asBinary(i):$/;"	f
asBinary	tools/pybrain/pybrain/utilities.py	/^def asBinary(i):$/;"	f
assignClasses	pybrain/datasets/classification.py	/^    def assignClasses(self):$/;"	m	class:ClassificationDataSet
assignClasses	tools/pybrain/pybrain/datasets/classification.py	/^    def assignClasses(self):$/;"	m	class:ClassificationDataSet
asymmetrify	pybrain/rl/environments/functions/transformations.py	/^    def asymmetrify(x, beta=0.2):$/;"	m	class:BBOBTransformationFunction
asymmetrify	tools/pybrain/pybrain/rl/environments/functions/transformations.py	/^    def asymmetrify(x, beta=0.2):$/;"	m	class:BBOBTransformationFunction
attachSensor	pybrain/rl/environments/ode/tools/xodetools.py	/^    def attachSensor(self, type, *args, **kwargs):$/;"	m	class:XODEfile
attachSensor	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def attachSensor(self, type, *args, **kwargs):$/;"	m	class:XODEfile
attribute	pybrain/tests/unittests/tools/test_rlgluebridge.py	/^    attribute = "my-attribute"$/;"	v	class:PseudoPybrainAgent
attribute	tools/pybrain/pybrain/tests/unittests/tools/test_rlgluebridge.py	/^    attribute = "my-attribute"$/;"	v	class:PseudoPybrainAgent
averageOverGames	pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^    averageOverGames = 10$/;"	v	class:CaptureGameTask
averageOverGames	pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^    averageOverGames = 10$/;"	v	class:GomokuTask
averageOverGames	pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    averageOverGames = 1$/;"	v	class:HandicapCaptureTask
averageOverGames	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^    averageOverGames = 10$/;"	v	class:CaptureGameTask
averageOverGames	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^    averageOverGames = 10$/;"	v	class:GomokuTask
averageOverGames	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    averageOverGames = 1$/;"	v	class:HandicapCaptureTask
avgFoundAfter	pybrain/utilities.py	/^def avgFoundAfter(decreasingTargetValues, listsOfActualValues, batchSize=1, useMedian=False):$/;"	f
avgFoundAfter	tools/pybrain/pybrain/utilities.py	/^def avgFoundAfter(decreasingTargetValues, listsOfActualValues, batchSize=1, useMedian=False):$/;"	f
b	pybrain/optimization/populationbased/coevolution/competitivecoevolution.py	/^    def b(x, y):$/;"	m	class:CompetitiveCoevolution
b	pybrain/tools/kwargsprocessor.py	/^        b = property(lambda self: self._b) # b will be readonly$/;"	v	class:KWArgsProcessor.C
b	tools/pybrain/pybrain/optimization/populationbased/coevolution/competitivecoevolution.py	/^    def b(x, y):$/;"	m	class:CompetitiveCoevolution
b	tools/pybrain/pybrain/tools/kwargsprocessor.py	/^        b = property(lambda self: self._b) # b will be readonly$/;"	v	class:KWArgsProcessor.C
backActivate	pybrain/structure/evolvables/cheaplycopiable.py	/^    def backActivate(self, *args, **kwargs):$/;"	m	class:CheaplyCopiable
backActivate	pybrain/structure/evolvables/maskedmodule.py	/^    def backActivate(self, *args, **kwargs):$/;"	m	class:MaskedModule
backActivate	pybrain/structure/modules/module.py	/^    def backActivate(self, outerr):$/;"	m	class:Module
backActivate	pybrain/structure/networks/recurrent.py	/^    def backActivate(self, outerr):$/;"	m	class:RecurrentNetworkComponent
backActivate	tools/pybrain/pybrain/structure/evolvables/cheaplycopiable.py	/^    def backActivate(self, *args, **kwargs):$/;"	m	class:CheaplyCopiable
backActivate	tools/pybrain/pybrain/structure/evolvables/maskedmodule.py	/^    def backActivate(self, *args, **kwargs):$/;"	m	class:MaskedModule
backActivate	tools/pybrain/pybrain/structure/modules/module.py	/^    def backActivate(self, outerr):$/;"	m	class:Module
backActivate	tools/pybrain/pybrain/structure/networks/recurrent.py	/^    def backActivate(self, outerr):$/;"	m	class:RecurrentNetworkComponent
backFileList	multirun.py	/^backFileList = [LSTDAC_TRACE_FILE, HESSIANAC_TRACE_FILE,$/;"	v
backFolder	multirun.py	/^backFolder = '.\/res\/back\/'$/;"	v
backprojectionFactor	pybrain/supervised/trainers/evolino.py	/^    backprojectionFactor = property(lambda self: self._backprojectionFactor)$/;"	v	class:EvolinoTrainer
backprojectionFactor	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^    backprojectionFactor = 0.001,$/;"	v
backprojectionFactor	tools/pybrain/pybrain/supervised/trainers/evolino.py	/^    backprojectionFactor = property(lambda self: self._backprojectionFactor)$/;"	v	class:EvolinoTrainer
backward	pybrain/structure/connections/connection.py	/^    def backward(self, inmodOffset=0, outmodOffset=0):$/;"	m	class:Connection
backward	pybrain/structure/evolvables/cheaplycopiable.py	/^    def backward(self, *args, **kwargs):$/;"	m	class:CheaplyCopiable
backward	pybrain/structure/evolvables/maskedmodule.py	/^    def backward(self, *args, **kwargs):$/;"	m	class:MaskedModule
backward	pybrain/structure/modules/module.py	/^    def backward(self):$/;"	m	class:Module
backward	pybrain/structure/networks/recurrent.py	/^    def backward(self):$/;"	m	class:RecurrentNetworkComponent
backward	tools/pybrain/pybrain/structure/connections/connection.py	/^    def backward(self, inmodOffset=0, outmodOffset=0):$/;"	m	class:Connection
backward	tools/pybrain/pybrain/structure/evolvables/cheaplycopiable.py	/^    def backward(self, *args, **kwargs):$/;"	m	class:CheaplyCopiable
backward	tools/pybrain/pybrain/structure/evolvables/maskedmodule.py	/^    def backward(self, *args, **kwargs):$/;"	m	class:MaskedModule
backward	tools/pybrain/pybrain/structure/modules/module.py	/^    def backward(self):$/;"	m	class:Module
backward	tools/pybrain/pybrain/structure/networks/recurrent.py	/^    def backward(self):$/;"	m	class:RecurrentNetworkComponent
bangPenalty	pybrain/rl/environments/mazes/tasks/maze.py	/^    bangPenalty = 0$/;"	v	class:MazeTask
bangPenalty	pybrain/rl/environments/mazes/tasks/maze4x3.py	/^    bangPenalty = -0.04$/;"	v	class:FourByThreeMaze
bangPenalty	pybrain/rl/environments/mazes/tasks/shuttle.py	/^    bangPenalty = -3$/;"	v	class:ShuttleDocking
bangPenalty	pybrain/rl/environments/mazes/tasks/tmaze.py	/^    bangPenalty = -0.1$/;"	v	class:TMaze
bangPenalty	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze.py	/^    bangPenalty = 0$/;"	v	class:MazeTask
bangPenalty	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze4x3.py	/^    bangPenalty = -0.04$/;"	v	class:FourByThreeMaze
bangPenalty	tools/pybrain/pybrain/rl/environments/mazes/tasks/shuttle.py	/^    bangPenalty = -3$/;"	v	class:ShuttleDocking
bangPenalty	tools/pybrain/pybrain/rl/environments/mazes/tasks/tmaze.py	/^    bangPenalty = -0.1$/;"	v	class:TMaze
baseTransform	pybrain/tools/customxml/handling.py	/^def baseTransform(val):$/;"	f
baseTransform	tools/pybrain/pybrain/tools/customxml/handling.py	/^def baseTransform(val):$/;"	f
baselineType	pybrain/optimization/distributionbased/nes.py	/^    baselineType = BLOCKBASELINE$/;"	v	class:ExactNES
baselineType	tools/pybrain/pybrain/optimization/distributionbased/nes.py	/^    baselineType = BLOCKBASELINE$/;"	v	class:ExactNES
baseversion	pybrain/rl/environments/cartpole/fast_version/cartpolecompile.py	/^    baseversion = version[0].rsplit('.', 1)[0]$/;"	v
baseversion	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpolecompile.py	/^    baseversion = version[0].rsplit('.', 1)[0]$/;"	v
batch	tools/pybrain/examples/rl/environments/cartpole/cart_all.py	/^batch=2 #number of samples per learning step$/;"	v
batch	tools/pybrain/examples/rl/environments/cartpole/cart_cma.py	/^batch=2 #number of samples per learning step$/;"	v
batch	tools/pybrain/examples/rl/environments/cartpole/cart_enac.py	/^batch=50 #number of samples per learning step$/;"	v
batch	tools/pybrain/examples/rl/environments/cartpole/cart_fem.py	/^batch=2 #number of samples per learning step$/;"	v
batch	tools/pybrain/examples/rl/environments/cartpole/cart_nes.py	/^batch=2 #number of samples per learning step$/;"	v
batch	tools/pybrain/examples/rl/environments/cartpole/cart_pgpe.py	/^batch=1 #number of samples per learning step$/;"	v
batch	tools/pybrain/examples/rl/environments/cartpole/cart_reinf.py	/^batch=50 #number of samples per learning step$/;"	v
batch	tools/pybrain/examples/rl/environments/flexcube/flexcube_pgpe.py	/^batch=1 #number of samples per learning step$/;"	v
batch	tools/pybrain/examples/rl/environments/flexcube/flexcube_spsa.py	/^batch=2 #number of samples per learning step$/;"	v
batch	tools/pybrain/examples/rl/environments/ode/acrobot_fd.py	/^batch=2 #number of samples per learning step$/;"	v
batch	tools/pybrain/examples/rl/environments/ode/acrobot_pgpe.py	/^batch=1 #number of samples per learning step$/;"	v
batch	tools/pybrain/examples/rl/environments/ode/ccrl_glass_pgpe.py	/^batch=1 #number of samples per learning step$/;"	v
batch	tools/pybrain/examples/rl/environments/ode/ccrl_plate_pgpe.py	/^batch=1 #number of samples per learning step$/;"	v
batch	tools/pybrain/examples/rl/environments/ode/johnnie_pgpe.py	/^batch=1 #number of samples per learning step$/;"	v
batch	tools/pybrain/examples/rl/environments/ode/johnnie_reinforce.py	/^batch=2 #number of samples per learning step$/;"	v
batch	tools/pybrain/examples/rl/environments/shipsteer/shipbench_pgpe.py	/^batch=1 #number of samples per learning step$/;"	v
batch	tools/pybrain/examples/rl/environments/shipsteer/shipbench_sde.py	/^batch = 30 #number of samples per gradient estimate (was: 20; more here due to stochastic setting)$/;"	v
batchMode	pybrain/rl/learners/valuebased/linearfa.py	/^    batchMode = False$/;"	v	class:LinearFALearner
batchMode	pybrain/rl/learners/valuebased/q.py	/^    batchMode = True$/;"	v	class:Q
batchMode	pybrain/rl/learners/valuebased/qlambda.py	/^    batchMode = False$/;"	v	class:QLambda
batchMode	pybrain/rl/learners/valuebased/sarsa.py	/^    batchMode = True$/;"	v	class:SARSA
batchMode	pybrain/rl/learners/valuebased/valuebased.py	/^    batchMode = True$/;"	v	class:ValueBasedLearner
batchMode	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    batchMode = False$/;"	v	class:LinearFALearner
batchMode	tools/pybrain/pybrain/rl/learners/valuebased/q.py	/^    batchMode = True$/;"	v	class:Q
batchMode	tools/pybrain/pybrain/rl/learners/valuebased/qlambda.py	/^    batchMode = False$/;"	v	class:QLambda
batchMode	tools/pybrain/pybrain/rl/learners/valuebased/sarsa.py	/^    batchMode = True$/;"	v	class:SARSA
batchMode	tools/pybrain/pybrain/rl/learners/valuebased/valuebased.py	/^    batchMode = True$/;"	v	class:ValueBasedLearner
batchSize	pybrain/optimization/distributionbased/cmaes.py	/^    def batchSize(self):$/;"	m	class:CMAES
batchSize	pybrain/optimization/distributionbased/distributionbased.py	/^    batchSize = 100$/;"	v	class:DistributionBasedOptimizer
batchSize	pybrain/optimization/distributionbased/rank1.py	/^    batchSize = None $/;"	v	class:Rank1NES
batchSize	pybrain/optimization/distributionbased/snes.py	/^    batchSize = None     $/;"	v	class:SNES
batchSize	pybrain/optimization/distributionbased/ves.py	/^    batchSize = 100$/;"	v	class:VanillaGradientEvolutionStrategies
batchSize	pybrain/optimization/distributionbased/xnes.py	/^    batchSize = None$/;"	v	class:XNES
batchSize	pybrain/optimization/finitedifference/fd.py	/^    batchSize = 10$/;"	v	class:FiniteDifferences
batchSize	pybrain/optimization/finitedifference/spsa.py	/^    batchSize = 2$/;"	v	class:SimpleSPSA
batchSize	pybrain/optimization/hillclimber.py	/^    def batchSize(self):$/;"	m	class:HillClimber
batchSize	pybrain/optimization/memetic/innermemetic.py	/^    def batchSize(self):$/;"	m	class:InnerMemeticSearch
batchSize	pybrain/optimization/memetic/memetic.py	/^    def batchSize(self):$/;"	m	class:MemeticSearch
batchSize	pybrain/optimization/optimizer.py	/^    batchSize = 1$/;"	v	class:BlackBoxOptimizer
batchSize	pybrain/optimization/populationbased/es.py	/^    def batchSize(self):$/;"	m	class:ES
batchSize	pybrain/optimization/populationbased/evolution.py	/^    def batchSize(self):$/;"	m	class:Evolution
batchSize	pybrain/optimization/populationbased/pso.py	/^    def batchSize(self):$/;"	m	class:ParticleSwarmOptimizer
batchSize	pybrain/rl/environments/episodic.py	/^    batchSize = 1$/;"	v	class:EpisodicTask
batchSize	pybrain/rl/learners/directsearch/rwr.py	/^    batchSize = 20$/;"	v	class:RWR
batchSize	tools/pybrain/pybrain/optimization/distributionbased/cmaes.py	/^    def batchSize(self):$/;"	m	class:CMAES
batchSize	tools/pybrain/pybrain/optimization/distributionbased/distributionbased.py	/^    batchSize = 100$/;"	v	class:DistributionBasedOptimizer
batchSize	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^    batchSize = None $/;"	v	class:Rank1NES
batchSize	tools/pybrain/pybrain/optimization/distributionbased/snes.py	/^    batchSize = None     $/;"	v	class:SNES
batchSize	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    batchSize = 100$/;"	v	class:VanillaGradientEvolutionStrategies
batchSize	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    batchSize = None$/;"	v	class:XNES
batchSize	tools/pybrain/pybrain/optimization/finitedifference/fd.py	/^    batchSize = 10$/;"	v	class:FiniteDifferences
batchSize	tools/pybrain/pybrain/optimization/finitedifference/spsa.py	/^    batchSize = 2$/;"	v	class:SimpleSPSA
batchSize	tools/pybrain/pybrain/optimization/hillclimber.py	/^    def batchSize(self):$/;"	m	class:HillClimber
batchSize	tools/pybrain/pybrain/optimization/memetic/innermemetic.py	/^    def batchSize(self):$/;"	m	class:InnerMemeticSearch
batchSize	tools/pybrain/pybrain/optimization/memetic/memetic.py	/^    def batchSize(self):$/;"	m	class:MemeticSearch
batchSize	tools/pybrain/pybrain/optimization/optimizer.py	/^    batchSize = 1$/;"	v	class:BlackBoxOptimizer
batchSize	tools/pybrain/pybrain/optimization/populationbased/es.py	/^    def batchSize(self):$/;"	m	class:ES
batchSize	tools/pybrain/pybrain/optimization/populationbased/evolution.py	/^    def batchSize(self):$/;"	m	class:Evolution
batchSize	tools/pybrain/pybrain/optimization/populationbased/pso.py	/^    def batchSize(self):$/;"	m	class:ParticleSwarmOptimizer
batchSize	tools/pybrain/pybrain/rl/environments/episodic.py	/^    batchSize = 1$/;"	v	class:EpisodicTask
batchSize	tools/pybrain/pybrain/rl/learners/directsearch/rwr.py	/^    batchSize = 20$/;"	v	class:RWR
batches	pybrain/datasets/dataset.py	/^    def batches(self, label, n, permutation=None):$/;"	m	class:DataSet
batches	tools/pybrain/pybrain/datasets/dataset.py	/^    def batches(self, label, n, permutation=None):$/;"	m	class:DataSet
bbob_collection	pybrain/rl/environments/functions/bbob2010.py	/^bbob_collection = [bbob_f1, bbob_f2, bbob_f3, bbob_f4, $/;"	v
bbob_collection	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^bbob_collection = [bbob_f1, bbob_f2, bbob_f3, bbob_f4, $/;"	v
bbob_f1	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f1(dim):$/;"	f
bbob_f1	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f1(dim):$/;"	f
bbob_f10	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f10(dim):$/;"	f
bbob_f10	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f10(dim):$/;"	f
bbob_f101	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f101(dim):$/;"	f
bbob_f101	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f101(dim):$/;"	f
bbob_f102	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f102(dim):$/;"	f
bbob_f102	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f102(dim):$/;"	f
bbob_f103	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f103(dim):$/;"	f
bbob_f103	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f103(dim):$/;"	f
bbob_f104	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f104(dim):$/;"	f
bbob_f104	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f104(dim):$/;"	f
bbob_f105	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f105(dim):$/;"	f
bbob_f105	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f105(dim):$/;"	f
bbob_f106	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f106(dim):$/;"	f
bbob_f106	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f106(dim):$/;"	f
bbob_f107	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f107(dim):$/;"	f
bbob_f107	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f107(dim):$/;"	f
bbob_f108	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f108(dim):$/;"	f
bbob_f108	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f108(dim):$/;"	f
bbob_f109	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f109(dim):$/;"	f
bbob_f109	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f109(dim):$/;"	f
bbob_f11	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f11(dim):$/;"	f
bbob_f11	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f11(dim):$/;"	f
bbob_f110	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f110(dim):$/;"	f
bbob_f110	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f110(dim):$/;"	f
bbob_f111	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f111(dim):$/;"	f
bbob_f111	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f111(dim):$/;"	f
bbob_f112	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f112(dim):$/;"	f
bbob_f112	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f112(dim):$/;"	f
bbob_f113	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f113(dim):$/;"	f
bbob_f113	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f113(dim):$/;"	f
bbob_f114	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f114(dim):$/;"	f
bbob_f114	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f114(dim):$/;"	f
bbob_f115	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f115(dim):$/;"	f
bbob_f115	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f115(dim):$/;"	f
bbob_f116	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f116(dim):$/;"	f
bbob_f116	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f116(dim):$/;"	f
bbob_f117	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f117(dim):$/;"	f
bbob_f117	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f117(dim):$/;"	f
bbob_f118	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f118(dim):$/;"	f
bbob_f118	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f118(dim):$/;"	f
bbob_f119	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f119(dim):$/;"	f
bbob_f119	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f119(dim):$/;"	f
bbob_f12	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f12(dim):$/;"	f
bbob_f12	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f12(dim):$/;"	f
bbob_f120	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f120(dim):$/;"	f
bbob_f120	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f120(dim):$/;"	f
bbob_f121	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f121(dim):$/;"	f
bbob_f121	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f121(dim):$/;"	f
bbob_f122	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f122(dim):$/;"	f
bbob_f122	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f122(dim):$/;"	f
bbob_f123	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f123(dim):$/;"	f
bbob_f123	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f123(dim):$/;"	f
bbob_f124	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f124(dim):$/;"	f
bbob_f124	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f124(dim):$/;"	f
bbob_f125	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f125(dim):$/;"	f
bbob_f125	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f125(dim):$/;"	f
bbob_f126	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f126(dim):$/;"	f
bbob_f126	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f126(dim):$/;"	f
bbob_f127	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f127(dim):$/;"	f
bbob_f127	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f127(dim):$/;"	f
bbob_f128	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f128(dim):$/;"	f
bbob_f128	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f128(dim):$/;"	f
bbob_f129	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f129(dim):$/;"	f
bbob_f129	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f129(dim):$/;"	f
bbob_f13	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f13(dim):$/;"	f
bbob_f13	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f13(dim):$/;"	f
bbob_f130	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f130(dim):$/;"	f
bbob_f130	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f130(dim):$/;"	f
bbob_f14	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f14(dim):$/;"	f
bbob_f14	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f14(dim):$/;"	f
bbob_f15	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f15(dim):$/;"	f
bbob_f15	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f15(dim):$/;"	f
bbob_f16	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f16(dim):$/;"	f
bbob_f16	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f16(dim):$/;"	f
bbob_f17	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f17(dim):$/;"	f
bbob_f17	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f17(dim):$/;"	f
bbob_f18	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f18(dim):$/;"	f
bbob_f18	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f18(dim):$/;"	f
bbob_f19	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f19(dim):$/;"	f
bbob_f19	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f19(dim):$/;"	f
bbob_f2	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f2(dim):$/;"	f
bbob_f2	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f2(dim):$/;"	f
bbob_f20	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f20(dim):$/;"	f
bbob_f20	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f20(dim):$/;"	f
bbob_f21	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f21(dim):$/;"	f
bbob_f21	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f21(dim):$/;"	f
bbob_f22	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f22(dim):$/;"	f
bbob_f22	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f22(dim):$/;"	f
bbob_f23	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f23(dim):$/;"	f
bbob_f23	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f23(dim):$/;"	f
bbob_f24	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f24(dim):$/;"	f
bbob_f24	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f24(dim):$/;"	f
bbob_f3	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f3(dim):$/;"	f
bbob_f3	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f3(dim):$/;"	f
bbob_f4	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f4(dim):$/;"	f
bbob_f4	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f4(dim):$/;"	f
bbob_f5	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f5(dim):$/;"	f
bbob_f5	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f5(dim):$/;"	f
bbob_f6	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f6(dim):$/;"	f
bbob_f6	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f6(dim):$/;"	f
bbob_f7	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f7(dim):$/;"	f
bbob_f7	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f7(dim):$/;"	f
bbob_f8	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f8(dim):$/;"	f
bbob_f8	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f8(dim):$/;"	f
bbob_f9	pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f9(dim):$/;"	f
bbob_f9	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^def bbob_f9(dim):$/;"	f
bbob_noise_collection	pybrain/rl/environments/functions/bbob2010.py	/^bbob_noise_collection = [bbob_f101, bbob_f102, bbob_f103, $/;"	v
bbob_noise_collection	tools/pybrain/pybrain/rl/environments/functions/bbob2010.py	/^bbob_noise_collection = [bbob_f101, bbob_f102, bbob_f103, $/;"	v
begin	tools/pybrain/docs/code2tut.py	/^        begin = False$/;"	v
begin	tools/pybrain/docs/code2tut.py	/^begin = True$/;"	v
best	pybrain/optimization/populationbased/pso.py	/^    def best(self, particlelist):$/;"	m	class:ParticleSwarmOptimizer
best	tools/pybrain/pybrain/optimization/populationbased/pso.py	/^    def best(self, particlelist):$/;"	m	class:ParticleSwarmOptimizer
bestHandicap	pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    def bestHandicap(self):$/;"	m	class:HandicapCaptureTask
bestHandicap	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    def bestHandicap(self):$/;"	m	class:HandicapCaptureTask
biasParams	pybrain/structure/modules/mdrnnlayer.py	/^    def biasParams(self):$/;"	m	class:MdrnnLayer
biasParams	pybrain/structure/networks/rbm.py	/^    def biasParams(self):$/;"	m	class:Rbm
biasParams	tools/pybrain/pybrain/structure/modules/mdrnnlayer.py	/^    def biasParams(self):$/;"	m	class:MdrnnLayer
biasParams	tools/pybrain/pybrain/structure/networks/rbm.py	/^    def biasParams(self):$/;"	m	class:Rbm
bignew	tools/pybrain/examples/rl/environments/capturegame/evolvingplayer.py	/^bignew = newnet.getBase().resizedTo(newsize)$/;"	v
bigold	tools/pybrain/examples/rl/environments/capturegame/evolvingplayer.py	/^bigold = net.getBase().resizedTo(newsize)$/;"	v
bilinearFactor	pybrain/tools/rankingfunctions.py	/^    bilinearFactor = 20$/;"	v	class:BilinearRanking
bilinearFactor	tools/pybrain/pybrain/tools/rankingfunctions.py	/^    bilinearFactor = 20$/;"	v	class:BilinearRanking
blockCombine	pybrain/utilities.py	/^def blockCombine(l):$/;"	f
blockCombine	tools/pybrain/pybrain/utilities.py	/^def blockCombine(l):$/;"	f
blockList2Matrix	pybrain/utilities.py	/^def blockList2Matrix(l):$/;"	f
blockList2Matrix	tools/pybrain/pybrain/utilities.py	/^def blockList2Matrix(l):$/;"	f
boundaries	pybrain/optimization/populationbased/pso.py	/^    boundaries = None$/;"	v	class:ParticleSwarmOptimizer
boundaries	tools/pybrain/pybrain/optimization/populationbased/pso.py	/^    boundaries = None$/;"	v	class:ParticleSwarmOptimizer
bp	tools/pybrain/examples/supervised/backprop/parityrnn.py	/^    bp = BackpropTrainer(N, DS, verbose = True)$/;"	v
bufferlist	pybrain/structure/modules/module.py	/^    bufferlist = None$/;"	v	class:Module
bufferlist	pybrain/structure/networks/recurrent.py	/^    bufferlist = Network.bufferlist$/;"	v	class:RecurrentNetwork
bufferlist	tools/pybrain/pybrain/structure/modules/module.py	/^    bufferlist = None$/;"	v	class:Module
bufferlist	tools/pybrain/pybrain/structure/networks/recurrent.py	/^    bufferlist = Network.bufferlist$/;"	v	class:RecurrentNetwork
buildAppropriateDataset	pybrain/tests/helpers.py	/^def buildAppropriateDataset(module):$/;"	f
buildAppropriateDataset	tools/pybrain/pybrain/tests/helpers.py	/^def buildAppropriateDataset(module):$/;"	f
buildCyclicNetwork	pybrain/tests/unittests/structure/networks/test_cyclic_network.py	/^def buildCyclicNetwork(recurrent):$/;"	f
buildCyclicNetwork	tools/pybrain/pybrain/tests/unittests/structure/networks/test_cyclic_network.py	/^def buildCyclicNetwork(recurrent):$/;"	f
buildDecomposableNetwork	pybrain/tests/unittests/structure/networks/test_network_decomposition.py	/^def buildDecomposableNetwork():$/;"	f
buildDecomposableNetwork	tools/pybrain/pybrain/tests/unittests/structure/networks/test_network_decomposition.py	/^def buildDecomposableNetwork():$/;"	f
buildMinimalLSTMNetwork	pybrain/tests/unittests/structure/modules/test_peephole_lstm.py	/^def buildMinimalLSTMNetwork():$/;"	f
buildMinimalLSTMNetwork	tools/pybrain/pybrain/tests/unittests/structure/modules/test_peephole_lstm.py	/^def buildMinimalLSTMNetwork():$/;"	f
buildMinimalMDLSTMNetwork	pybrain/tests/unittests/structure/modules/test_peephole_mdlstm.py	/^def buildMinimalMDLSTMNetwork():$/;"	f
buildMinimalMDLSTMNetwork	tools/pybrain/pybrain/tests/unittests/structure/modules/test_peephole_mdlstm.py	/^def buildMinimalMDLSTMNetwork():$/;"	f
buildMixedNestedNetwork	pybrain/tests/unittests/structure/networks/test_nested_ffn_and_rnn.py	/^def buildMixedNestedNetwork():$/;"	f
buildMixedNestedNetwork	tools/pybrain/pybrain/tests/unittests/structure/networks/test_nested_ffn_and_rnn.py	/^def buildMixedNestedNetwork():$/;"	f
buildNestedNetwork	pybrain/tests/unittests/structure/networks/test_nested_network.py	/^def buildNestedNetwork():$/;"	f
buildNestedNetwork	tools/pybrain/pybrain/tests/unittests/structure/networks/test_nested_network.py	/^def buildNestedNetwork():$/;"	f
buildNetwork	pybrain/tools/shortcuts.py	/^def buildNetwork(*layers, **options):$/;"	f
buildNetwork	tools/pybrain/pybrain/tools/shortcuts.py	/^def buildNetwork(*layers, **options):$/;"	f
buildNonGravityNet	pybrain/tests/unittests/structure/networks/test_no_gravity_network.py	/^def buildNonGravityNet(recurrent = False):$/;"	f
buildNonGravityNet	tools/pybrain/pybrain/tests/unittests/structure/networks/test_no_gravity_network.py	/^def buildNonGravityNet(recurrent = False):$/;"	f
buildParityNet	tools/pybrain/examples/supervised/backprop/parityrnn.py	/^def buildParityNet():$/;"	f
buildRecurrentNetwork	pybrain/tests/unittests/structure/networks/test_recurrent_network.py	/^def buildRecurrentNetwork():$/;"	f
buildRecurrentNetwork	tools/pybrain/pybrain/tests/unittests/structure/networks/test_recurrent_network.py	/^def buildRecurrentNetwork():$/;"	f
buildSharedCrossedNetwork	pybrain/tests/unittests/structure/connections/test_shared_connections.py	/^def buildSharedCrossedNetwork():$/;"	f
buildSharedCrossedNetwork	tools/pybrain/pybrain/tests/unittests/structure/connections/test_shared_connections.py	/^def buildSharedCrossedNetwork():$/;"	f
buildSimpleBorderSwipingNet	pybrain/tests/unittests/structure/networks/test_borderswipingnetwork.py	/^def buildSimpleBorderSwipingNet(size = 3, dim = 3, hsize = 1, predefined = {}):$/;"	f
buildSimpleBorderSwipingNet	tools/pybrain/pybrain/tests/unittests/structure/networks/test_borderswipingnetwork.py	/^def buildSimpleBorderSwipingNet(size = 3, dim = 3, hsize = 1, predefined = {}):$/;"	f
buildSimpleLSTMNetwork	pybrain/tests/unittests/structure/modules/test_simple_lstm_network.py	/^def buildSimpleLSTMNetwork(peepholes = False):$/;"	f
buildSimpleLSTMNetwork	tools/pybrain/pybrain/tests/unittests/structure/modules/test_simple_lstm_network.py	/^def buildSimpleLSTMNetwork(peepholes = False):$/;"	f
buildSimpleMDLSTMNetwork	pybrain/tests/unittests/structure/modules/test_simple_mdlstm.py	/^def buildSimpleMDLSTMNetwork(peepholes = False):$/;"	f
buildSimpleMDLSTMNetwork	tools/pybrain/pybrain/tests/unittests/structure/modules/test_simple_mdlstm.py	/^def buildSimpleMDLSTMNetwork(peepholes = False):$/;"	f
buildSlicedNetwork	pybrain/tests/unittests/structure/connections/test_sliced_connections.py	/^def buildSlicedNetwork():$/;"	f
buildSlicedNetwork	tools/pybrain/pybrain/tests/unittests/structure/connections/test_sliced_connections.py	/^def buildSlicedNetwork():$/;"	f
buildSomeConnections	pybrain/tests/unittests/structure/networks/test_network_sort.py	/^def buildSomeConnections(modules):$/;"	f
buildSomeConnections	tools/pybrain/pybrain/tests/unittests/structure/networks/test_network_sort.py	/^def buildSomeConnections(modules):$/;"	f
buildSomeModules	pybrain/tests/unittests/structure/networks/test_network_sort.py	/^def buildSomeModules(number = 4):$/;"	f
buildSomeModules	tools/pybrain/pybrain/tests/unittests/structure/networks/test_network_sort.py	/^def buildSomeModules(number = 4):$/;"	f
buildSubsamplingNetwork	pybrain/tests/unittests/structure/connections/test_subsampling_connection.py	/^def buildSubsamplingNetwork():$/;"	f
buildSubsamplingNetwork	tools/pybrain/pybrain/tests/unittests/structure/connections/test_subsampling_connection.py	/^def buildSubsamplingNetwork():$/;"	f
buildSwipingNetwork	pybrain/tests/unittests/structure/networks/test_swiping_network.py	/^def buildSwipingNetwork(dimensions = 3):$/;"	f
buildSwipingNetwork	tools/pybrain/pybrain/tests/unittests/structure/networks/test_swiping_network.py	/^def buildSwipingNetwork(dimensions = 3):$/;"	f
burstMutate	pybrain/supervised/trainers/evolino.py	/^    def burstMutate(self):$/;"	m	class:EvolinoTrainer
burstMutate	tools/pybrain/pybrain/supervised/trainers/evolino.py	/^    def burstMutate(self):$/;"	m	class:EvolinoTrainer
c	examples/LSTDAC.py	/^        c = 0.8,$/;"	v
c	examples/problem_settings.py	/^c = 5$/;"	v
c	pybrain/rl/environments/functions/unimodal.py	/^    c = .1$/;"	v	class:GlasmachersFunction
c	settings.py	/^c = 5$/;"	v
c	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^    c = .1$/;"	v	class:GlasmachersFunction
c1	pybrain/tools/kwargsprocessor.py	/^    c1 = C(m=1)$/;"	v	class:KWArgsProcessor
c1	tools/pybrain/pybrain/tools/kwargsprocessor.py	/^    c1 = C(m=1)$/;"	v	class:KWArgsProcessor
c2	pybrain/tools/kwargsprocessor.py	/^    c2 = C(m=1, a=1, b=2)$/;"	v	class:KWArgsProcessor
c2	tools/pybrain/pybrain/tools/kwargsprocessor.py	/^    c2 = C(m=1, a=1, b=2)$/;"	v	class:KWArgsProcessor
c3	pybrain/tools/kwargsprocessor.py	/^    c3 = C(m=1, simple="hallo", a=11, b=22, c=55)$/;"	v	class:KWArgsProcessor
c3	tools/pybrain/pybrain/tools/kwargsprocessor.py	/^    c3 = C(m=1, simple="hallo", a=11, b=22, c=55)$/;"	v	class:KWArgsProcessor
cFlag	examples/ENAC.py	/^cFlag = dict(gs=-2, robot=2, trap=-1, normal=0)$/;"	v
cFlag	examples/QLambda_LinFA.py	/^cFlag = dict(gs=-2, robot=2, trap=-1, normal=0)$/;"	v
cFlag	examples/Q_LinFA.py	/^cFlag = dict(gs=-2, robot=2, trap=-1, normal=0)$/;"	v
cFlag	examples/SARSA_TL.py	/^cFlag = dict(gs=-2, robot=2, trap=-1, normal=0)$/;"	v
cFlag	main.py	/^cFlag = dict(gs=-2, robot=2, trap=-1, normal=0)$/;"	v
calBasisFuncVal	policy/BoltzmanAC.py	/^    def calBasisFuncVal(self, feaList):$/;"	m	class:BoltzmanPolicy
calBasisFuncVal	policy/BoltzmanAC.py	/^    def calBasisFuncVal(self, feaList):$/;"	m	class:PolicyInterface
calSecondBasisFuncVal	policy/BoltzmanAC.py	/^    def calSecondBasisFuncVal(self, feaList):$/;"	m	class:BoltzmanPolicy
calSecondBasisFuncVal	policy/BoltzmanAC.py	/^    def calSecondBasisFuncVal(self, feaList):$/;"	m	class:PolicyInterface
calcFisherInformation	pybrain/tools/fisher.py	/^def calcFisherInformation(sigma, invSigma=None, factorSigma=None):$/;"	f
calcFisherInformation	tools/pybrain/pybrain/tools/fisher.py	/^def calcFisherInformation(sigma, invSigma=None, factorSigma=None):$/;"	f
calcInvFisher	pybrain/tools/fisher.py	/^def calcInvFisher(sigma, invSigma=None, factorSigma=None):$/;"	f
calcInvFisher	tools/pybrain/pybrain/tools/fisher.py	/^def calcInvFisher(sigma, invSigma=None, factorSigma=None):$/;"	f
calcNormal	pybrain/rl/environments/flexcube/objects3d.py	/^    def calcNormal(self, xVector, yVector):$/;"	m	class:Objects3D
calcNormal	pybrain/rl/environments/shipsteer/viewer.py	/^    def calcNormal(self, xVector, yVector):$/;"	m	class:FlexCubeRenderer
calcNormal	tools/pybrain/pybrain/rl/environments/flexcube/objects3d.py	/^    def calcNormal(self, xVector, yVector):$/;"	m	class:Objects3D
calcNormal	tools/pybrain/pybrain/rl/environments/shipsteer/viewer.py	/^    def calcNormal(self, xVector, yVector):$/;"	m	class:FlexCubeRenderer
calcUpdateByRow	pybrain/unsupervised/trainers/rbm.py	/^    def calcUpdateByRow(self, row):$/;"	m	class:RbmGibbsTrainer
calcUpdateByRow	tools/pybrain/pybrain/unsupervised/trainers/rbm.py	/^    def calcUpdateByRow(self, row):$/;"	m	class:RbmGibbsTrainer
calcUpdateByRows	pybrain/unsupervised/trainers/rbm.py	/^    def calcUpdateByRows(self, rows):$/;"	m	class:RbmGibbsTrainer
calcUpdateByRows	tools/pybrain/pybrain/unsupervised/trainers/rbm.py	/^    def calcUpdateByRows(self, rows):$/;"	m	class:RbmGibbsTrainer
calculate	pybrain/tools/datasettools.py	/^    def calculate(self, ds, bounds=[-1, 1], field='input'):$/;"	m	class:DataSetNormalizer
calculate	tools/pybrain/pybrain/tools/datasettools.py	/^    def calculate(self, ds, bounds=[-1, 1], field='input'):$/;"	m	class:DataSetNormalizer
calculateGradient	learners/ENACLearner.py	/^    def calculateGradient(self):$/;"	m	class:ENAC
calculateGradient	pybrain/rl/learners/directsearch/enac.py	/^    def calculateGradient(self):$/;"	m	class:ENAC
calculateGradient	pybrain/rl/learners/directsearch/gpomdp.py	/^    def calculateGradient(self):$/;"	m	class:GPOMDP
calculateGradient	pybrain/rl/learners/directsearch/policygradient.py	/^    def calculateGradient(self):$/;"	m	class:PolicyGradientLearner
calculateGradient	pybrain/rl/learners/directsearch/reinforce.py	/^    def calculateGradient(self):$/;"	m	class:Reinforce
calculateGradient	tools/pybrain/pybrain/rl/learners/directsearch/enac.py	/^    def calculateGradient(self):$/;"	m	class:ENAC
calculateGradient	tools/pybrain/pybrain/rl/learners/directsearch/gpomdp.py	/^    def calculateGradient(self):$/;"	m	class:GPOMDP
calculateGradient	tools/pybrain/pybrain/rl/learners/directsearch/policygradient.py	/^    def calculateGradient(self):$/;"	m	class:PolicyGradientLearner
calculateGradient	tools/pybrain/pybrain/rl/learners/directsearch/reinforce.py	/^    def calculateGradient(self):$/;"	m	class:Reinforce
calculateModuleOutput	pybrain/tools/validation.py	/^    def calculateModuleOutput(cls, module, dataset):$/;"	m	class:ModuleValidator
calculateModuleOutput	tools/pybrain/pybrain/tools/validation.py	/^    def calculateModuleOutput(cls, module, dataset):$/;"	m	class:ModuleValidator
calculateOutput	pybrain/supervised/evolino/networkwrapper.py	/^    def calculateOutput(self, dataset, washout_calculation_ratio=(1, 2)):$/;"	m	class:EvolinoNetwork
calculateOutput	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def calculateOutput(self, dataset, washout_calculation_ratio=(1, 2)):$/;"	m	class:EvolinoNetwork
calculateStatistics	pybrain/datasets/classification.py	/^    def calculateStatistics(self):$/;"	m	class:ClassificationDataSet
calculateStatistics	tools/pybrain/pybrain/datasets/classification.py	/^    def calculateStatistics(self):$/;"	m	class:ClassificationDataSet
calculate_jobs	pybrain/supervised/trainers/svmtrainer.py	/^    def calculate_jobs(self):$/;"	m	class:GridSearch
calculate_jobs	tools/pybrain/pybrain/supervised/trainers/svmtrainer.py	/^    def calculate_jobs(self):$/;"	m	class:GridSearch
canonicClassString	pybrain/utilities.py	/^def canonicClassString(x):$/;"	f
canonicClassString	tools/pybrain/pybrain/utilities.py	/^def canonicClassString(x):$/;"	f
cap-P	tools/pybrain/docs/html/modindex.html	/^   <tr class="cap"><td><\/td><td><a name="cap-P"><strong>P<\/strong><\/a><\/td><td><\/td><\/tr><tr>$/;"	a
castToRegression	pybrain/datasets/classification.py	/^    def castToRegression(self, values):$/;"	m	class:ClassificationDataSet
castToRegression	tools/pybrain/pybrain/datasets/classification.py	/^    def castToRegression(self, values):$/;"	m	class:ClassificationDataSet
centerLearningRate	pybrain/optimization/distributionbased/rank1.py	/^    centerLearningRate = 1.0$/;"	v	class:Rank1NES
centerLearningRate	pybrain/optimization/distributionbased/snes.py	/^    centerLearningRate = 1.0$/;"	v	class:SNES
centerLearningRate	pybrain/optimization/distributionbased/xnes.py	/^    centerLearningRate = 1.0$/;"	v	class:XNES
centerLearningRate	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^    centerLearningRate = 1.0$/;"	v	class:Rank1NES
centerLearningRate	tools/pybrain/pybrain/optimization/distributionbased/snes.py	/^    centerLearningRate = 1.0$/;"	v	class:SNES
centerLearningRate	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    centerLearningRate = 1.0$/;"	v	class:XNES
centerOn	pybrain/rl/environments/ode/environment.py	/^    def centerOn(self, name):$/;"	m	class:ODEEnvironment
centerOn	pybrain/rl/environments/ode/tools/xodetools.py	/^    def centerOn(self, name):$/;"	m	class:XODEfile
centerOn	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def centerOn(self, name):$/;"	m	class:ODEEnvironment
centerOn	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def centerOn(self, name):$/;"	m	class:XODEfile
cfg	tools/pybrain/examples/unsupervised/rbm.py	/^cfg = RbmGibbsTrainerConfig()$/;"	v
chars	tools/pybrain/docs/html/_static/jquery.js	/^while(elem=second[i++])first[pos++]=elem;return first;},unique:function(array){var ret=[],done={};try{for(var i=0,length=array.length;i<length;i++){var id=jQuery.data(array[i]);if(!done[id]){done[id]=true;ret.push(array[i]);}}}catch(e){ret=array;}return ret;},grep:function(elems,callback,inv){var ret=[];for(var i=0,length=elems.length;i<length;i++)if(!inv!=!callback(elems[i],i))ret.push(elems[i]);return ret;},map:function(elems,callback){var ret=[];for(var i=0,length=elems.length;i<length;i++){var value=callback(elems[i],i);if(value!=null)ret[ret.length]=value;}return ret.concat.apply([],ret);}});var userAgent=navigator.userAgent.toLowerCase();jQuery.browser={version:(userAgent.match(\/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/)||[])[1],safari:\/webkit\/.test(userAgent),opera:\/opera\/.test(userAgent),msie:\/msie\/.test(userAgent)&&!\/opera\/.test(userAgent),mozilla:\/mozilla\/.test(userAgent)&&!\/(compatible|webkit)\/.test(userAgent)};var styleFloat=jQuery.browser.msie?"styleFloat":"cssFloat";jQuery.extend({boxModel:!jQuery.browser.msie||document.compatMode=="CSS1Compat",props:{"for":"htmlFor","class":"className","float":styleFloat,cssFloat:styleFloat,styleFloat:styleFloat,readonly:"readOnly",maxlength:"maxLength",cellspacing:"cellSpacing"}});jQuery.each({parent:function(elem){return elem.parentNode;},parents:function(elem){return jQuery.dir(elem,"parentNode");},next:function(elem){return jQuery.nth(elem,2,"nextSibling");},prev:function(elem){return jQuery.nth(elem,2,"previousSibling");},nextAll:function(elem){return jQuery.dir(elem,"nextSibling");},prevAll:function(elem){return jQuery.dir(elem,"previousSibling");},siblings:function(elem){return jQuery.sibling(elem.parentNode.firstChild,elem);},children:function(elem){return jQuery.sibling(elem.firstChild);},contents:function(elem){return jQuery.nodeName(elem,"iframe")?elem.contentDocument||elem.contentWindow.document:jQuery.makeArray(elem.childNodes);}},function(name,fn){jQuery.fn[name]=function(selector){var ret=jQuery.map(this,fn);if(selector&&typeof selector=="string")ret=jQuery.multiFilter(selector,ret);return this.pushStack(jQuery.unique(ret));};});jQuery.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(name,original){jQuery.fn[name]=function(){var args=arguments;return this.each(function(){for(var i=0,length=args.length;i<length;i++)jQuery(args[i])[original](this);});};});jQuery.each({removeAttr:function(name){jQuery.attr(this,name,"");if(this.nodeType==1)this.removeAttribute(name);},addClass:function(classNames){jQuery.className.add(this,classNames);},removeClass:function(classNames){jQuery.className.remove(this,classNames);},toggleClass:function(classNames){jQuery.className[jQuery.className.has(this,classNames)?"remove":"add"](this,classNames);},remove:function(selector){if(!selector||jQuery.filter(selector,[this]).r.length){jQuery("*",this).add(this).each(function(){jQuery.event.remove(this);jQuery.removeData(this);});if(this.parentNode)this.parentNode.removeChild(this);}},empty:function(){jQuery(">*",this).remove();while(this.firstChild)this.removeChild(this.firstChild);}},function(name,fn){jQuery.fn[name]=function(){return this.each(fn,arguments);};});jQuery.each(["Height","Width"],function(i,name){var type=name.toLowerCase();jQuery.fn[type]=function(size){return this[0]==window?jQuery.browser.opera&&document.body["client"+name]||jQuery.browser.safari&&window["inner"+name]||document.compatMode=="CSS1Compat"&&document.documentElement["client"+name]||document.body["client"+name]:this[0]==document?Math.max(Math.max(document.body["scroll"+name],document.documentElement["scroll"+name]),Math.max(document.body["offset"+name],document.documentElement["offset"+name])):size==undefined?(this.length?jQuery.css(this[0],type):null):this.css(type,size.constructor==String?size:size+"px");};});function num(elem,prop){return elem[0]&&parseInt(jQuery.curCSS(elem[0],prop,true),10)||0;}var chars=jQuery.browser.safari&&parseInt(jQuery.browser.version)<417?"(?:[\\\\w*_-]|\\\\\\\\.)":"(?:[\\\\w\\u0128-\\uFFFF*_-]|\\\\\\\\.)",quickChild=new RegExp("^>\\\\s*("+chars+"+)"),quickID=new RegExp("^("+chars+"+)(#)("+chars+"+)"),quickClass=new RegExp("^([#.]?)("+chars+"*)");jQuery.extend({expr:{"":function(a,i,m){return m[2]=="*"||jQuery.nodeName(a,m[2]);},"#":function(a,i,m){return a.getAttribute("id")==m[2];},":":{lt:function(a,i,m){return i<m[3]-0;},gt:function(a,i,m){return i>m[3]-0;},nth:function(a,i,m){return m[3]-0==i;},eq:function(a,i,m){return m[3]-0==i;},first:function(a,i){return i==0;},last:function(a,i,m,r){return i==r.length-1;},even:function(a,i){return i%2==0;},odd:function(a,i){return i%2;},"first-child":function(a){return a.parentNode.getElementsByTagName("*")[0]==a;},"last-child":function(a){return jQuery.nth(a.parentNode.lastChild,1,"previousSibling")==a;},"only-child":function(a){return!jQuery.nth(a.parentNode.lastChild,2,"previousSibling");},parent:function(a){return a.firstChild;},empty:function(a){return!a.firstChild;},contains:function(a,i,m){return(a.textContent||a.innerText||jQuery(a).text()||"").indexOf(m[3])>=0;},visible:function(a){return"hidden"!=a.type&&jQuery.css(a,"display")!="none"&&jQuery.css(a,"visibility")!="hidden";},hidden:function(a){return"hidden"==a.type||jQuery.css(a,"display")=="none"||jQuery.css(a,"visibility")=="hidden";},enabled:function(a){return!a.disabled;},disabled:function(a){return a.disabled;},checked:function(a){return a.checked;},selected:function(a){return a.selected||jQuery.attr(a,"selected");},text:function(a){return"text"==a.type;},radio:function(a){return"radio"==a.type;},checkbox:function(a){return"checkbox"==a.type;},file:function(a){return"file"==a.type;},password:function(a){return"password"==a.type;},submit:function(a){return"submit"==a.type;},image:function(a){return"image"==a.type;},reset:function(a){return"reset"==a.type;},button:function(a){return"button"==a.type||jQuery.nodeName(a,"button");},input:function(a){return\/input|select|textarea|button\/i.test(a.nodeName);},has:function(a,i,m){return jQuery.find(m[3],a).length;},header:function(a){return\/h\\d\/i.test(a.nodeName);},animated:function(a){return jQuery.grep(jQuery.timers,function(fn){return a==fn.elem;}).length;}}},parse:[\/^(\\[) *@?([\\w-]+) *([!*$^~=]*) *('?"?)(.*?)\\4 *\\]\/,\/^(:)([\\w-]+)\\("?'?(.*?(\\(.*?\\))?[^(]*?)"?'?\\)\/,new RegExp("^([:.#]*)("+chars+"+)")],multiFilter:function(expr,elems,not){var old,cur=[];while(expr&&expr!=old){old=expr;var f=jQuery.filter(expr,elems,not);expr=f.t.replace(\/^\\s*,\\s*\/,"");cur=not?elems=f.r:jQuery.merge(cur,f.r);}return cur;},find:function(t,context){if(typeof t!="string")return[t];if(context&&context.nodeType!=1&&context.nodeType!=9)return[];context=context||document;var ret=[context],done=[],last,nodeName;while(t&&last!=t){var r=[];last=t;t=jQuery.trim(t);var foundToken=false,re=quickChild,m=re.exec(t);if(m){nodeName=m[1].toUpperCase();for(var i=0;ret[i];i++)for(var c=ret[i].firstChild;c;c=c.nextSibling)if(c.nodeType==1&&(nodeName=="*"||c.nodeName.toUpperCase()==nodeName))r.push(c);ret=r;t=t.replace(re,"");if(t.indexOf(" ")==0)continue;foundToken=true;}else{re=\/^([>+~])\\s*(\\w*)\/i;if((m=re.exec(t))!=null){r=[];var merge={};nodeName=m[2].toUpperCase();m=m[1];for(var j=0,rl=ret.length;j<rl;j++){var n=m=="~"||m=="+"?ret[j].nextSibling:ret[j].firstChild;for(;n;n=n.nextSibling)if(n.nodeType==1){var id=jQuery.data(n);if(m=="~"&&merge[id])break;if(!nodeName||n.nodeName.toUpperCase()==nodeName){if(m=="~")merge[id]=true;r.push(n);}if(m=="+")break;}}ret=r;t=jQuery.trim(t.replace(re,""));foundToken=true;}}if(t&&!foundToken){if(!t.indexOf(",")){if(context==ret[0])ret.shift();done=jQuery.merge(done,ret);r=ret=[context];t=" "+t.substr(1,t.length);}else{var re2=quickID;var m=re2.exec(t);if(m){m=[0,m[2],m[3],m[1]];}else{re2=quickClass;m=re2.exec(t);}m[2]=m[2].replace(\/\\\\\/g,"");var elem=ret[ret.length-1];if(m[1]=="#"&&elem&&elem.getElementById&&!jQuery.isXMLDoc(elem)){var oid=elem.getElementById(m[2]);if((jQuery.browser.msie||jQuery.browser.opera)&&oid&&typeof oid.id=="string"&&oid.id!=m[2])oid=jQuery('[@id="'+m[2]+'"]',elem)[0];ret=r=oid&&(!m[3]||jQuery.nodeName(oid,m[3]))?[oid]:[];}else{for(var i=0;ret[i];i++){var tag=m[1]=="#"&&m[3]?m[3]:m[1]!=""||m[0]==""?"*":m[2];if(tag=="*"&&ret[i].nodeName.toLowerCase()=="object")tag="param";r=jQuery.merge(r,ret[i].getElementsByTagName(tag));}if(m[1]==".")r=jQuery.classFilter(r,m[2]);if(m[1]=="#"){var tmp=[];for(var i=0;r[i];i++)if(r[i].getAttribute("id")==m[2]){tmp=[r[i]];break;}r=tmp;}ret=r;}t=t.replace(re2,"");}}if(t){var val=jQuery.filter(t,r);ret=r=val.r;t=jQuery.trim(val.t);}}if(t)ret=[];if(ret&&context==ret[0])ret.shift();done=jQuery.merge(done,ret);return done;},classFilter:function(r,m,not){m=" "+m+" ";var tmp=[];for(var i=0;r[i];i++){var pass=(" "+r[i].className+" ").indexOf(m)>=0;if(!not&&pass||not&&!pass)tmp.push(r[i]);}return tmp;},filter:function(t,r,not){var last;while(t&&t!=last){last=t;var p=jQuery.parse,m;for(var i=0;p[i];i++){m=p[i].exec(t);if(m){t=t.substring(m[0].length);m[2]=m[2].replace(\/\\\\\/g,"");break;}}if(!m)break;if(m[1]==":"&&m[2]=="not")r=isSimple.test(m[3])?jQuery.filter(m[3],r,true).r:jQuery(r).not(m[3]);else if(m[1]==".")r=jQuery.classFilter(r,m[2],not);else if(m[1]=="["){var tmp=[],type=m[3];for(var i=0,rl=r.length;i<rl;i++){var a=r[i],z=a[jQuery.props[m[2]]||m[2]];if(z==null||\/href|src|selected\/.test(m[2]))z=jQuery.attr(a,m[2])||'';if((type==""&&!!z||type=="="&&z==m[5]||type=="!="&&z!=m[5]||type=="^="&&z&&!z.indexOf(m[5])||type=="$="&&z.substr(z.length-m[5].length)==m[5]||(type=="*="||type=="~=")&&z.indexOf(m[5])>=0)^not)tmp.push(a);}r=tmp;}else if(m[1]==":"&&m[2]=="nth-child"){var merge={},tmp=[],test=\/(-?)(\\d*)n((?:\\+|-)?\\d*)\/.exec(m[3]=="even"&&"2n"||m[3]=="odd"&&"2n+1"||!\/\\D\/.test(m[3])&&"0n+"+m[3]||m[3]),first=(test[1]+(test[2]||1))-0,last=test[3]-0;for(var i=0,rl=r.length;i<rl;i++){var node=r[i],parentNode=node.parentNode,id=jQuery.data(parentNode);if(!merge[id]){var c=1;for(var n=parentNode.firstChild;n;n=n.nextSibling)if(n.nodeType==1)n.nodeIndex=c++;merge[id]=true;}var add=false;if(first==0){if(node.nodeIndex==last)add=true;}else if((node.nodeIndex-last)%first==0&&(node.nodeIndex-last)\/first>=0)add=true;if(add^not)tmp.push(node);}r=tmp;}else{var fn=jQuery.expr[m[1]];if(typeof fn=="object")fn=fn[m[2]];if(typeof fn=="string")fn=eval("false||function(a,i){return "+fn+";}");r=jQuery.grep(r,function(elem,i){return fn(elem,i,m,r);},not);}}return{r:r,t:t};},dir:function(elem,dir){var matched=[],cur=elem[dir];while(cur&&cur!=document){if(cur.nodeType==1)matched.push(cur);cur=cur[dir];}return matched;},nth:function(cur,result,dir,elem){result=result||1;var num=0;for(;cur;cur=cur[dir])if(cur.nodeType==1&&++num==result)break;return cur;},sibling:function(n,elem){var r=[];for(;n;n=n.nextSibling){if(n.nodeType==1&&n!=elem)r.push(n);}return r;}});jQuery.event={add:function(elem,types,handler,data){if(elem.nodeType==3||elem.nodeType==8)return;if(jQuery.browser.msie&&elem.setInterval)elem=window;if(!handler.guid)handler.guid=this.guid++;if(data!=undefined){var fn=handler;handler=this.proxy(fn,function(){return fn.apply(this,arguments);});handler.data=data;}var events=jQuery.data(elem,"events")||jQuery.data(elem,"events",{}),handle=jQuery.data(elem,"handle")||jQuery.data(elem,"handle",function(){if(typeof jQuery!="undefined"&&!jQuery.event.triggered)return jQuery.event.handle.apply(arguments.callee.elem,arguments);});handle.elem=elem;jQuery.each(types.split(\/\\s+\/),function(index,type){var parts=type.split(".");type=parts[0];handler.type=parts[1];var handlers=events[type];if(!handlers){handlers=events[type]={};if(!jQuery.event.special[type]||jQuery.event.special[type].setup.call(elem)===false){if(elem.addEventListener)elem.addEventListener(type,handle,false);else if(elem.attachEvent)elem.attachEvent("on"+type,handle);}}handlers[handler.guid]=handler;jQuery.event.global[type]=true;});elem=null;},guid:1,global:{},remove:function(elem,types,handler){if(elem.nodeType==3||elem.nodeType==8)return;var events=jQuery.data(elem,"events"),ret,index;if(events){if(types==undefined||(typeof types=="string"&&types.charAt(0)=="."))for(var type in events)this.remove(elem,type+(types||""));else{if(types.type){handler=types.handler;types=types.type;}jQuery.each(types.split(\/\\s+\/),function(index,type){var parts=type.split(".");type=parts[0];if(events[type]){if(handler)delete events[type][handler.guid];else$/;"	v
classificationPerformance	pybrain/tools/validation.py	/^    def classificationPerformance(cls, module, dataset):$/;"	m	class:ModuleValidator
classificationPerformance	pybrain/tools/validation.py	/^    def classificationPerformance(cls, output, target):$/;"	m	class:Validator
classificationPerformance	tools/pybrain/pybrain/tools/validation.py	/^    def classificationPerformance(cls, module, dataset):$/;"	m	class:ModuleValidator
classificationPerformance	tools/pybrain/pybrain/tools/validation.py	/^    def classificationPerformance(cls, output, target):$/;"	m	class:Validator
clear	pybrain/datasets/dataset.py	/^    def clear(self, unlinked=False):$/;"	m	class:DataSet
clear	pybrain/datasets/sequential.py	/^    def clear(self):$/;"	m	class:SequentialDataSet
clear	tools/pybrain/pybrain/datasets/dataset.py	/^    def clear(self, unlinked=False):$/;"	m	class:DataSet
clear	tools/pybrain/pybrain/datasets/sequential.py	/^    def clear(self):$/;"	m	class:SequentialDataSet
clearFitness	pybrain/supervised/evolino/gpopulation.py	/^    def clearFitness(self):$/;"	m	class:SimplePopulation
clearFitness	pybrain/supervised/evolino/population.py	/^    def clearFitness(self):$/;"	m	class:EvolinoPopulation
clearFitness	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^    def clearFitness(self):$/;"	m	class:SimplePopulation
clearFitness	tools/pybrain/pybrain/supervised/evolino/population.py	/^    def clearFitness(self):$/;"	m	class:EvolinoPopulation
clearStorage	pybrain/optimization/distributionbased/snes.py	/^    clearStorage = False    $/;"	v	class:SNES
clearStorage	tools/pybrain/pybrain/optimization/distributionbased/snes.py	/^    clearStorage = False    $/;"	v	class:SNES
clone	tools/pybrain/docs/html/_static/jquery.js	/^return this.cloneNode(true);});var clone=ret.find("*").andSelf().each(function(){if(this[expando]!=undefined)this[expando]=null;});if(events===true)this.find("*").andSelf().each(function(i){if(this.nodeType==3)return;var events=jQuery.data(this,"events");for(var type in events)for(var handler in events[type])jQuery.event.add(clone[i],type,events[type][handler],events[type][handler].data);});return ret;},filter:function(selector){return this.pushStack(jQuery.isFunction(selector)&&jQuery.grep(this,function(elem,i){return selector.call(elem,i);})||jQuery.multiFilter(selector,this));},not:function(selector){if(selector.constructor==String)if(isSimple.test(selector))return this.pushStack(jQuery.multiFilter(selector,this,true));else$/;"	v
closeSocket	pybrain/rl/environments/flexcube/environment.py	/^    def closeSocket(self):$/;"	m	class:FlexCubeEnvironment
closeSocket	pybrain/rl/environments/ode/environment.py	/^    def closeSocket(self):$/;"	m	class:ODEEnvironment
closeSocket	pybrain/rl/environments/shipsteer/shipsteer.py	/^    def closeSocket(self):$/;"	m	class:ShipSteeringEnvironment
closeSocket	tools/pybrain/pybrain/rl/environments/flexcube/environment.py	/^    def closeSocket(self):$/;"	m	class:FlexCubeEnvironment
closeSocket	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def closeSocket(self):$/;"	m	class:ODEEnvironment
closeSocket	tools/pybrain/pybrain/rl/environments/shipsteer/shipsteer.py	/^    def closeSocket(self):$/;"	m	class:ShipSteeringEnvironment
cmdclass	pybrain/rl/environments/cartpole/fast_version/cartpolecompile.py	/^      cmdclass={'build_ext': build_ext})$/;"	v
cmdclass	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpolecompile.py	/^      cmdclass={'build_ext': build_ext})$/;"	v
cmp	pybrain/supervised/trainers/svmtrainer.py	/^        def cmp (x, y):$/;"	f	function:GridSearch._redraw
cmp	tools/pybrain/pybrain/supervised/trainers/svmtrainer.py	/^        def cmp (x, y):$/;"	f	function:GridSearch._redraw
combinputs	pybrain/structure/networks/custom/capturegame.py	/^    combinputs = 0$/;"	v	class:CaptureGameNetwork
combinputs	tools/pybrain/pybrain/structure/networks/custom/capturegame.py	/^    combinputs = 0$/;"	v	class:CaptureGameNetwork
comboutputs	pybrain/structure/networks/custom/capturegame.py	/^    comboutputs = 0$/;"	v	class:CaptureGameNetwork
comboutputs	tools/pybrain/pybrain/structure/networks/custom/capturegame.py	/^    comboutputs = 0$/;"	v	class:CaptureGameNetwork
comment	tools/pybrain/docs/code2tut.py	/^            comment = 1 - comment$/;"	v
comment	tools/pybrain/docs/code2tut.py	/^comment = 0$/;"	v
completeMouse	pybrain/rl/environments/flexcube/viewer.py	/^    def completeMouse(self, button, state, x, y):$/;"	m	class:FlexCubeRenderer
completeMouse	pybrain/rl/environments/shipsteer/viewer.py	/^    def completeMouse(self, button, state, x, y):$/;"	m	class:FlexCubeRenderer
completeMouse	tools/pybrain/pybrain/rl/environments/flexcube/viewer.py	/^    def completeMouse(self, button, state, x, y):$/;"	m	class:FlexCubeRenderer
completeMouse	tools/pybrain/pybrain/rl/environments/shipsteer/viewer.py	/^    def completeMouse(self, button, state, x, y):$/;"	m	class:FlexCubeRenderer
componentclass	pybrain/structure/networks/bidirectional.py	/^    componentclass = TanhLayer$/;"	v	class:BidirectionalNetwork
componentclass	pybrain/structure/networks/custom/capturegame.py	/^    componentclass = TanhLayer$/;"	v	class:CaptureGameNetwork
componentclass	pybrain/structure/networks/multidimensional.py	/^    componentclass = MDLSTMLayer$/;"	v	class:MultiDimensionalLSTM
componentclass	pybrain/structure/networks/multidimensional.py	/^    componentclass = TanhLayer$/;"	v	class:MultiDimensionalRNN
componentclass	tools/pybrain/pybrain/structure/networks/bidirectional.py	/^    componentclass = TanhLayer$/;"	v	class:BidirectionalNetwork
componentclass	tools/pybrain/pybrain/structure/networks/custom/capturegame.py	/^    componentclass = TanhLayer$/;"	v	class:CaptureGameNetwork
componentclass	tools/pybrain/pybrain/structure/networks/multidimensional.py	/^    componentclass = MDLSTMLayer$/;"	v	class:MultiDimensionalLSTM
componentclass	tools/pybrain/pybrain/structure/networks/multidimensional.py	/^    componentclass = TanhLayer$/;"	v	class:MultiDimensionalRNN
confidenceIntervalSize	pybrain/utilities.py	/^def confidenceIntervalSize(stdev, nbsamples):$/;"	f
confidenceIntervalSize	tools/pybrain/pybrain/utilities.py	/^def confidenceIntervalSize(stdev, nbsamples):$/;"	f
constructWithLayers	pybrain/structure/modulemesh.py	/^    def constructWithLayers(layerclass, layersize, dimensions, name = None):$/;"	m	class:ModuleMesh
constructWithLayers	tools/pybrain/pybrain/structure/modulemesh.py	/^    def constructWithLayers(layerclass, layersize, dimensions, name = None):$/;"	m	class:ModuleMesh
consume	pybrain/tools/rlgluebridge.py	/^        def consume(flo):$/;"	f	function:RLCExperiment.start
consume	tools/pybrain/pybrain/tools/rlgluebridge.py	/^        def consume(flo):$/;"	f	function:RLCExperiment.start
continueEpochs	pybrain/rl/learners/directsearch/rwr.py	/^    continueEpochs = 2$/;"	v	class:RWR
continueEpochs	tools/pybrain/pybrain/rl/learners/directsearch/rwr.py	/^    continueEpochs = 2$/;"	v	class:RWR
controller	tools/pybrain/docs/tutorials/rl.py	/^controller = ActionValueTable(81, 4)$/;"	v
convertField	pybrain/datasets/dataset.py	/^    def convertField(self, label, newtype):$/;"	m	class:DataSet
convertField	tools/pybrain/pybrain/datasets/dataset.py	/^    def convertField(self, label, newtype):$/;"	m	class:DataSet
convertNormalNetwork	pybrain/structure/networks/neurondecomposable.py	/^    def convertNormalNetwork(n):$/;"	m	class:NeuronDecomposableNetwork
convertNormalNetwork	tools/pybrain/pybrain/structure/networks/neurondecomposable.py	/^    def convertNormalNetwork(n):$/;"	m	class:NeuronDecomposableNetwork
convertSequenceToTimeWindows	pybrain/tools/datasettools.py	/^def convertSequenceToTimeWindows(DSseq, NewClass, winsize):$/;"	f
convertSequenceToTimeWindows	tools/pybrain/pybrain/tools/datasettools.py	/^def convertSequenceToTimeWindows(DSseq, NewClass, winsize):$/;"	f
convertToFastNetwork	pybrain/structure/evolvables/cheaplycopiable.py	/^    def convertToFastNetwork(self):$/;"	m	class:CheaplyCopiable
convertToFastNetwork	pybrain/structure/networks/network.py	/^    def convertToFastNetwork(self):$/;"	m	class:Network
convertToFastNetwork	tools/pybrain/pybrain/structure/evolvables/cheaplycopiable.py	/^    def convertToFastNetwork(self):$/;"	m	class:CheaplyCopiable
convertToFastNetwork	tools/pybrain/pybrain/structure/networks/network.py	/^    def convertToFastNetwork(self):$/;"	m	class:Network
copy	pybrain/datasets/dataset.py	/^    def copy(self):$/;"	m	class:DataSet
copy	pybrain/structure/evolvables/cheaplycopiable.py	/^    def copy(self):$/;"	m	class:CheaplyCopiable
copy	pybrain/structure/evolvables/evolvable.py	/^    def copy(self):$/;"	m	class:Evolvable
copy	pybrain/structure/evolvables/topology.py	/^    def copy(self):$/;"	m	class:TopologyEvolvable
copy	pybrain/structure/networks/network.py	/^    def copy(self, keepBuffers=False):$/;"	m	class:Network
copy	pybrain/supervised/evolino/gindividual.py	/^    def copy(self):$/;"	m	class:Individual
copy	pybrain/supervised/evolino/individual.py	/^    def copy(self):$/;"	m	class:EvolinoSubIndividual
copy	pybrain/tests/optimizationtest.py	/^    def copy(self):        return SimpleEvo(self.x)$/;"	m	class:SimpleEvo
copy	tools/pybrain/pybrain/datasets/dataset.py	/^    def copy(self):$/;"	m	class:DataSet
copy	tools/pybrain/pybrain/structure/evolvables/cheaplycopiable.py	/^    def copy(self):$/;"	m	class:CheaplyCopiable
copy	tools/pybrain/pybrain/structure/evolvables/evolvable.py	/^    def copy(self):$/;"	m	class:Evolvable
copy	tools/pybrain/pybrain/structure/evolvables/topology.py	/^    def copy(self):$/;"	m	class:TopologyEvolvable
copy	tools/pybrain/pybrain/structure/networks/network.py	/^    def copy(self, keepBuffers=False):$/;"	m	class:Network
copy	tools/pybrain/pybrain/supervised/evolino/gindividual.py	/^    def copy(self):$/;"	m	class:Individual
copy	tools/pybrain/pybrain/supervised/evolino/individual.py	/^    def copy(self):$/;"	m	class:EvolinoSubIndividual
copy	tools/pybrain/pybrain/tests/optimizationtest.py	/^    def copy(self):        return SimpleEvo(self.x)$/;"	m	class:SimpleEvo
copyright	tools/pybrain/docs/sphinx/conf.py	/^copyright = '2009, CogBotLab & Idsia'$/;"	v
cov	tools/pybrain/docs/tutorials/fnn.py	/^cov = [diag([1, 1]), diag([0.5, 1.2]), diag([1.5, 0.7])]$/;"	v
covLearningRate	pybrain/optimization/distributionbased/rank1.py	/^    covLearningRate = None $/;"	v	class:Rank1NES
covLearningRate	pybrain/optimization/distributionbased/snes.py	/^    covLearningRate = None     $/;"	v	class:SNES
covLearningRate	pybrain/optimization/distributionbased/xnes.py	/^    covLearningRate = None$/;"	v	class:XNES
covLearningRate	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^    covLearningRate = None $/;"	v	class:Rank1NES
covLearningRate	tools/pybrain/pybrain/optimization/distributionbased/snes.py	/^    covLearningRate = None     $/;"	v	class:SNES
covLearningRate	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    covLearningRate = None$/;"	v	class:XNES
createSockets	pybrain/tools/networking/udpconnection.py	/^    def createSockets(self):$/;"	m	class:UDPClient
createSockets	tools/pybrain/pybrain/tools/networking/udpconnection.py	/^    def createSockets(self):$/;"	m	class:UDPClient
creator	pybrain/datasets/dataset.py	/^        def creator():$/;"	f	function:DataSet.__reduce__
creator	tools/pybrain/pybrain/datasets/dataset.py	/^        def creator():$/;"	f	function:DataSet.__reduce__
crossOver	pybrain/optimization/populationbased/ga.py	/^    def crossOver(self, parents, nbChildren):$/;"	m	class:GA
crossOver	tools/pybrain/pybrain/optimization/populationbased/ga.py	/^    def crossOver(self, parents, nbChildren):$/;"	m	class:GA
crossproduct	pybrain/rl/environments/ode/tools/mathhelpers.py	/^def crossproduct(p, q):$/;"	f
crossproduct	pybrain/utilities.py	/^def crossproduct(ss, row=None, level=0):$/;"	f
crossproduct	tools/pybrain/pybrain/rl/environments/ode/tools/mathhelpers.py	/^def crossproduct(p, q):$/;"	f
crossproduct	tools/pybrain/pybrain/utilities.py	/^def crossproduct(ss, row=None, level=0):$/;"	f
crowding_distance	pybrain/tools/nondominated.py	/^def crowding_distance(individuals, fitnesses):$/;"	f
crowding_distance	tools/pybrain/pybrain/tools/nondominated.py	/^def crowding_distance(individuals, fitnesses):$/;"	f
cuboid	pybrain/rl/environments/shipsteer/viewer.py	/^    def cuboid(self, x0, y0, z0, x1, y1, z1):$/;"	m	class:FlexCubeRenderer
cuboid	tools/pybrain/pybrain/rl/environments/shipsteer/viewer.py	/^    def cuboid(self, x0, y0, z0, x1, y1, z1):$/;"	m	class:FlexCubeRenderer
cumreward	pybrain/rl/environments/episodic.py	/^    cumreward = 0$/;"	v	class:EpisodicTask
cumreward	tools/pybrain/pybrain/rl/environments/episodic.py	/^    cumreward = 0$/;"	v	class:EpisodicTask
cur_pos	pybrain/rl/environments/classic/mountaincar.py	/^    cur_pos = -0.5$/;"	v	class:MountainCar
cur_pos	tools/pybrain/pybrain/rl/environments/classic/mountaincar.py	/^    cur_pos = -0.5$/;"	v	class:MountainCar
cur_state	pybrain/rl/environments/classic/mountaincar.py	/^    cur_state = [cur_pos, cur_vel]$/;"	v	class:MountainCar
cur_state	tools/pybrain/pybrain/rl/environments/classic/mountaincar.py	/^    cur_state = [cur_pos, cur_vel]$/;"	v	class:MountainCar
cur_vel	pybrain/rl/environments/classic/mountaincar.py	/^    cur_vel = 0.0$/;"	v	class:MountainCar
cur_vel	tools/pybrain/pybrain/rl/environments/classic/mountaincar.py	/^    cur_vel = 0.0$/;"	v	class:MountainCar
d	pybrain/tools/svmdata.py	/^    d = SVMData()$/;"	v
d	tools/pybrain/pybrain/tools/svmdata.py	/^    d = SVMData()$/;"	v
dataset	pybrain/datasets/classification.py	/^    dataset = ClassificationDataSet(2, 1, class_labels=['Urd', 'Verdandi', 'Skuld'])$/;"	v	class:SequenceClassificationDataSet
dataset	pybrain/rl/learners/learner.py	/^    dataset = None$/;"	v	class:DataSetLearner
dataset	tools/pybrain/docs/tutorials/fnn.py	/^           dataset=tstdata), tstdata['class'])$/;"	v
dataset	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^    dataset=trnData,$/;"	v
dataset	tools/pybrain/examples/supervised/neuralnets+svm/example_fnn.py	/^           dataset=tstdata ), tstdata['class'] )$/;"	v
dataset	tools/pybrain/pybrain/datasets/classification.py	/^    dataset = ClassificationDataSet(2, 1, class_labels=['Urd', 'Verdandi', 'Skuld'])$/;"	v	class:SequenceClassificationDataSet
dataset	tools/pybrain/pybrain/rl/learners/learner.py	/^    dataset = None$/;"	v	class:DataSetLearner
debug	util.py	/^def debug(fn):$/;"	f
decorator	pybrain/utilities.py	/^    def decorator(func):$/;"	f	function:multiEvaluate
decorator	tools/pybrain/pybrain/utilities.py	/^    def decorator(func):$/;"	f	function:multiEvaluate
decrementAny	pybrain/utilities.py	/^def decrementAny(tup):$/;"	f
decrementAny	tools/pybrain/pybrain/utilities.py	/^def decrementAny(tup):$/;"	f
defaultPenalty	pybrain/rl/environments/mazes/tasks/maze.py	/^    defaultPenalty = 0$/;"	v	class:MazeTask
defaultPenalty	pybrain/rl/environments/mazes/tasks/maze4x3.py	/^    defaultPenalty = -0.04$/;"	v	class:FourByThreeMaze
defaultPenalty	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze.py	/^    defaultPenalty = 0$/;"	v	class:MazeTask
defaultPenalty	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze4x3.py	/^    defaultPenalty = -0.04$/;"	v	class:FourByThreeMaze
defaultSensor	pybrain/rl/environments/flexcube/sensors.py	/^class defaultSensor:$/;"	c
defaultSensor	tools/pybrain/pybrain/rl/environments/flexcube/sensors.py	/^class defaultSensor:$/;"	c
degrees64	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	47;"	d	file:
degrees64	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	47;"	d	file:
delta_t	pybrain/rl/environments/classic/acrobot.py	/^    delta_t = 0.05$/;"	v	class:AcrobotTask
delta_t	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    delta_t = 0.05$/;"	v	class:AcrobotTask
denormalize	pybrain/rl/environments/task.py	/^    def denormalize(self, actors):$/;"	m	class:Task
denormalize	tools/pybrain/pybrain/rl/environments/task.py	/^    def denormalize(self, actors):$/;"	m	class:Task
dense_orth	pybrain/utilities.py	/^def dense_orth(dim):$/;"	f
dense_orth	tools/pybrain/pybrain/utilities.py	/^def dense_orth(dim):$/;"	f
depth	pybrain/supervised/trainers/svmtrainer.py	/^    depth = 0$/;"	v	class:GridSearchDOE
depth	tools/pybrain/pybrain/supervised/trainers/svmtrainer.py	/^    depth = 0$/;"	v	class:GridSearchDOE
derivs	pybrain/structure/connections/shared.py	/^    def derivs(self): return self.mother.derivs$/;"	m	class:SharedConnection
derivs	pybrain/structure/evolvables/cheaplycopiable.py	/^    def derivs(self):$/;"	m	class:CheaplyCopiable
derivs	pybrain/structure/parametercontainer.py	/^    def derivs(self):$/;"	m	class:ParameterContainer
derivs	tools/pybrain/pybrain/structure/connections/shared.py	/^    def derivs(self): return self.mother.derivs$/;"	m	class:SharedConnection
derivs	tools/pybrain/pybrain/structure/evolvables/cheaplycopiable.py	/^    def derivs(self):$/;"	m	class:CheaplyCopiable
derivs	tools/pybrain/pybrain/structure/parametercontainer.py	/^    def derivs(self):$/;"	m	class:ParameterContainer
descent	pybrain/auxiliary/gradientdescent.py	/^    descent = __call__$/;"	v	class:GradientDescent
descent	tools/pybrain/pybrain/auxiliary/gradientdescent.py	/^    descent = __call__$/;"	v	class:GradientDescent
description	tools/pybrain/setup.py	/^    description="PyBrain is the Swiss army knife for neural networking.",$/;"	v
desiredEvaluation	pybrain/optimization/optimizer.py	/^    desiredEvaluation = None    $/;"	v	class:BlackBoxOptimizer
desiredEvaluation	tools/pybrain/pybrain/optimization/optimizer.py	/^    desiredEvaluation = None    $/;"	v	class:BlackBoxOptimizer
desiredValue	pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^    desiredValue = 100000$/;"	v	class:FastCartPoleTask
desiredValue	pybrain/rl/environments/fitnessevaluator.py	/^    desiredValue = None$/;"	v	class:FitnessEvaluator
desiredValue	pybrain/rl/environments/functions/function.py	/^    desiredValue = 1e-10$/;"	v	class:FunctionEnvironment
desiredValue	pybrain/rl/environments/functions/lennardjones.py	/^    def desiredValue(self):$/;"	m	class:LennardJones
desiredValue	pybrain/rl/environments/functions/multimodal.py	/^    desiredValue = -1e-3$/;"	v	class:MultiModalFunction
desiredValue	pybrain/rl/environments/functions/unbounded.py	/^    desiredValue = -1e3$/;"	v	class:UnboundedFunctionEnvironment
desiredValue	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^    desiredValue = 100000$/;"	v	class:FastCartPoleTask
desiredValue	tools/pybrain/pybrain/rl/environments/fitnessevaluator.py	/^    desiredValue = None$/;"	v	class:FitnessEvaluator
desiredValue	tools/pybrain/pybrain/rl/environments/functions/function.py	/^    desiredValue = 1e-10$/;"	v	class:FunctionEnvironment
desiredValue	tools/pybrain/pybrain/rl/environments/functions/lennardjones.py	/^    def desiredValue(self):$/;"	m	class:LennardJones
desiredValue	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    desiredValue = -1e-3$/;"	v	class:MultiModalFunction
desiredValue	tools/pybrain/pybrain/rl/environments/functions/unbounded.py	/^    desiredValue = -1e3$/;"	v	class:UnboundedFunctionEnvironment
diagonalOnly	pybrain/optimization/distributionbased/fem.py	/^    diagonalOnly = False$/;"	v	class:FEM
diagonalOnly	pybrain/optimization/distributionbased/ves.py	/^    diagonalOnly = False$/;"	v	class:VanillaGradientEvolutionStrategies
diagonalOnly	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^    diagonalOnly = False$/;"	v	class:FEM
diagonalOnly	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    diagonalOnly = False$/;"	v	class:VanillaGradientEvolutionStrategies
dictCombinations	pybrain/utilities.py	/^def dictCombinations(listdict):$/;"	f
dictCombinations	tools/pybrain/pybrain/utilities.py	/^def dictCombinations(listdict):$/;"	f
difVect	pybrain/rl/environments/flexcube/objects3d.py	/^    def difVect(self, point1, point2):$/;"	m	class:Objects3D
difVect	tools/pybrain/pybrain/rl/environments/flexcube/objects3d.py	/^    def difVect(self, point1, point2):$/;"	m	class:Objects3D
dim	pybrain/optimization/distributionbased/xnes.py	/^    dim = 10$/;"	v	class:XNES
dim	pybrain/structure/modules/biasunit.py	/^    dim = 1$/;"	v	class:BiasUnit
dim	pybrain/structure/modules/neuronlayer.py	/^    dim = 0$/;"	v	class:NeuronLayer
dim	tools/pybrain/examples/rl/environments/capturegame/pente.py	/^dim = 7$/;"	v
dim	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    dim = 10$/;"	v	class:XNES
dim	tools/pybrain/pybrain/structure/modules/biasunit.py	/^    dim = 1$/;"	v	class:BiasUnit
dim	tools/pybrain/pybrain/structure/modules/neuronlayer.py	/^    dim = 0$/;"	v	class:NeuronLayer
dimensions	pybrain/structure/modules/mdlstm.py	/^    dimensions = 1$/;"	v	class:MDLSTMLayer
dimensions	tools/pybrain/pybrain/structure/modules/mdlstm.py	/^    dimensions = 1$/;"	v	class:MDLSTMLayer
dims	pybrain/structure/networks/swiping.py	/^    dims = None$/;"	v	class:SwipingNetwork
dims	tools/pybrain/pybrain/structure/networks/swiping.py	/^    dims = None$/;"	v	class:SwipingNetwork
directlink	pybrain/structure/networks/custom/capturegame.py	/^    directlink = False$/;"	v	class:CaptureGameNetwork
directlink	tools/pybrain/pybrain/structure/networks/custom/capturegame.py	/^    directlink = False$/;"	v	class:CaptureGameNetwork
discount	pybrain/rl/environments/episodic.py	/^    discount = None$/;"	v	class:EpisodicTask
discount	pybrain/rl/environments/mazes/tasks/cheesemaze.py	/^    discount = 0.95$/;"	v	class:CheeseMaze
discount	pybrain/rl/environments/mazes/tasks/maze.py	/^    discount = 0.8$/;"	v	class:TrivialMaze
discount	pybrain/rl/environments/mazes/tasks/maze4x3.py	/^    discount = 0.95$/;"	v	class:FourByThreeMaze
discount	pybrain/rl/environments/mazes/tasks/shuttle.py	/^    discount = 0.95$/;"	v	class:ShuttleDocking
discount	pybrain/rl/environments/mazes/tasks/tiger.py	/^    discount = 0.75$/;"	v	class:TigerTask
discount	pybrain/rl/environments/mazes/tasks/tmaze.py	/^    discount = 0.98$/;"	v	class:TMaze
discount	tools/pybrain/pybrain/rl/environments/episodic.py	/^    discount = None$/;"	v	class:EpisodicTask
discount	tools/pybrain/pybrain/rl/environments/mazes/tasks/cheesemaze.py	/^    discount = 0.95$/;"	v	class:CheeseMaze
discount	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze.py	/^    discount = 0.8$/;"	v	class:TrivialMaze
discount	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze4x3.py	/^    discount = 0.95$/;"	v	class:FourByThreeMaze
discount	tools/pybrain/pybrain/rl/environments/mazes/tasks/shuttle.py	/^    discount = 0.95$/;"	v	class:ShuttleDocking
discount	tools/pybrain/pybrain/rl/environments/mazes/tasks/tiger.py	/^    discount = 0.75$/;"	v	class:TigerTask
discount	tools/pybrain/pybrain/rl/environments/mazes/tasks/tmaze.py	/^    discount = 0.98$/;"	v	class:TMaze
discreteActions	pybrain/rl/environments/environment.py	/^    discreteActions = False$/;"	v	class:Environment
discreteActions	tools/pybrain/pybrain/rl/environments/environment.py	/^    discreteActions = False$/;"	v	class:Environment
discreteStates	pybrain/rl/environments/environment.py	/^    discreteStates = False$/;"	v	class:Environment
discreteStates	tools/pybrain/pybrain/rl/environments/environment.py	/^    discreteStates = False$/;"	v	class:Environment
displayNextItem	tools/pybrain/docs/html/_static/searchtools.js	/^    function displayNextItem() {$/;"	f
distributionType	pybrain/optimization/distributionbased/distributionbased.py	/^    distributionType = GAUSSIAN$/;"	v	class:DistributionBasedOptimizer
distributionType	tools/pybrain/pybrain/optimization/distributionbased/distributionbased.py	/^    distributionType = GAUSSIAN$/;"	v	class:DistributionBasedOptimizer
disturb	pybrain/rl/environments/ode/tasks/johnnie.py	/^    def disturb(self):$/;"	m	class:RStandingTask
disturb	tools/pybrain/pybrain/rl/environments/ode/tasks/johnnie.py	/^    def disturb(self):$/;"	m	class:RStandingTask
doAction	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^extern void doAction(double * output)$/;"	f
doAction	pybrain/rl/environments/cartpole/fast_version/cartpolewrap.pyx	/^    cdef void doAction(double * output)$/;"	f
doAction	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^extern void doAction(double * output)$/;"	f
doAction	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpolewrap.pyx	/^    cdef void doAction(double * output)$/;"	f
doEpisodes	pybrain/rl/experiments/episodic.py	/^    def doEpisodes(self, number = 1):$/;"	m	class:EpisodicExperiment
doEpisodes	tools/pybrain/pybrain/rl/experiments/episodic.py	/^    def doEpisodes(self, number = 1):$/;"	m	class:EpisodicExperiment
doInteractions	pybrain/rl/experiments/experiment.py	/^    def doInteractions(self, number = 1):$/;"	m	class:Experiment
doInteractions	tools/pybrain/pybrain/rl/experiments/experiment.py	/^    def doInteractions(self, number = 1):$/;"	m	class:Experiment
doInteractionsAndLearn	pybrain/rl/experiments/continuous.py	/^    def doInteractionsAndLearn(self, number = 1):$/;"	m	class:ContinuousExperiment
doInteractionsAndLearn	tools/pybrain/pybrain/rl/experiments/continuous.py	/^    def doInteractionsAndLearn(self, number = 1):$/;"	m	class:ContinuousExperiment
doMadnessUpdate	pybrain/optimization/distributionbased/fem.py	/^    doMadnessUpdate = False$/;"	v	class:FEM
doMadnessUpdate	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^    doMadnessUpdate = False$/;"	v	class:FEM
doMove	pybrain/rl/environments/twoplayergames/capturegame.py	/^    def doMove(self, c, pos):$/;"	m	class:CaptureGame
doMove	pybrain/rl/environments/twoplayergames/gomoku.py	/^    def doMove(self, c, pos):$/;"	m	class:GomokuGame
doMove	pybrain/rl/environments/twoplayergames/pente.py	/^    def doMove(self, c, pos):$/;"	m	class:PenteGame
doMove	pybrain/rl/environments/twoplayergames/twoplayergame.py	/^    def doMove(self, player, action):$/;"	m	class:TwoPlayerGame
doMove	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    def doMove(self, c, pos):$/;"	m	class:CaptureGame
doMove	tools/pybrain/pybrain/rl/environments/twoplayergames/gomoku.py	/^    def doMove(self, c, pos):$/;"	m	class:GomokuGame
doMove	tools/pybrain/pybrain/rl/environments/twoplayergames/pente.py	/^    def doMove(self, c, pos):$/;"	m	class:PenteGame
doMove	tools/pybrain/pybrain/rl/environments/twoplayergames/twoplayergame.py	/^    def doMove(self, player, action):$/;"	m	class:TwoPlayerGame
doOptimization	pybrain/rl/experiments/episodic.py	/^    doOptimization = False$/;"	v	class:EpisodicExperiment
doOptimization	tools/pybrain/pybrain/rl/experiments/episodic.py	/^    doOptimization = False$/;"	v	class:EpisodicExperiment
doepat	pybrain/supervised/trainers/svmtrainer.py	/^              [0.25, 0.25], [0.75, 0.25], [0.5, 0], [0, 1], [1, 1], [0.5, 0.5], [0, 0], [1, 0]])$/;"	v	class:GridSearchDOE
doepat	tools/pybrain/pybrain/supervised/trainers/svmtrainer.py	/^              [0.25, 0.25], [0.75, 0.25], [0.5, 0], [0, 1], [1, 1], [0.5, 0.5], [0, 0], [1, 0]])$/;"	v	class:GridSearchDOE
dotproduct	pybrain/rl/environments/ode/tools/mathhelpers.py	/^def dotproduct(p, q):$/;"	f
dotproduct	tools/pybrain/pybrain/rl/environments/ode/tools/mathhelpers.py	/^def dotproduct(p, q):$/;"	f
downTo	pybrain/rl/environments/ode/tools/xmltools.py	/^    def downTo(self, name, stack=None, current=None):$/;"	m	class:XMLstruct
downTo	tools/pybrain/pybrain/rl/environments/ode/tools/xmltools.py	/^    def downTo(self, name, stack=None, current=None):$/;"	m	class:XMLstruct
draw	pybrain/auxiliary/gaussprocess.py	/^    def draw(self):$/;"	m	class:GaussianProcess
draw	tools/pybrain/pybrain/auxiliary/gaussprocess.py	/^    def draw(self):$/;"	m	class:GaussianProcess
drawCreature	pybrain/rl/environments/flexcube/objects3d.py	/^    def drawCreature(self, cPoints, centerOfGrav):$/;"	m	class:Objects3D
drawCreature	tools/pybrain/pybrain/rl/environments/flexcube/objects3d.py	/^    def drawCreature(self, cPoints, centerOfGrav):$/;"	m	class:Objects3D
drawGibbs	pybrain/utilities.py	/^def drawGibbs(vals, temperature=1.):$/;"	f
drawGibbs	tools/pybrain/pybrain/utilities.py	/^def drawGibbs(vals, temperature=1.):$/;"	f
drawIdleScene	pybrain/rl/environments/flexcube/viewer.py	/^    def drawIdleScene(self):$/;"	m	class:FlexCubeRenderer
drawIdleScene	pybrain/rl/environments/shipsteer/viewer.py	/^    def drawIdleScene(self):$/;"	m	class:FlexCubeRenderer
drawIdleScene	tools/pybrain/pybrain/rl/environments/flexcube/viewer.py	/^    def drawIdleScene(self):$/;"	m	class:FlexCubeRenderer
drawIdleScene	tools/pybrain/pybrain/rl/environments/shipsteer/viewer.py	/^    def drawIdleScene(self):$/;"	m	class:FlexCubeRenderer
drawIndex	pybrain/utilities.py	/^def drawIndex(probs, tolerant=False):$/;"	f
drawIndex	tools/pybrain/pybrain/utilities.py	/^def drawIndex(probs, tolerant=False):$/;"	f
drawMirCreat	pybrain/rl/environments/flexcube/objects3d.py	/^    def drawMirCreat(self, cPoints, centerOfGrav):$/;"	m	class:Objects3D
drawMirCreat	tools/pybrain/pybrain/rl/environments/flexcube/objects3d.py	/^    def drawMirCreat(self, cPoints, centerOfGrav):$/;"	m	class:Objects3D
drawPlot	pybrain/rl/environments/cartpole/renderer.py	/^    def drawPlot(self):$/;"	m	class:CartPoleRenderer
drawPlot	pybrain/rl/environments/simple/renderer.py	/^    def drawPlot(self):$/;"	m	class:SimpleRenderer
drawPlot	tools/pybrain/pybrain/rl/environments/cartpole/renderer.py	/^    def drawPlot(self):$/;"	m	class:CartPoleRenderer
drawPlot	tools/pybrain/pybrain/rl/environments/simple/renderer.py	/^    def drawPlot(self):$/;"	m	class:SimpleRenderer
drawRandomWeights	pybrain/structure/modules/statedependentlayer.py	/^    def drawRandomWeights(self):$/;"	m	class:StateDependentLayer
drawRandomWeights	tools/pybrain/pybrain/structure/modules/statedependentlayer.py	/^    def drawRandomWeights(self):$/;"	m	class:StateDependentLayer
drawSample	pybrain/tools/mixtures/mixtureofgaussian.py	/^    def drawSample(self, dm):$/;"	m	class:MixtureOfGaussians
drawSample	pybrain/tools/mixtures/mogpuremax.py	/^    def drawSample(self):$/;"	m	class:MixtureOfGaussians
drawSample	tools/pybrain/pybrain/tools/mixtures/mixtureofgaussian.py	/^    def drawSample(self, dm):$/;"	m	class:MixtureOfGaussians
drawSample	tools/pybrain/pybrain/tools/mixtures/mogpuremax.py	/^    def drawSample(self):$/;"	m	class:MixtureOfGaussians
drawScene	pybrain/rl/environments/flexcube/viewer.py	/^    def drawScene(self):$/;"	m	class:FlexCubeRenderer
drawScene	pybrain/rl/environments/shipsteer/viewer.py	/^    def drawScene(self):$/;"	m	class:FlexCubeRenderer
drawScene	tools/pybrain/pybrain/rl/environments/flexcube/viewer.py	/^    def drawScene(self):$/;"	m	class:FlexCubeRenderer
drawScene	tools/pybrain/pybrain/rl/environments/shipsteer/viewer.py	/^    def drawScene(self):$/;"	m	class:FlexCubeRenderer
drawShadow	pybrain/rl/environments/flexcube/objects3d.py	/^    def drawShadow(self, cPoints, centerOfGrav):$/;"	m	class:Objects3D
drawShadow	tools/pybrain/pybrain/rl/environments/flexcube/objects3d.py	/^    def drawShadow(self, cPoints, centerOfGrav):$/;"	m	class:Objects3D
draw_item	pybrain/rl/environments/ode/viewer.py	/^    def draw_item(self, item):$/;"	m	class:ODEViewer
draw_item	tools/pybrain/pybrain/rl/environments/ode/viewer.py	/^    def draw_item(self, item):$/;"	m	class:ODEViewer
drop_object	pybrain/rl/environments/ode/environment.py	/^    def drop_object(self):$/;"	m	class:ODEEnvironment
drop_object	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def drop_object(self):$/;"	m	class:ODEEnvironment
ds	pybrain/auxiliary/gaussprocess.py	/^    ds = SupervisedDataSet(1, 1)$/;"	v	class:GaussianProcess
ds	pybrain/auxiliary/gaussprocess.py	/^    ds = SupervisedDataSet(2, 1)$/;"	v	class:GaussianProcess
ds	pybrain/supervised/trainers/trainer.py	/^    ds = None$/;"	v	class:Trainer
ds	tools/pybrain/examples/unsupervised/gp.py	/^ds = SupervisedDataSet(1, 1)$/;"	v
ds	tools/pybrain/examples/unsupervised/gp.py	/^ds = SupervisedDataSet(2,1)$/;"	v
ds	tools/pybrain/examples/unsupervised/rbm.py	/^ds = UnsupervisedDataSet(6)$/;"	v
ds	tools/pybrain/pybrain/auxiliary/gaussprocess.py	/^    ds = SupervisedDataSet(1, 1)$/;"	v	class:GaussianProcess
ds	tools/pybrain/pybrain/auxiliary/gaussprocess.py	/^    ds = SupervisedDataSet(2, 1)$/;"	v	class:GaussianProcess
ds	tools/pybrain/pybrain/supervised/trainers/trainer.py	/^    ds = None$/;"	v	class:Trainer
dt	pybrain/rl/environments/cartpole/cartpole.py	/^    dt = 0.02$/;"	v	class:CartPoleEnvironment
dt	pybrain/rl/environments/shipsteer/shipsteer.py	/^    dt = 4.        # simulated time (in seconds) per step$/;"	v	class:ShipSteeringEnvironment
dt	tools/pybrain/pybrain/rl/environments/cartpole/cartpole.py	/^    dt = 0.02$/;"	v	class:CartPoleEnvironment
dt	tools/pybrain/pybrain/rl/environments/shipsteer/shipsteer.py	/^    dt = 4.        # simulated time (in seconds) per step$/;"	v	class:ShipSteeringEnvironment
dumpVect	pybrain/rl/environments/flexcube/objects3d.py	/^    def dumpVect(self, vect, fakt):$/;"	m	class:Objects3D
dumpVect	tools/pybrain/pybrain/rl/environments/flexcube/objects3d.py	/^    def dumpVect(self, vect, fakt):$/;"	m	class:Objects3D
dydx	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^double dydx[6];$/;"	v
dydx	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^double dydx[6];$/;"	v
easy_rewards	pybrain/rl/environments/classic/acrobot.py	/^    easy_rewards = False    $/;"	v	class:AcrobotTask
easy_rewards	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    easy_rewards = False    $/;"	v	class:AcrobotTask
eliteProportion	pybrain/optimization/populationbased/ga.py	/^    eliteProportion = 0.5$/;"	v	class:GA
eliteProportion	tools/pybrain/pybrain/optimization/populationbased/ga.py	/^    eliteProportion = 0.5$/;"	v	class:GA
eliteSize	pybrain/optimization/populationbased/ga.py	/^    def eliteSize(self):$/;"	m	class:GA
eliteSize	tools/pybrain/pybrain/optimization/populationbased/ga.py	/^    def eliteSize(self):$/;"	m	class:GA
elitism	pybrain/optimization/distributionbased/fem.py	/^    elitism = False$/;"	v	class:FEM
elitism	pybrain/optimization/distributionbased/ves.py	/^    elitism = False$/;"	v	class:VanillaGradientEvolutionStrategies
elitism	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    elitism = False$/;"	v	class:Coevolution
elitism	pybrain/optimization/populationbased/es.py	/^    elitism = False$/;"	v	class:ES
elitism	pybrain/optimization/populationbased/ga.py	/^    elitism = False$/;"	v	class:GA
elitism	pybrain/optimization/populationbased/multiobjective/nsga2.py	/^    elitism = True$/;"	v	class:MultiObjectiveGA
elitism	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^    elitism = False$/;"	v	class:FEM
elitism	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    elitism = False$/;"	v	class:VanillaGradientEvolutionStrategies
elitism	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    elitism = False$/;"	v	class:Coevolution
elitism	tools/pybrain/pybrain/optimization/populationbased/es.py	/^    elitism = False$/;"	v	class:ES
elitism	tools/pybrain/pybrain/optimization/populationbased/ga.py	/^    elitism = False$/;"	v	class:GA
elitism	tools/pybrain/pybrain/optimization/populationbased/multiobjective/nsga2.py	/^    elitism = True$/;"	v	class:MultiObjectiveGA
eloScore	pybrain/rl/experiments/tournament.py	/^    def eloScore(self, startingscore=1500, k=32):$/;"	m	class:Tournament
eloScore	tools/pybrain/pybrain/rl/experiments/tournament.py	/^    def eloScore(self, startingscore=1500, k=32):$/;"	m	class:Tournament
end	pybrain/rl/environments/ode/xode_changes/body.py	/^        def end(name):$/;"	f	function:Mass._parseMassShape
end	pybrain/rl/environments/ode/xode_changes/geom.py	/^        def end(name):$/;"	f	function:Geom._parseGeomBox
end	pybrain/rl/environments/ode/xode_changes/geom.py	/^        def end(name):$/;"	f	function:Geom._parseGeomCCylinder
end	pybrain/rl/environments/ode/xode_changes/geom.py	/^        def end(name):$/;"	f	function:Geom._parseGeomCylinder
end	pybrain/rl/environments/ode/xode_changes/geom.py	/^        def end(name):$/;"	f	function:Geom._parseGeomPlane
end	pybrain/rl/environments/ode/xode_changes/geom.py	/^        def end(name):$/;"	f	function:Geom._parseGeomRay
end	pybrain/rl/environments/ode/xode_changes/geom.py	/^        def end(name):$/;"	f	function:Geom._parseGeomSphere
end	pybrain/rl/environments/ode/xode_changes/geom.py	/^        def end(name):$/;"	f	function:Geom._parseTriMesh
end	tools/pybrain/pybrain/rl/environments/ode/xode_changes/body.py	/^        def end(name):$/;"	f	function:Mass._parseMassShape
end	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^        def end(name):$/;"	f	function:Geom._parseGeomBox
end	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^        def end(name):$/;"	f	function:Geom._parseGeomCCylinder
end	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^        def end(name):$/;"	f	function:Geom._parseGeomCylinder
end	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^        def end(name):$/;"	f	function:Geom._parseGeomPlane
end	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^        def end(name):$/;"	f	function:Geom._parseGeomRay
end	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^        def end(name):$/;"	f	function:Geom._parseGeomSphere
end	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^        def end(name):$/;"	f	function:Geom._parseTriMesh
endOfData	pybrain/datasets/dataset.py	/^    def endOfData(self):$/;"	m	class:DataSet
endOfData	tools/pybrain/pybrain/datasets/dataset.py	/^    def endOfData(self):$/;"	m	class:DataSet
endOfSequence	pybrain/datasets/sequential.py	/^    def endOfSequence(self, index):$/;"	m	class:SequentialDataSet
endOfSequence	tools/pybrain/pybrain/datasets/sequential.py	/^    def endOfSequence(self, index):$/;"	m	class:SequentialDataSet
env	enac.py	/^env = TrapMaze(envMatrix, iniState, goalStates, TP, DF)$/;"	v
env	examples/ENAC.py	/^env = TrapMaze(envMatrix, iniState, goalStates, TP, DF)$/;"	v
env	examples/ENAC_TL.py	/^env = TrapMaze(envMatrix, iniState, goalStates, TP, DF)$/;"	v
env	examples/LSTDAC.py	/^env = TrapMaze(envMatrix, iniState, goalStates, TP, DF)$/;"	v
env	examples/QLambda_LinFA.py	/^env = TrapMaze(envMatrix, iniState, goalStates, TP, DF)$/;"	v
env	examples/Q_LinFA.py	/^env = TrapMaze(envMatrix, iniState, goalStates, TP, DF)$/;"	v
env	examples/SARSA_TL.py	/^env = TrapMaze(envMatrix, iniState, goalStates, TP, DF)$/;"	v
env	main.py	/^env = TrapMaze(envMatrix, iniState, goalStates, TP, DF)$/;"	v
env	tools/pybrain/examples/rl/environments/cartpole/cart_all.py	/^        env = CartPoleEnvironment()    $/;"	v
env	tools/pybrain/examples/rl/environments/cartpole/cart_cma.py	/^    env = CartPoleEnvironment()    $/;"	v
env	tools/pybrain/examples/rl/environments/cartpole/cart_enac.py	/^    env = CartPoleEnvironment()    $/;"	v
env	tools/pybrain/examples/rl/environments/cartpole/cart_fem.py	/^    env = CartPoleEnvironment()    $/;"	v
env	tools/pybrain/examples/rl/environments/cartpole/cart_nes.py	/^    env = CartPoleEnvironment()    $/;"	v
env	tools/pybrain/examples/rl/environments/cartpole/cart_pgpe.py	/^    env = CartPoleEnvironment()    $/;"	v
env	tools/pybrain/examples/rl/environments/cartpole/cart_reinf.py	/^    env = CartPoleEnvironment()    $/;"	v
env	tools/pybrain/examples/rl/environments/cartpole/play_cartpole.py	/^env = CartPoleEnvironment()$/;"	v
env	tools/pybrain/examples/rl/environments/flexcube/flexcube_pgpe.py	/^    env = FlexCubeEnvironment()$/;"	v
env	tools/pybrain/examples/rl/environments/flexcube/flexcube_pgpe.py	/^env = None$/;"	v
env	tools/pybrain/examples/rl/environments/flexcube/flexcube_spsa.py	/^    env = FlexCubeEnvironment()$/;"	v
env	tools/pybrain/examples/rl/environments/maze/td.py	/^env = Maze(envmatrix, (7, 7))$/;"	v
env	tools/pybrain/examples/rl/environments/ode/acrobot_fd.py	/^    env = AcrobotEnvironment() $/;"	v
env	tools/pybrain/examples/rl/environments/ode/acrobot_pgpe.py	/^    env = AcrobotEnvironment()$/;"	v
env	tools/pybrain/examples/rl/environments/ode/acrobot_pgpe.py	/^env = None$/;"	v
env	tools/pybrain/examples/rl/environments/ode/ccrl_glass_pgpe.py	/^    env = CCRLEnvironment()$/;"	v
env	tools/pybrain/examples/rl/environments/ode/ccrl_glass_pgpe.py	/^env = None$/;"	v
env	tools/pybrain/examples/rl/environments/ode/ccrl_plate_pgpe.py	/^    env = CCRLEnvironment("ccrlPlate.xode")$/;"	v
env	tools/pybrain/examples/rl/environments/ode/ccrl_plate_pgpe.py	/^env = None$/;"	v
env	tools/pybrain/examples/rl/environments/ode/johnnie_pgpe.py	/^    env = JohnnieEnvironment() $/;"	v
env	tools/pybrain/examples/rl/environments/ode/johnnie_pgpe.py	/^env = None$/;"	v
env	tools/pybrain/examples/rl/environments/ode/johnnie_reinforce.py	/^    env = JohnnieEnvironment() $/;"	v
env	tools/pybrain/examples/rl/environments/shipsteer/shipbench_pgpe.py	/^    env = ShipSteeringEnvironment()$/;"	v
env	tools/pybrain/examples/rl/environments/shipsteer/shipbench_pgpe.py	/^env = None$/;"	v
env	tools/pybrain/examples/rl/environments/shipsteer/shipbench_sde.py	/^env=ShipSteeringEnvironment()$/;"	v
env	tools/pybrain/examples/rl/valuebased/nfq.py	/^env = CartPoleEnvironment()$/;"	v
env	tools/pybrain/examples/rl/valuebased/td.py	/^env = Maze(envmatrix, (7, 7))$/;"	v
envMatrix	compare.py	/^envMatrix = zeros(gridSize)$/;"	v
envMatrix	enac.py	/^envMatrix = zeros(gridSize)$/;"	v
envMatrix	examples/ENAC.py	/^envMatrix = zeros(gridSize)$/;"	v
envMatrix	examples/ENAC_TL.py	/^envMatrix = zeros(gridSize)$/;"	v
envMatrix	examples/LSTDAC.py	/^envMatrix = zeros(gridSize)$/;"	v
envMatrix	examples/QLambda_LinFA.py	/^envMatrix = zeros(gridSize)$/;"	v
envMatrix	examples/Q_LinFA.py	/^envMatrix = zeros(gridSize)$/;"	v
envMatrix	examples/SARSA_TL.py	/^envMatrix = zeros(gridSize)$/;"	v
envMatrix	main.py	/^envMatrix = zeros(gridSize)$/;"	v
environment	tools/pybrain/docs/tutorials/rl.py	/^environment = Maze(structure, (7, 7))$/;"	v
envmatrix	tools/pybrain/examples/rl/environments/maze/td.py	/^envmatrix = array([[1, 1, 1, 1, 1, 1, 1, 1, 1],$/;"	v
envmatrix	tools/pybrain/examples/rl/valuebased/td.py	/^envmatrix = array([[1, 1, 1, 1, 1, 1, 1, 1, 1],$/;"	v
epilen	tools/pybrain/examples/rl/environments/cartpole/play_cartpole.py	/^epilen = 200$/;"	v
epis	tools/pybrain/examples/rl/environments/cartpole/cart_all.py	/^epis=4000\/batch\/prnts #number of roleouts$/;"	v
epis	tools/pybrain/examples/rl/environments/cartpole/cart_cma.py	/^epis=4000\/batch\/prnts #number of roleouts$/;"	v
epis	tools/pybrain/examples/rl/environments/cartpole/cart_enac.py	/^epis=4000\/batch\/prnts #number of roleouts$/;"	v
epis	tools/pybrain/examples/rl/environments/cartpole/cart_fem.py	/^epis=4000\/batch\/prnts #number of roleouts$/;"	v
epis	tools/pybrain/examples/rl/environments/cartpole/cart_nes.py	/^epis=4000\/batch\/prnts #number of roleouts$/;"	v
epis	tools/pybrain/examples/rl/environments/cartpole/cart_pgpe.py	/^epis=4000\/batch\/prnts #number of roleouts$/;"	v
epis	tools/pybrain/examples/rl/environments/cartpole/cart_reinf.py	/^epis=4000\/batch\/prnts #number of roleouts$/;"	v
epis	tools/pybrain/examples/rl/environments/flexcube/flexcube_pgpe.py	/^epis=5000000\/batch\/prnts #number of roleouts$/;"	v
epis	tools/pybrain/examples/rl/environments/flexcube/flexcube_spsa.py	/^epis=5000000\/batch\/prnts #number of roleouts$/;"	v
epis	tools/pybrain/examples/rl/environments/ode/acrobot_fd.py	/^epis=4000\/batch\/prnts #number of roleouts$/;"	v
epis	tools/pybrain/examples/rl/environments/ode/acrobot_pgpe.py	/^epis=4000\/batch\/prnts #number of roleouts$/;"	v
epis	tools/pybrain/examples/rl/environments/ode/ccrl_glass_pgpe.py	/^epis=2000\/batch\/prnts #number of roleouts$/;"	v
epis	tools/pybrain/examples/rl/environments/ode/ccrl_plate_pgpe.py	/^epis=5000000\/batch\/prnts #number of roleouts$/;"	v
epis	tools/pybrain/examples/rl/environments/ode/johnnie_pgpe.py	/^epis=5000000\/batch\/prnts #number of roleouts$/;"	v
epis	tools/pybrain/examples/rl/environments/ode/johnnie_reinforce.py	/^epis=5000000\/batch\/prnts #number of roleouts$/;"	v
epis	tools/pybrain/examples/rl/environments/shipsteer/shipbench_pgpe.py	/^epis=2000\/batch\/prnts #number of roleouts$/;"	v
episode	pybrain/rl/environments/classic/acrobot.py	/^    episode = 0$/;"	v	class:AcrobotTask
episode	pybrain/rl/environments/classic/mountaincar.py	/^    episode = 0$/;"	v	class:MountainCar
episode	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    episode = 0$/;"	v	class:AcrobotTask
episode	tools/pybrain/pybrain/rl/environments/classic/mountaincar.py	/^    episode = 0$/;"	v	class:MountainCar
episodes	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^int episodes;$/;"	v
episodes	tools/pybrain/examples/rl/environments/cartpole/play_cartpole.py	/^episodes = 1$/;"	v
episodes	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^int episodes;$/;"	v
epsilon	pybrain/optimization/finitedifference/fd.py	/^    epsilon = 1.0$/;"	v	class:FiniteDifferences
epsilon	pybrain/optimization/finitedifference/pgpe.py	/^    epsilon = 2.0$/;"	v	class:PGPE
epsilon	pybrain/optimization/finitedifference/spsa.py	/^    epsilon = 2. #Initial value of exploration size$/;"	v	class:SimpleSPSA
epsilon	tools/pybrain/examples/rl/environments/linear_fa/xor.py	/^    epsilon = 0.1$/;"	v	class:LinFA_QAgent
epsilon	tools/pybrain/examples/rl/environments/ode/acrobot_pgpe.py	/^                                    epsilon = 6.0,$/;"	v
epsilon	tools/pybrain/examples/rl/environments/shipsteer/shipbench_pgpe.py	/^                                    epsilon = 2.0,$/;"	v
epsilon	tools/pybrain/pybrain/optimization/finitedifference/fd.py	/^    epsilon = 1.0$/;"	v	class:FiniteDifferences
epsilon	tools/pybrain/pybrain/optimization/finitedifference/pgpe.py	/^    epsilon = 2.0$/;"	v	class:PGPE
epsilon	tools/pybrain/pybrain/optimization/finitedifference/spsa.py	/^    epsilon = 2. #Initial value of exploration size$/;"	v	class:SimpleSPSA
epsilonCheck	pybrain/tests/helpers.py	/^def epsilonCheck(x, epsilon=1e-6):$/;"	f
epsilonCheck	tools/pybrain/pybrain/tests/helpers.py	/^def epsilonCheck(x, epsilon=1e-6):$/;"	f
epsilonGreedy	pybrain/rl/agents/linearfa.py	/^    epsilonGreedy = False$/;"	v	class:LinearFA_Agent
epsilonGreedy	tools/pybrain/pybrain/rl/agents/linearfa.py	/^    epsilonGreedy = False$/;"	v	class:LinearFA_Agent
epsiodNum	enac.py	/^    epsiodNum = 1000$/;"	v
espStyleDecomposition	pybrain/structure/networks/neurondecomposable.py	/^    espStyleDecomposition = True$/;"	v	class:NeuronDecomposableNetwork
espStyleDecomposition	tools/pybrain/pybrain/structure/networks/neurondecomposable.py	/^    espStyleDecomposition = True$/;"	v	class:NeuronDecomposableNetwork
et	tools/pybrain/examples/rl/environments/cartpole/cart_all.py	/^et = ExTools(batch, prnts) #tool for printing and plotting$/;"	v
et	tools/pybrain/examples/rl/environments/cartpole/cart_cma.py	/^et = ExTools(batch, prnts) #tool for printing and plotting$/;"	v
et	tools/pybrain/examples/rl/environments/cartpole/cart_enac.py	/^et = ExTools(batch, prnts, kind = "learner") #tool for printing and plotting$/;"	v
et	tools/pybrain/examples/rl/environments/cartpole/cart_fem.py	/^et = ExTools(batch, prnts) #tool for printing and plotting$/;"	v
et	tools/pybrain/examples/rl/environments/cartpole/cart_nes.py	/^et = ExTools(batch, prnts) #tool for printing and plotting$/;"	v
et	tools/pybrain/examples/rl/environments/cartpole/cart_pgpe.py	/^et = ExTools(batch, prnts) #tool for printing and plotting$/;"	v
et	tools/pybrain/examples/rl/environments/cartpole/cart_reinf.py	/^et = ExTools(batch, prnts, kind = "learner") #tool for printing and plotting$/;"	v
et	tools/pybrain/examples/rl/environments/flexcube/flexcube_pgpe.py	/^et = ExTools(batch, prnts) #tool for printing and plotting$/;"	v
et	tools/pybrain/examples/rl/environments/flexcube/flexcube_spsa.py	/^et = ExTools(batch, prnts) #tool for printing and plotting$/;"	v
et	tools/pybrain/examples/rl/environments/ode/acrobot_fd.py	/^et = ExTools(batch, prnts) #tool for printing and plotting$/;"	v
et	tools/pybrain/examples/rl/environments/ode/acrobot_pgpe.py	/^et = ExTools(batch, prnts) #tool for printing and plotting$/;"	v
et	tools/pybrain/examples/rl/environments/ode/ccrl_glass_pgpe.py	/^et = ExTools(batch, prnts) #tool for printing and plotting$/;"	v
et	tools/pybrain/examples/rl/environments/ode/ccrl_plate_pgpe.py	/^et = ExTools(batch, prnts) #tool for printing and plotting$/;"	v
et	tools/pybrain/examples/rl/environments/ode/johnnie_pgpe.py	/^et = ExTools(batch, prnts) #tool for printing and plotting$/;"	v
et	tools/pybrain/examples/rl/environments/ode/johnnie_reinforce.py	/^et = ExTools(batch, prnts, kind = "learner")#tool for printing and plotting$/;"	v
et	tools/pybrain/examples/rl/environments/shipsteer/shipbench_pgpe.py	/^et = ExTools(batch, prnts) #tool for printing and plotting$/;"	v
euclideanDistance	pybrain/rl/environments/simplerace/simpleracetcp.py	/^    def euclideanDistance(self, firstPoint, secondPoint):$/;"	m	class:SimpleraceEnvironment
euclideanDistance	tools/pybrain/pybrain/rl/environments/simplerace/simpleracetcp.py	/^    def euclideanDistance(self, firstPoint, secondPoint):$/;"	m	class:SimpleraceEnvironment
euler	pybrain/rl/environments/flexcube/environment.py	/^    def euler(self):$/;"	m	class:FlexCubeEnvironment
euler	tools/pybrain/pybrain/rl/environments/flexcube/environment.py	/^    def euler(self):$/;"	m	class:FlexCubeEnvironment
evalRnnOnSeqDataset	tools/pybrain/examples/supervised/backprop/parityrnn.py	/^def evalRnnOnSeqDataset(net, verbose = False, silent = False):$/;"	f
evalScript	tools/pybrain/docs/html/_static/jquery.js	/^return this.trigger("setData"+parts[1]+"!",[parts[0],value]).each(function(){jQuery.data(this,key,value);});},removeData:function(key){return this.each(function(){jQuery.removeData(this,key);});},domManip:function(args,table,reverse,callback){var clone=this.length>1,elems;return this.each(function(){if(!elems){elems=jQuery.clean(args,this.ownerDocument);if(reverse)elems.reverse();}var obj=this;if(table&&jQuery.nodeName(this,"table")&&jQuery.nodeName(elems[0],"tr"))obj=this.getElementsByTagName("tbody")[0]||this.appendChild(this.ownerDocument.createElement("tbody"));var scripts=jQuery([]);jQuery.each(elems,function(){var elem=clone?jQuery(this).clone(true)[0]:this;if(jQuery.nodeName(elem,"script"))scripts=scripts.add(elem);else{if(elem.nodeType==1)scripts=scripts.add(jQuery("script",elem).remove());callback.call(obj,elem);}});scripts.each(evalScript);});}};jQuery.fn.init.prototype=jQuery.fn;function evalScript(i,elem){if(elem.src)jQuery.ajax({url:elem.src,async:false,dataType:"script"});else$/;"	f
evaluateMSE	pybrain/datasets/supervised.py	/^    def evaluateMSE(self, f, **args):$/;"	m	class:SupervisedDataSet
evaluateMSE	tools/pybrain/pybrain/datasets/supervised.py	/^    def evaluateMSE(self, f, **args):$/;"	m	class:SupervisedDataSet
evaluateModuleMSE	pybrain/datasets/sequential.py	/^    def evaluateModuleMSE(self, module, averageOver=1, **args):$/;"	m	class:SequentialDataSet
evaluateModuleMSE	pybrain/datasets/supervised.py	/^    def evaluateModuleMSE(self, module, averageOver = 1, **args):$/;"	m	class:SupervisedDataSet
evaluateModuleMSE	tools/pybrain/pybrain/datasets/sequential.py	/^    def evaluateModuleMSE(self, module, averageOver=1, **args):$/;"	m	class:SequentialDataSet
evaluateModuleMSE	tools/pybrain/pybrain/datasets/supervised.py	/^    def evaluateModuleMSE(self, module, averageOver = 1, **args):$/;"	m	class:SupervisedDataSet
evaluatorIsNoisy	pybrain/optimization/hillclimber.py	/^    evaluatorIsNoisy = False$/;"	v	class:HillClimber
evaluatorIsNoisy	pybrain/optimization/populationbased/es.py	/^    evaluatorIsNoisy = False$/;"	v	class:ES
evaluatorIsNoisy	tools/pybrain/pybrain/optimization/hillclimber.py	/^    evaluatorIsNoisy = False$/;"	v	class:HillClimber
evaluatorIsNoisy	tools/pybrain/pybrain/optimization/populationbased/es.py	/^    evaluatorIsNoisy = False$/;"	v	class:ES
evo	pybrain/tools/plotting/ciaoplot.py	/^    def evo(x, y):$/;"	m	class:CiaoPlot
evo	tools/pybrain/pybrain/tools/plotting/ciaoplot.py	/^    def evo(x, y):$/;"	m	class:CiaoPlot
evo1	pybrain/tests/optimizationtest.py	/^evo1 = SimpleEvo(-3.)$/;"	v
evo1	tools/pybrain/pybrain/tests/optimizationtest.py	/^evo1 = SimpleEvo(-3.)$/;"	v
evoEval	pybrain/tests/optimizationtest.py	/^evoEval = lambda e: e.x$/;"	v
evoEval	tools/pybrain/pybrain/tests/optimizationtest.py	/^evoEval = lambda e: e.x$/;"	v
excludeSensors	pybrain/rl/environments/ode/environment.py	/^    def excludeSensors(self, exclist):$/;"	m	class:ODEEnvironment
excludeSensors	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def excludeSensors(self, exclist):$/;"	m	class:ODEEnvironment
excluded	tools/pybrain/docs/html/_static/searchtools.js	/^    var excluded = [];$/;"	v
exp	tools/pybrain/examples/optimization/optimizers_for_rl.py	/^exp = EpisodicExperiment(task, agent)$/;"	v
expList	tools/pybrain/examples/rl/environments/cartpole/cart_all.py	/^expList = ["PGPE(storeAllEvaluations = True)", "ExactNES(storeAllEvaluations = True)", "FEM(storeAllEvaluations = True)", "CMAES(storeAllEvaluations = True)"]$/;"	v
experiment	enac.py	/^        experiment = EpisodicExperiment(task, agent)$/;"	v
experiment	examples/ENAC.py	/^experiment = Experiment(task, agent)$/;"	v
experiment	examples/ENAC_TL.py	/^experiment = Experiment(task, agent)$/;"	v
experiment	examples/LSTDAC.py	/^experiment = Experiment(task, agent)$/;"	v
experiment	examples/QLambda_LinFA.py	/^experiment = Experiment(task, agent)$/;"	v
experiment	examples/Q_LinFA.py	/^experiment = Experiment(task, agent)$/;"	v
experiment	examples/SARSA_TL.py	/^experiment = Experiment(task, agent)$/;"	v
experiment	main.py	/^experiment = Experiment(task, agent)$/;"	v
experiment	tools/pybrain/docs/tutorials/rl.py	/^experiment = Experiment(task, agent)$/;"	v
experiment	tools/pybrain/examples/rl/environments/cartpole/cart_all.py	/^        experiment = EpisodicExperiment(task, agent)$/;"	v
experiment	tools/pybrain/examples/rl/environments/cartpole/cart_cma.py	/^    experiment = EpisodicExperiment(task, agent)$/;"	v
experiment	tools/pybrain/examples/rl/environments/cartpole/cart_enac.py	/^    experiment = EpisodicExperiment(task, agent)$/;"	v
experiment	tools/pybrain/examples/rl/environments/cartpole/cart_fem.py	/^    experiment = EpisodicExperiment(task, agent)$/;"	v
experiment	tools/pybrain/examples/rl/environments/cartpole/cart_nes.py	/^    experiment = EpisodicExperiment(task, agent)$/;"	v
experiment	tools/pybrain/examples/rl/environments/cartpole/cart_pgpe.py	/^    experiment = EpisodicExperiment(task, agent)$/;"	v
experiment	tools/pybrain/examples/rl/environments/cartpole/cart_reinf.py	/^    experiment = EpisodicExperiment(task, agent)$/;"	v
experiment	tools/pybrain/examples/rl/environments/cartpole/play_cartpole.py	/^experiment = EpisodicExperiment(task, agent)$/;"	v
experiment	tools/pybrain/examples/rl/environments/flexcube/flexcube_pgpe.py	/^    experiment = EpisodicExperiment(task, agent)$/;"	v
experiment	tools/pybrain/examples/rl/environments/flexcube/flexcube_spsa.py	/^    experiment = EpisodicExperiment(task, agent)$/;"	v
experiment	tools/pybrain/examples/rl/environments/maze/td.py	/^experiment = Experiment(task, agent)$/;"	v
experiment	tools/pybrain/examples/rl/environments/ode/acrobot_fd.py	/^    experiment = EpisodicExperiment(task, agent)$/;"	v
experiment	tools/pybrain/examples/rl/environments/ode/acrobot_pgpe.py	/^    experiment = EpisodicExperiment(task, agent)$/;"	v
experiment	tools/pybrain/examples/rl/environments/ode/ccrl_glass_pgpe.py	/^    experiment = EpisodicExperiment(task, agent)$/;"	v
experiment	tools/pybrain/examples/rl/environments/ode/ccrl_plate_pgpe.py	/^    experiment = EpisodicExperiment(task, agent)$/;"	v
experiment	tools/pybrain/examples/rl/environments/ode/johnnie_pgpe.py	/^    experiment = EpisodicExperiment(task, agent)$/;"	v
experiment	tools/pybrain/examples/rl/environments/ode/johnnie_reinforce.py	/^    experiment = EpisodicExperiment(task, agent)$/;"	v
experiment	tools/pybrain/examples/rl/environments/shipsteer/shipbench_pgpe.py	/^    experiment = EpisodicExperiment(task, agent)$/;"	v
experiment	tools/pybrain/examples/rl/environments/shipsteer/shipbench_sde.py	/^experiment = EpisodicExperiment(task, agent)$/;"	v
experiment	tools/pybrain/examples/rl/valuebased/nfq.py	/^experiment = EpisodicExperiment(task, agent)$/;"	v
experiment	tools/pybrain/examples/rl/valuebased/td.py	/^experiment = Experiment(task, agent)$/;"	v
expln	pybrain/tools/functions.py	/^def expln(x):$/;"	f
expln	tools/pybrain/pybrain/tools/functions.py	/^def expln(x):$/;"	f
explnPrime	pybrain/tools/functions.py	/^def explnPrime(x):$/;"	f
explnPrime	tools/pybrain/pybrain/tools/functions.py	/^def explnPrime(x):$/;"	f
exploration	pybrain/optimization/finitedifference/pgpe.py	/^    exploration = "local"$/;"	v	class:PGPE
exploration	tools/pybrain/pybrain/optimization/finitedifference/pgpe.py	/^    exploration = "local"$/;"	v	class:PGPE
explorationReward	pybrain/rl/learners/valuebased/linearfa.py	/^    explorationReward = 1.$/;"	v	class:LSPI
explorationReward	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    explorationReward = 1.$/;"	v	class:LSPI
exploration_decay	pybrain/rl/agents/linearfa.py	/^    exploration_decay = 0.99 # per episode$/;"	v	class:LinearFA_Agent
exploration_decay	tools/pybrain/pybrain/rl/agents/linearfa.py	/^    exploration_decay = 0.99 # per episode$/;"	v	class:LinearFA_Agent
explore	pybrain/rl/learners/directsearch/policygradient.py	/^    def explore(self, state, action):$/;"	m	class:PolicyGradientLearner
explore	pybrain/rl/learners/learner.py	/^    def explore(self, state, action):$/;"	m	class:ExploringLearner
explore	tools/pybrain/pybrain/rl/learners/directsearch/policygradient.py	/^    def explore(self, state, action):$/;"	m	class:PolicyGradientLearner
explore	tools/pybrain/pybrain/rl/learners/learner.py	/^    def explore(self, state, action):$/;"	m	class:ExploringLearner
explorer	examples/ENAC.py	/^explorer = BoltzmannExplorer()$/;"	v
explorer	pybrain/rl/learners/directsearch/policygradient.py	/^    explorer = property(_getExplorer, _setExplorer)$/;"	v	class:PolicyGradientLearner
explorer	pybrain/rl/learners/learner.py	/^    explorer = None$/;"	v	class:ExploringLearner
explorer	pybrain/rl/learners/valuebased/valuebased.py	/^    explorer = property(_getExplorer, _setExplorer)$/;"	v	class:ValueBasedLearner
explorer	tools/pybrain/pybrain/rl/learners/directsearch/policygradient.py	/^    explorer = property(_getExplorer, _setExplorer)$/;"	v	class:PolicyGradientLearner
explorer	tools/pybrain/pybrain/rl/learners/learner.py	/^    explorer = None$/;"	v	class:ExploringLearner
explorer	tools/pybrain/pybrain/rl/learners/valuebased/valuebased.py	/^    explorer = property(_getExplorer, _setExplorer)$/;"	v	class:ValueBasedLearner
exploring	pybrain/rl/learners/valuebased/linearfa.py	/^    exploring = False$/;"	v	class:LSPI
exploring	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    exploring = False$/;"	v	class:LSPI
extensions	tools/pybrain/docs/sphinx/conf.py	/^extensions = ['sphinx.ext.autodoc',$/;"	v
extraRandoms	pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^    extraRandoms = 0$/;"	v	class:FastCartPoleTask
extraRandoms	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^    extraRandoms = 0$/;"	v	class:FastCartPoleTask
extrapolate	pybrain/structure/modules/evolinonetwork.py	/^    def extrapolate(self, sequence, length):$/;"	m	class:EvolinoNetwork
extrapolate	tools/pybrain/pybrain/structure/modules/evolinonetwork.py	/^    def extrapolate(self, sequence, length):$/;"	m	class:EvolinoNetwork
extrapolateBorderValues	pybrain/structure/networks/borderswiping.py	/^    extrapolateBorderValues = True$/;"	v	class:BorderSwipingNetwork
extrapolateBorderValues	tools/pybrain/pybrain/structure/networks/borderswiping.py	/^    extrapolateBorderValues = True$/;"	v	class:BorderSwipingNetwork
f	pybrain/optimization/distributionbased/xnes.py	/^    f = RosenbrockFunction(dim)$/;"	v	class:XNES
f	pybrain/optimization/memetic/memetic.py	/^                def f(x):$/;"	f	function:MemeticSearch._oneEvaluation
f	pybrain/rl/environments/episodic.py	/^    def f(self, x):$/;"	m	class:EpisodicTask
f	pybrain/rl/environments/fitnessevaluator.py	/^    def f(self, x):$/;"	m	class:FitnessEvaluator
f	pybrain/rl/environments/functions/lennardjones.py	/^    def f(self, x):$/;"	m	class:LennardJones
f	pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:AckleyFunction
f	pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:BraninFunction
f	pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:BucheRastriginFunction
f	pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:FunnelFunction
f	pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:GallagherGauss101MeFunction
f	pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:GriewankFunction
f	pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:GriewankRosenbrockFunction
f	pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:KatsuuraFunction
f	pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:LunacekBiRastriginFunction
f	pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:RastriginFunction
f	pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:SchaffersF7Function
f	pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:Schwefel20Function
f	pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:Schwefel_2_13Function
f	pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:WeierstrassFunction
f	pybrain/rl/environments/functions/multiobjective.py	/^    def f(self, x):$/;"	m	class:FonBenchmark
f	pybrain/rl/environments/functions/multiobjective.py	/^    def f(self, x):$/;"	m	class:KurBenchmark
f	pybrain/rl/environments/functions/multiobjective.py	/^    def f(self, x):$/;"	m	class:PolBenchmark
f	pybrain/rl/environments/functions/multiobjective.py	/^    def f(self, x):$/;"	m	class:SchBenchmark
f	pybrain/rl/environments/functions/unbounded.py	/^    def f(self, x):$/;"	m	class:LinearFunction
f	pybrain/rl/environments/functions/unbounded.py	/^    def f(self, x):$/;"	m	class:ParabRFunction
f	pybrain/rl/environments/functions/unbounded.py	/^    def f(self, x):$/;"	m	class:SharpRFunction
f	pybrain/rl/environments/functions/unimodal.py	/^    def f(self, x):$/;"	m	class:AttractiveSectorFunction
f	pybrain/rl/environments/functions/unimodal.py	/^    def f(self, x):$/;"	m	class:BoundedLinear
f	pybrain/rl/environments/functions/unimodal.py	/^    def f(self, x):$/;"	m	class:CigarFunction
f	pybrain/rl/environments/functions/unimodal.py	/^    def f(self, x):$/;"	m	class:DiffPowFunction
f	pybrain/rl/environments/functions/unimodal.py	/^    def f(self, x):$/;"	m	class:ElliFunction
f	pybrain/rl/environments/functions/unimodal.py	/^    def f(self, x):$/;"	m	class:GlasmachersFunction
f	pybrain/rl/environments/functions/unimodal.py	/^    def f(self, x):$/;"	m	class:RosenbrockFunction
f	pybrain/rl/environments/functions/unimodal.py	/^    def f(self, x):$/;"	m	class:SchwefelFunction
f	pybrain/rl/environments/functions/unimodal.py	/^    def f(self, x):$/;"	m	class:SharpRFunctionBis
f	pybrain/rl/environments/functions/unimodal.py	/^    def f(self, x):$/;"	m	class:SphereFunction
f	pybrain/rl/environments/functions/unimodal.py	/^    def f(self, x):$/;"	m	class:StepElliFunction
f	pybrain/rl/environments/functions/unimodal.py	/^    def f(self, x):$/;"	m	class:TabletFunction
f	pybrain/rl/environments/simple/environment.py	/^    def f(self, x):$/;"	m	class:SimpleEnvironment
f	pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^    def f(self, x):$/;"	m	class:CaptureGameTask
f	pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^    def f(self, x):$/;"	m	class:GomokuTask
f	pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    def f(self, player):$/;"	m	class:HandicapCaptureTask
f	pybrain/structure/modules/lstm.py	/^    f = lambda _, x: sigmoid(x)$/;"	v	class:LSTMLayer
f	pybrain/structure/modules/mdlstm.py	/^    def f(self, x): return sigmoid(x)$/;"	m	class:MDLSTMLayer
f	pybrain/tools/functions.py	/^    def f(val):$/;"	f	function:expln
f	pybrain/tools/functions.py	/^    def f(val):$/;"	f	function:explnPrime
f	pybrain/tools/functions.py	/^    def f(val):$/;"	f	function:semilinear
f	pybrain/tools/functions.py	/^    def f(val):$/;"	f	function:semilinearPrime
f	tools/pybrain/examples/optimization/multiobjective/nsga2.py	/^f = KurBenchmark()$/;"	v
f	tools/pybrain/examples/optimization/optimizerinterface.py	/^f = TabletFunction(2)$/;"	v
f	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    f = RosenbrockFunction(dim)$/;"	v	class:XNES
f	tools/pybrain/pybrain/optimization/memetic/memetic.py	/^                def f(x):$/;"	f	function:MemeticSearch._oneEvaluation
f	tools/pybrain/pybrain/rl/environments/episodic.py	/^    def f(self, x):$/;"	m	class:EpisodicTask
f	tools/pybrain/pybrain/rl/environments/fitnessevaluator.py	/^    def f(self, x):$/;"	m	class:FitnessEvaluator
f	tools/pybrain/pybrain/rl/environments/functions/lennardjones.py	/^    def f(self, x):$/;"	m	class:LennardJones
f	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:AckleyFunction
f	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:BraninFunction
f	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:BucheRastriginFunction
f	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:FunnelFunction
f	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:GallagherGauss101MeFunction
f	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:GriewankFunction
f	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:GriewankRosenbrockFunction
f	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:KatsuuraFunction
f	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:LunacekBiRastriginFunction
f	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:RastriginFunction
f	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:SchaffersF7Function
f	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:Schwefel20Function
f	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:Schwefel_2_13Function
f	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    def f(self, x):$/;"	m	class:WeierstrassFunction
f	tools/pybrain/pybrain/rl/environments/functions/multiobjective.py	/^    def f(self, x):$/;"	m	class:FonBenchmark
f	tools/pybrain/pybrain/rl/environments/functions/multiobjective.py	/^    def f(self, x):$/;"	m	class:KurBenchmark
f	tools/pybrain/pybrain/rl/environments/functions/multiobjective.py	/^    def f(self, x):$/;"	m	class:PolBenchmark
f	tools/pybrain/pybrain/rl/environments/functions/multiobjective.py	/^    def f(self, x):$/;"	m	class:SchBenchmark
f	tools/pybrain/pybrain/rl/environments/functions/unbounded.py	/^    def f(self, x):$/;"	m	class:LinearFunction
f	tools/pybrain/pybrain/rl/environments/functions/unbounded.py	/^    def f(self, x):$/;"	m	class:ParabRFunction
f	tools/pybrain/pybrain/rl/environments/functions/unbounded.py	/^    def f(self, x):$/;"	m	class:SharpRFunction
f	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^    def f(self, x):$/;"	m	class:AttractiveSectorFunction
f	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^    def f(self, x):$/;"	m	class:BoundedLinear
f	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^    def f(self, x):$/;"	m	class:CigarFunction
f	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^    def f(self, x):$/;"	m	class:DiffPowFunction
f	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^    def f(self, x):$/;"	m	class:ElliFunction
f	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^    def f(self, x):$/;"	m	class:GlasmachersFunction
f	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^    def f(self, x):$/;"	m	class:RosenbrockFunction
f	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^    def f(self, x):$/;"	m	class:SchwefelFunction
f	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^    def f(self, x):$/;"	m	class:SharpRFunctionBis
f	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^    def f(self, x):$/;"	m	class:SphereFunction
f	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^    def f(self, x):$/;"	m	class:StepElliFunction
f	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^    def f(self, x):$/;"	m	class:TabletFunction
f	tools/pybrain/pybrain/rl/environments/simple/environment.py	/^    def f(self, x):$/;"	m	class:SimpleEnvironment
f	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^    def f(self, x):$/;"	m	class:CaptureGameTask
f	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^    def f(self, x):$/;"	m	class:GomokuTask
f	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    def f(self, player):$/;"	m	class:HandicapCaptureTask
f	tools/pybrain/pybrain/structure/modules/lstm.py	/^    f = lambda _, x: sigmoid(x)$/;"	v	class:LSTMLayer
f	tools/pybrain/pybrain/structure/modules/mdlstm.py	/^    def f(self, x): return sigmoid(x)$/;"	m	class:MDLSTMLayer
f	tools/pybrain/pybrain/tools/functions.py	/^    def f(val):$/;"	f	function:expln
f	tools/pybrain/pybrain/tools/functions.py	/^    def f(val):$/;"	f	function:explnPrime
f	tools/pybrain/pybrain/tools/functions.py	/^    def f(val):$/;"	f	function:semilinear
f	tools/pybrain/pybrain/tools/functions.py	/^    def f(val):$/;"	f	function:semilinearPrime
fListToString	pybrain/utilities.py	/^def fListToString(a_list, a_precision=3):$/;"	f
fListToString	tools/pybrain/pybrain/utilities.py	/^def fListToString(a_list, a_precision=3):$/;"	f
f_in	tools/pybrain/docs/code2tut.py	/^f_in = file(os.path.join("tutorials",sys.argv[1])+".py")$/;"	v
f_out	tools/pybrain/docs/code2tut.py	/^f_out = file(os.path.join("sphinx",sys.argv[1])+".txt", "w+")$/;"	v
fe	pybrain/tests/optimizationtest.py	/^fe = SphereFunction$/;"	v
fe	tools/pybrain/pybrain/tests/optimizationtest.py	/^fe = SphereFunction$/;"	v
fifteen_degrees	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	45;"	d	file:
fifteen_degrees	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	45;"	d	file:
fifty_degrees	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	48;"	d	file:
fifty_degrees	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	48;"	d	file:
fig	tools/pybrain/examples/supervised/neuralnets+svm/example_svm.py	/^fig = p.figure()$/;"	v
fileMap	tools/pybrain/docs/html/_static/searchtools.js	/^    var fileMap = {};$/;"	v
files	tools/pybrain/docs/html/_static/searchtools.js	/^    var files = null;$/;"	v
filterResult	pybrain/structure/networks/mdrnn.py	/^    def filterResult(self, inpt):$/;"	m	class:_Mdrnn
filterResult	tools/pybrain/pybrain/structure/networks/mdrnn.py	/^    def filterResult(self, inpt):$/;"	m	class:_Mdrnn
finalReward	pybrain/rl/environments/mazes/tasks/maze.py	/^    finalReward = 1$/;"	v	class:MazeTask
finalReward	pybrain/rl/environments/mazes/tasks/shuttle.py	/^    finalReward = 10$/;"	v	class:ShuttleDocking
finalReward	pybrain/rl/environments/mazes/tasks/tmaze.py	/^    finalReward = 4$/;"	v	class:TMaze
finalReward	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze.py	/^    finalReward = 1$/;"	v	class:MazeTask
finalReward	tools/pybrain/pybrain/rl/environments/mazes/tasks/shuttle.py	/^    finalReward = 10$/;"	v	class:ShuttleDocking
finalReward	tools/pybrain/pybrain/rl/environments/mazes/tasks/tmaze.py	/^    finalReward = 4$/;"	v	class:TMaze
findBall	pybrain/supervised/knn/lsh/nearoptimal.py	/^    def findBall(self, point):$/;"	m	class:MultiDimHash
findBall	tools/pybrain/pybrain/supervised/knn/lsh/nearoptimal.py	/^    def findBall(self, point):$/;"	m	class:MultiDimHash
findNamedNode	pybrain/tools/customxml/handling.py	/^    def findNamedNode(self, name, nameattr, root = None):$/;"	m	class:XMLHandling
findNamedNode	tools/pybrain/pybrain/tools/customxml/handling.py	/^    def findNamedNode(self, name, nameattr, root = None):$/;"	m	class:XMLHandling
findNode	pybrain/tools/customxml/handling.py	/^    def findNode(self, name, index = 0, root = None):$/;"	m	class:XMLHandling
findNode	tools/pybrain/pybrain/tools/customxml/handling.py	/^    def findNode(self, name, index = 0, root = None):$/;"	m	class:XMLHandling
firstCarScore	pybrain/rl/environments/simplerace/simpleracetcp.py	/^    firstCarScore = 0$/;"	v	class:SimpleraceEnvironment
firstCarScore	tools/pybrain/pybrain/rl/environments/simplerace/simpleracetcp.py	/^    firstCarScore = 0$/;"	v	class:SimpleraceEnvironment
fitness	pybrain/optimization/populationbased/pso.py	/^    fitness = property(_getFitness, _setFitness)$/;"	v	class:Particle
fitness	tools/pybrain/pybrain/optimization/populationbased/pso.py	/^    fitness = property(_getFitness, _setFitness)$/;"	v	class:Particle
flaggedArrayByIndex	pybrain/tools/datasets/mnist.py	/^def flaggedArrayByIndex(idx, length):$/;"	f
flaggedArrayByIndex	tools/pybrain/pybrain/tools/datasets/mnist.py	/^def flaggedArrayByIndex(idx, length):$/;"	f
flat2triu	pybrain/utilities.py	/^def flat2triu(a, dim):$/;"	f
flat2triu	tools/pybrain/pybrain/utilities.py	/^def flat2triu(a, dim):$/;"	f
flood	pybrain/utilities.py	/^def flood(stepFunction, fullSet, initSet, relevant=None):$/;"	f
flood	tools/pybrain/pybrain/utilities.py	/^def flood(stepFunction, fullSet, initSet, relevant=None):$/;"	f
fluctuating	pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    def fluctuating(self):$/;"	m	class:HandicapCaptureTask
fluctuating	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    def fluctuating(self):$/;"	m	class:HandicapCaptureTask
fnn	tools/pybrain/docs/tutorials/fnn.py	/^fnn = buildNetwork(trndata.indim, 5, trndata.outdim, outclass=SoftmaxLayer)$/;"	v
fnn	tools/pybrain/examples/supervised/neuralnets+svm/example_fnn.py	/^fnn = buildNetwork( trndata.indim, 5, trndata.outdim, outclass=SoftmaxLayer )$/;"	v
forcedLegality	pybrain/rl/experiments/tournament.py	/^    forcedLegality = False$/;"	v	class:Tournament
forcedLegality	tools/pybrain/pybrain/rl/experiments/tournament.py	/^    forcedLegality = False$/;"	v	class:Tournament
forcedRefresh	pybrain/optimization/distributionbased/ves.py	/^    forcedRefresh = 0.01$/;"	v	class:VanillaGradientEvolutionStrategies
forcedRefresh	pybrain/optimization/distributionbased/xnes.py	/^    forcedRefresh = 0.01$/;"	v	class:XNES
forcedRefresh	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    forcedRefresh = 0.01$/;"	v	class:VanillaGradientEvolutionStrategies
forcedRefresh	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    forcedRefresh = 0.01$/;"	v	class:XNES
forgetFactor	pybrain/optimization/distributionbased/fem.py	/^    forgetFactor = 0.1$/;"	v	class:FEM
forgetFactor	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^    forgetFactor = 0.1$/;"	v	class:FEM
format	tools/pybrain/examples/supervised/neuralnets+svm/example_svm.py	/^                    format='%(asctime)s %(levelname)s %(message)s')$/;"	v
formatFromExtension	pybrain/utilities.py	/^def formatFromExtension(fname):$/;"	f
formatFromExtension	tools/pybrain/pybrain/utilities.py	/^def formatFromExtension(fname):$/;"	f
forward	pybrain/structure/connections/connection.py	/^    def forward(self, inmodOffset=0, outmodOffset=0):$/;"	m	class:Connection
forward	pybrain/structure/evolvables/cheaplycopiable.py	/^    def forward(self, *args, **kwargs):$/;"	m	class:CheaplyCopiable
forward	pybrain/structure/evolvables/maskedmodule.py	/^    def forward(self, *args, **kwargs):$/;"	m	class:MaskedModule
forward	pybrain/structure/modules/module.py	/^    def forward(self):$/;"	m	class:Module
forward	pybrain/structure/networks/recurrent.py	/^    def forward(self):$/;"	m	class:RecurrentNetworkComponent
forward	tools/pybrain/pybrain/structure/connections/connection.py	/^    def forward(self, inmodOffset=0, outmodOffset=0):$/;"	m	class:Connection
forward	tools/pybrain/pybrain/structure/evolvables/cheaplycopiable.py	/^    def forward(self, *args, **kwargs):$/;"	m	class:CheaplyCopiable
forward	tools/pybrain/pybrain/structure/evolvables/maskedmodule.py	/^    def forward(self, *args, **kwargs):$/;"	m	class:MaskedModule
forward	tools/pybrain/pybrain/structure/modules/module.py	/^    def forward(self):$/;"	m	class:Module
forward	tools/pybrain/pybrain/structure/networks/recurrent.py	/^    def forward(self):$/;"	m	class:RecurrentNetworkComponent
forwardPass	pybrain/structure/modules/svmunit.py	/^    def forwardPass(self, values=False):$/;"	m	class:SVMUnit
forwardPass	tools/pybrain/pybrain/structure/modules/svmunit.py	/^    def forwardPass(self, values=False):$/;"	m	class:SVMUnit
fprime	pybrain/structure/modules/lstm.py	/^    fprime = lambda _, x: sigmoidPrime(x)$/;"	v	class:LSTMLayer
fprime	pybrain/structure/modules/mdlstm.py	/^    def fprime(self, x): return sigmoidPrime(x)$/;"	m	class:MDLSTMLayer
fprime	tools/pybrain/pybrain/structure/modules/lstm.py	/^    fprime = lambda _, x: sigmoidPrime(x)$/;"	v	class:LSTMLayer
fprime	tools/pybrain/pybrain/structure/modules/mdlstm.py	/^    def fprime(self, x): return sigmoidPrime(x)$/;"	m	class:MDLSTMLayer
fromDims	pybrain/structure/networks/rbm.py	/^    def fromDims(cls, visibledim, hiddendim, params=None, biasParams=None):$/;"	m	class:Rbm
fromDims	tools/pybrain/pybrain/structure/networks/rbm.py	/^    def fromDims(cls, visibledim, hiddendim, params=None, biasParams=None):$/;"	m	class:Rbm
fromModules	pybrain/structure/networks/rbm.py	/^    def fromModules(cls, visible, hidden, bias, con, biascon):$/;"	m	class:Rbm
fromModules	tools/pybrain/pybrain/structure/networks/rbm.py	/^    def fromModules(cls, visible, hidden, bias, con, biascon):$/;"	m	class:Rbm
fullyConnected	pybrain/optimization/populationbased/pso.py	/^def fullyConnected(lst):$/;"	f
fullyConnected	tools/pybrain/pybrain/optimization/populationbased/pso.py	/^def fullyConnected(lst):$/;"	f
func	util.py	/^def func():$/;"	f
funnelDepth	pybrain/rl/environments/functions/multimodal.py	/^    funnelDepth = 1.$/;"	v	class:FunnelFunction
funnelDepth	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    funnelDepth = 1.$/;"	v	class:FunnelFunction
funnelSize	pybrain/rl/environments/functions/multimodal.py	/^    funnelSize = 1.0$/;"	v	class:FunnelFunction
funnelSize	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    funnelSize = 1.0$/;"	v	class:FunnelFunction
g	pybrain/rl/environments/cartpole/cartpole.py	/^    g = 9.81$/;"	v	class:CartPoleEnvironment
g	pybrain/rl/environments/classic/acrobot.py	/^    g = 9.8$/;"	v	class:AcrobotTask
g	pybrain/structure/modules/lstm.py	/^    g = lambda _, x: tanh(x)$/;"	v	class:LSTMLayer
g	pybrain/structure/modules/mdlstm.py	/^    def g(self, x): return tanh(x)$/;"	m	class:MDLSTMLayer
g	tools/pybrain/examples/rl/environments/capturegame/pente.py	/^g = PenteGame((dim, dim))$/;"	v
g	tools/pybrain/pybrain/rl/environments/cartpole/cartpole.py	/^    g = 9.81$/;"	v	class:CartPoleEnvironment
g	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    g = 9.8$/;"	v	class:AcrobotTask
g	tools/pybrain/pybrain/structure/modules/lstm.py	/^    g = lambda _, x: tanh(x)$/;"	v	class:LSTMLayer
g	tools/pybrain/pybrain/structure/modules/mdlstm.py	/^    def g(self, x): return tanh(x)$/;"	m	class:MDLSTMLayer
game	tools/pybrain/examples/rl/environments/capturegame/minitournament.py	/^game = CaptureGame(5)$/;"	v
gameOver	pybrain/rl/environments/twoplayergames/twoplayergame.py	/^    def gameOver(self):$/;"	m	class:TwoPlayerGame
gameOver	tools/pybrain/pybrain/rl/environments/twoplayergames/twoplayergame.py	/^    def gameOver(self):$/;"	m	class:TwoPlayerGame
gamma	pybrain/optimization/finitedifference/fd.py	/^    gamma = 0.999$/;"	v	class:FiniteDifferences
gamma	pybrain/optimization/finitedifference/spsa.py	/^    gamma = 0.9995 #Exploration decay factor$/;"	v	class:SimpleSPSA
gamma	tools/pybrain/pybrain/optimization/finitedifference/fd.py	/^    gamma = 0.999$/;"	v	class:FiniteDifferences
gamma	tools/pybrain/pybrain/optimization/finitedifference/spsa.py	/^    gamma = 0.9995 #Exploration decay factor$/;"	v	class:SimpleSPSA
garbagecollect	pybrain/utilities.py	/^def garbagecollect(func):$/;"	f
garbagecollect	tools/pybrain/pybrain/utilities.py	/^def garbagecollect(func):$/;"	f
generate	pybrain/structure/modules/evolinonetwork.py	/^    def generate(self, length):$/;"	m	class:EvolinoNetwork
generate	tools/pybrain/pybrain/structure/modules/evolinonetwork.py	/^    def generate(self, length):$/;"	m	class:EvolinoNetwork
generateClassificationData	tools/pybrain/examples/supervised/neuralnets+svm/datasets/datagenerator.py	/^def generateClassificationData(size, nClasses=3):$/;"	f
generateData	pybrain/tools/plotting/ciaoplot.py	/^    def generateData(evaluator, hof1, hof2, symmetric=True):$/;"	m	class:CiaoPlot
generateData	tools/pybrain/pybrain/tools/plotting/ciaoplot.py	/^    def generateData(evaluator, hof1, hof2, symmetric=True):$/;"	m	class:CiaoPlot
generateDiags	pybrain/rl/environments/functions/transformations.py	/^def generateDiags(alpha, dim, shuffled=False):    $/;"	f
generateDiags	tools/pybrain/pybrain/rl/environments/functions/transformations.py	/^def generateDiags(alpha, dim, shuffled=False):    $/;"	f
generateGridData	tools/pybrain/examples/supervised/neuralnets+svm/datasets/datagenerator.py	/^def generateGridData(x,y, return_ticks=False):$/;"	f
generateIBP	pybrain/tools/ibp.py	/^def generateIBP(customers, alpha=10, reducedprop=1.):$/;"	f
generateIBP	tools/pybrain/pybrain/tools/ibp.py	/^def generateIBP(customers, alpha=10, reducedprop=1.):$/;"	f
generateNoisySines	tools/pybrain/examples/supervised/neuralnets+svm/datasets/datagenerator.py	/^def generateNoisySines( npoints, nseq, noise=0.3 ):$/;"	f
generateSuperimposedSineData	tools/pybrain/examples/supervised/evolino/lib/data_generator.py	/^def generateSuperimposedSineData( sinefreqs, space, yScales=None ):$/;"	f
get	pybrain/rl/environments/flexcube/masspoint.py	/^    def get(self, i):$/;"	m	class:MArray
get	tools/pybrain/pybrain/rl/environments/flexcube/masspoint.py	/^    def get(self, i):$/;"	m	class:MArray
getAcceptable	pybrain/rl/environments/twoplayergames/capturegame.py	/^    def getAcceptable(self, c):$/;"	m	class:CaptureGame
getAcceptable	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    def getAcceptable(self, c):$/;"	m	class:CaptureGame
getAction	agents/HessianACAgent.py	/^    def getAction(self):$/;"	m	class:HessianACAgent
getAction	agents/LSTDACAgent.py	/^    def getAction(self):$/;"	m	class:LSTDACAgent
getAction	pybrain/rl/agents/agent.py	/^    def getAction(self):$/;"	m	class:Agent
getAction	pybrain/rl/agents/learning.py	/^    def getAction(self):$/;"	m	class:LearningAgent
getAction	pybrain/rl/agents/linearfa.py	/^    def getAction(self):$/;"	m	class:LinearFA_Agent
getAction	pybrain/rl/agents/logging.py	/^    def getAction(self):$/;"	m	class:LoggingAgent
getAction	pybrain/rl/environments/simplerace/simplecontroller.py	/^    def getAction(self):$/;"	m	class:SimpleController
getAction	pybrain/rl/environments/twoplayergames/capturegameplayers/clientwrapper.py	/^    def getAction(self):$/;"	m	class:ClientCapturePlayer
getAction	pybrain/rl/environments/twoplayergames/capturegameplayers/killing.py	/^    def getAction(self):$/;"	m	class:KillingPlayer
getAction	pybrain/rl/environments/twoplayergames/capturegameplayers/moduledecision.py	/^    def getAction(self):$/;"	m	class:ModuleDecidingPlayer
getAction	pybrain/rl/environments/twoplayergames/capturegameplayers/nonsuicide.py	/^    def getAction(self):$/;"	m	class:NonSuicidePlayer
getAction	pybrain/rl/environments/twoplayergames/capturegameplayers/randomplayer.py	/^    def getAction(self):$/;"	m	class:RandomCapturePlayer
getAction	pybrain/rl/environments/twoplayergames/gomokuplayers/killing.py	/^    def getAction(self):$/;"	m	class:KillingGomokuPlayer
getAction	pybrain/rl/environments/twoplayergames/gomokuplayers/moduledecision.py	/^    def getAction(self):$/;"	m	class:ModuleDecidingPlayer
getAction	pybrain/rl/environments/twoplayergames/gomokuplayers/randomplayer.py	/^    def getAction(self):$/;"	m	class:RandomGomokuPlayer
getAction	pybrain/tests/unittests/tools/test_rlgluebridge.py	/^    def getAction(self):$/;"	m	class:PseudoPybrainAgent
getAction	tools/pybrain/examples/rl/environments/linear_fa/xor.py	/^    def getAction(self):$/;"	m	class:LinFA_QAgent
getAction	tools/pybrain/pybrain/rl/agents/agent.py	/^    def getAction(self):$/;"	m	class:Agent
getAction	tools/pybrain/pybrain/rl/agents/learning.py	/^    def getAction(self):$/;"	m	class:LearningAgent
getAction	tools/pybrain/pybrain/rl/agents/linearfa.py	/^    def getAction(self):$/;"	m	class:LinearFA_Agent
getAction	tools/pybrain/pybrain/rl/agents/logging.py	/^    def getAction(self):$/;"	m	class:LoggingAgent
getAction	tools/pybrain/pybrain/rl/environments/simplerace/simplecontroller.py	/^    def getAction(self):$/;"	m	class:SimpleController
getAction	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/clientwrapper.py	/^    def getAction(self):$/;"	m	class:ClientCapturePlayer
getAction	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/killing.py	/^    def getAction(self):$/;"	m	class:KillingPlayer
getAction	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/moduledecision.py	/^    def getAction(self):$/;"	m	class:ModuleDecidingPlayer
getAction	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/nonsuicide.py	/^    def getAction(self):$/;"	m	class:NonSuicidePlayer
getAction	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/randomplayer.py	/^    def getAction(self):$/;"	m	class:RandomCapturePlayer
getAction	tools/pybrain/pybrain/rl/environments/twoplayergames/gomokuplayers/killing.py	/^    def getAction(self):$/;"	m	class:KillingGomokuPlayer
getAction	tools/pybrain/pybrain/rl/environments/twoplayergames/gomokuplayers/moduledecision.py	/^    def getAction(self):$/;"	m	class:ModuleDecidingPlayer
getAction	tools/pybrain/pybrain/rl/environments/twoplayergames/gomokuplayers/randomplayer.py	/^    def getAction(self):$/;"	m	class:RandomGomokuPlayer
getAction	tools/pybrain/pybrain/tests/unittests/tools/test_rlgluebridge.py	/^    def getAction(self):$/;"	m	class:PseudoPybrainAgent
getActionLength	pybrain/rl/environments/ode/environment.py	/^    def getActionLength(self):$/;"	m	class:ODEEnvironment
getActionLength	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def getActionLength(self):$/;"	m	class:ODEEnvironment
getActionValues	policy/BoltzmanAC.py	/^    def getActionValues(self, feaList):$/;"	m	class:BoltzmanPolicy
getActionValues	pybrain/rl/learners/valuebased/interface.py	/^    def getActionValues(self, state):$/;"	m	class:ActionValueInterface
getActionValues	pybrain/rl/learners/valuebased/interface.py	/^    def getActionValues(self, state):$/;"	m	class:ActionValueNetwork
getActionValues	pybrain/rl/learners/valuebased/interface.py	/^    def getActionValues(self, state):$/;"	m	class:ActionValueTable
getActionValues	tools/pybrain/pybrain/rl/learners/valuebased/interface.py	/^    def getActionValues(self, state):$/;"	m	class:ActionValueInterface
getActionValues	tools/pybrain/pybrain/rl/learners/valuebased/interface.py	/^    def getActionValues(self, state):$/;"	m	class:ActionValueNetwork
getActionValues	tools/pybrain/pybrain/rl/learners/valuebased/interface.py	/^    def getActionValues(self, state):$/;"	m	class:ActionValueTable
getActuatorNames	pybrain/rl/environments/ode/environment.py	/^    def getActuatorNames(self):$/;"	m	class:ODEEnvironment
getActuatorNames	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def getActuatorNames(self):$/;"	m	class:ODEEnvironment
getAllFilesIn	pybrain/tools/filehandling.py	/^def getAllFilesIn(dir, tag='', extension='.pickle'):$/;"	f
getAllFilesIn	tools/pybrain/pybrain/tools/filehandling.py	/^def getAllFilesIn(dir, tag='', extension='.pickle'):$/;"	f
getAverageFitness	pybrain/supervised/evolino/gpopulation.py	/^    def getAverageFitness(self):$/;"	m	class:SimplePopulation
getAverageFitness	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^    def getAverageFitness(self):$/;"	m	class:SimplePopulation
getBase	pybrain/structure/evolvables/cheaplycopiable.py	/^    def getBase(self):$/;"	m	class:CheaplyCopiable
getBase	tools/pybrain/pybrain/structure/evolvables/cheaplycopiable.py	/^    def getBase(self):$/;"	m	class:CheaplyCopiable
getBestIndividuals	pybrain/supervised/evolino/gpopulation.py	/^    def getBestIndividuals(self, n):$/;"	m	class:SimplePopulation
getBestIndividuals	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^    def getBestIndividuals(self, n):$/;"	m	class:SimplePopulation
getBestIndividualsSorted	pybrain/supervised/evolino/gpopulation.py	/^    def getBestIndividualsSorted(self, n):$/;"	m	class:SimplePopulation
getBestIndividualsSorted	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^    def getBestIndividualsSorted(self, n):$/;"	m	class:SimplePopulation
getBoardArray	pybrain/rl/environments/twoplayergames/capturegame.py	/^    def getBoardArray(self):$/;"	m	class:CaptureGame
getBoardArray	pybrain/rl/environments/twoplayergames/gomoku.py	/^    def getBoardArray(self):$/;"	m	class:GomokuGame
getBoardArray	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    def getBoardArray(self):$/;"	m	class:CaptureGame
getBoardArray	tools/pybrain/pybrain/rl/environments/twoplayergames/gomoku.py	/^    def getBoardArray(self):$/;"	m	class:GomokuGame
getBodies	pybrain/rl/environments/ode/sensors.py	/^    def getBodies(self):$/;"	m	class:BodyPositionSensor
getBodies	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def getBodies(self):$/;"	m	class:BodyPositionSensor
getCaptureScreen	pybrain/rl/environments/ode/viewer.py	/^    def getCaptureScreen(self):$/;"	m	class:ODEViewer
getCaptureScreen	tools/pybrain/pybrain/rl/environments/ode/viewer.py	/^    def getCaptureScreen(self):$/;"	m	class:ODEViewer
getCartPosition	pybrain/rl/environments/cartpole/cartpole.py	/^    def getCartPosition(self):$/;"	m	class:CartPoleEnvironment
getCartPosition	pybrain/rl/environments/cartpole/cartpole.py	/^    def getCartPosition(self):$/;"	m	class:CartPoleLinEnvironment
getCartPosition	pybrain/rl/environments/cartpole/doublepole.py	/^    def getCartPosition(self):$/;"	m	class:DoublePoleEnvironment
getCartPosition	pybrain/rl/environments/cartpole/nonmarkovdoublepole.py	/^    def getCartPosition(self):$/;"	m	class:NonMarkovDoublePoleEnvironment
getCartPosition	pybrain/rl/environments/cartpole/nonmarkovpole.py	/^    def getCartPosition(self):$/;"	m	class:NonMarkovPoleEnvironment
getCartPosition	tools/pybrain/pybrain/rl/environments/cartpole/cartpole.py	/^    def getCartPosition(self):$/;"	m	class:CartPoleEnvironment
getCartPosition	tools/pybrain/pybrain/rl/environments/cartpole/cartpole.py	/^    def getCartPosition(self):$/;"	m	class:CartPoleLinEnvironment
getCartPosition	tools/pybrain/pybrain/rl/environments/cartpole/doublepole.py	/^    def getCartPosition(self):$/;"	m	class:DoublePoleEnvironment
getCartPosition	tools/pybrain/pybrain/rl/environments/cartpole/nonmarkovdoublepole.py	/^    def getCartPosition(self):$/;"	m	class:NonMarkovDoublePoleEnvironment
getCartPosition	tools/pybrain/pybrain/rl/environments/cartpole/nonmarkovpole.py	/^    def getCartPosition(self):$/;"	m	class:NonMarkovPoleEnvironment
getChild	pybrain/tools/customxml/handling.py	/^    def getChild(self, node, name):$/;"	m	class:XMLHandling
getChild	tools/pybrain/pybrain/tools/customxml/handling.py	/^    def getChild(self, node, name):$/;"	m	class:XMLHandling
getChildrenOf	pybrain/tools/customxml/handling.py	/^    def getChildrenOf(self, node):$/;"	m	class:XMLHandling
getChildrenOf	tools/pybrain/pybrain/tools/customxml/handling.py	/^    def getChildrenOf(self, node):$/;"	m	class:XMLHandling
getClass	pybrain/datasets/classification.py	/^    def getClass(self, idx):$/;"	m	class:ClassificationDataSet
getClass	pybrain/tools/svmdata.py	/^    def getClass(self, idx):$/;"	m	class:SVMData
getClass	tools/pybrain/pybrain/datasets/classification.py	/^    def getClass(self, idx):$/;"	m	class:ClassificationDataSet
getClass	tools/pybrain/pybrain/tools/svmdata.py	/^    def getClass(self, idx):$/;"	m	class:SVMData
getClassHistogram	pybrain/tools/svmdata.py	/^    def getClassHistogram(self):$/;"	m	class:SVMData
getClassHistogram	tools/pybrain/pybrain/tools/svmdata.py	/^    def getClassHistogram(self):$/;"	m	class:SVMData
getConnections	pybrain/supervised/evolino/networkwrapper.py	/^    def getConnections(self):$/;"	m	class:NetworkWrapper
getConnections	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def getConnections(self):$/;"	m	class:NetworkWrapper
getCurrentSequence	pybrain/datasets/sequential.py	/^    def getCurrentSequence(self):$/;"	m	class:SequentialDataSet
getCurrentSequence	tools/pybrain/pybrain/datasets/sequential.py	/^    def getCurrentSequence(self):$/;"	m	class:SequentialDataSet
getCurrentStep	pybrain/rl/environments/ode/environment.py	/^    def getCurrentStep(self):$/;"	m	class:ODEEnvironment
getCurrentStep	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def getCurrentStep(self):$/;"	m	class:ODEEnvironment
getCurrentSubtags	pybrain/rl/environments/ode/tools/xmltools.py	/^    def getCurrentSubtags(self):$/;"	m	class:XMLstruct
getCurrentSubtags	tools/pybrain/pybrain/rl/environments/ode/tools/xmltools.py	/^    def getCurrentSubtags(self):$/;"	m	class:XMLstruct
getDecomposition	pybrain/structure/networks/neurondecomposable.py	/^    def getDecomposition(self):$/;"	m	class:NeuronDecomposableNetwork
getDecomposition	tools/pybrain/pybrain/structure/networks/neurondecomposable.py	/^    def getDecomposition(self):$/;"	m	class:NeuronDecomposableNetwork
getDimension	pybrain/datasets/dataset.py	/^    def getDimension(self, label):$/;"	m	class:DataSet
getDimension	tools/pybrain/pybrain/datasets/dataset.py	/^    def getDimension(self, label):$/;"	m	class:DataSet
getDisturb	pybrain/rl/environments/ode/tasks/johnnie.py	/^    def getDisturb(self):$/;"	m	class:RStandingTask
getDisturb	pybrain/rl/environments/ode/tasks/johnnie.py	/^    def getDisturb(self):$/;"	m	class:RobStandingTask
getDisturb	pybrain/rl/environments/ode/tasks/johnnie.py	/^    def getDisturb(self):$/;"	m	class:RobustStandingTask
getDisturb	tools/pybrain/pybrain/rl/environments/ode/tasks/johnnie.py	/^    def getDisturb(self):$/;"	m	class:RStandingTask
getDisturb	tools/pybrain/pybrain/rl/environments/ode/tasks/johnnie.py	/^    def getDisturb(self):$/;"	m	class:RobStandingTask
getDisturb	tools/pybrain/pybrain/rl/environments/ode/tasks/johnnie.py	/^    def getDisturb(self):$/;"	m	class:RobustStandingTask
getField	pybrain/datasets/dataset.py	/^    def getField(self, label):$/;"	m	class:DataSet
getField	tools/pybrain/pybrain/datasets/dataset.py	/^    def getField(self, label):$/;"	m	class:DataSet
getFieldNames	pybrain/datasets/dataset.py	/^    def getFieldNames(self):$/;"	m	class:DataSet
getFieldNames	tools/pybrain/pybrain/datasets/dataset.py	/^    def getFieldNames(self):$/;"	m	class:DataSet
getFileName	pybrain/tools/svmdata.py	/^    def getFileName(self):$/;"	m	class:SVMData
getFileName	tools/pybrain/pybrain/tools/svmdata.py	/^    def getFileName(self):$/;"	m	class:SVMData
getFirstHiddenLayer	pybrain/supervised/evolino/networkwrapper.py	/^    def getFirstHiddenLayer(self):$/;"	m	class:NetworkWrapper
getFirstHiddenLayer	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def getFirstHiddenLayer(self):$/;"	m	class:NetworkWrapper
getFitnessMap	pybrain/supervised/evolino/gpopulation.py	/^    def getFitnessMap(self):$/;"	m	class:SimplePopulation
getFitnessMap	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^    def getFitnessMap(self):$/;"	m	class:SimplePopulation
getFuncValue	tools/pybrain/examples/supervised/evolino/lib/data_generator.py	/^    def getFuncValue(self, x):$/;"	m	class:SuperimposedSine
getFuncValues	tools/pybrain/examples/supervised/evolino/lib/data_generator.py	/^    def getFuncValues(self, x_array):$/;"	m	class:SuperimposedSine
getGaus	pybrain/tools/mixtures/mixtureofgaussian.py	/^    def getGaus(self, alpha, mue, sigma, x):$/;"	m	class:MixtureOfGaussians
getGaus	pybrain/tools/mixtures/mogpuremax.py	/^    def getGaus(self, alpha, mue, sigma, x):$/;"	m	class:MixtureOfGaussians
getGaus	tools/pybrain/pybrain/tools/mixtures/mixtureofgaussian.py	/^    def getGaus(self, alpha, mue, sigma, x):$/;"	m	class:MixtureOfGaussians
getGaus	tools/pybrain/pybrain/tools/mixtures/mogpuremax.py	/^    def getGaus(self, alpha, mue, sigma, x):$/;"	m	class:MixtureOfGaussians
getGenome	pybrain/structure/modules/evolinonetwork.py	/^    def getGenome(self):$/;"	m	class:EvolinoNetwork
getGenome	pybrain/supervised/evolino/gindividual.py	/^    def getGenome(self):$/;"	m	class:Individual
getGenome	pybrain/supervised/evolino/individual.py	/^    def getGenome(self):$/;"	m	class:EvolinoIndividual
getGenome	pybrain/supervised/evolino/individual.py	/^    def getGenome(self):$/;"	m	class:EvolinoSubIndividual
getGenome	pybrain/supervised/evolino/networkwrapper.py	/^    def getGenome(self):$/;"	m	class:EvolinoNetwork
getGenome	pybrain/supervised/evolino/networkwrapper.py	/^    def getGenome(self):$/;"	m	class:NetworkWrapper
getGenome	tools/pybrain/pybrain/structure/modules/evolinonetwork.py	/^    def getGenome(self):$/;"	m	class:EvolinoNetwork
getGenome	tools/pybrain/pybrain/supervised/evolino/gindividual.py	/^    def getGenome(self):$/;"	m	class:Individual
getGenome	tools/pybrain/pybrain/supervised/evolino/individual.py	/^    def getGenome(self):$/;"	m	class:EvolinoIndividual
getGenome	tools/pybrain/pybrain/supervised/evolino/individual.py	/^    def getGenome(self):$/;"	m	class:EvolinoSubIndividual
getGenome	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def getGenome(self):$/;"	m	class:EvolinoNetwork
getGenome	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def getGenome(self):$/;"	m	class:NetworkWrapper
getGroupSize	pybrain/rl/environments/twoplayergames/capturegame.py	/^    def getGroupSize(self, pos):$/;"	m	class:CaptureGame
getGroupSize	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    def getGroupSize(self, pos):$/;"	m	class:CaptureGame
getHeading	pybrain/rl/environments/shipsteer/shipsteer.py	/^    def getHeading(self):$/;"	m	class:ShipSteeringEnvironment
getHeading	tools/pybrain/pybrain/rl/environments/shipsteer/shipsteer.py	/^    def getHeading(self):$/;"	m	class:ShipSteeringEnvironment
getHiddenLayers	pybrain/supervised/evolino/networkwrapper.py	/^    def getHiddenLayers(self):$/;"	m	class:NetworkWrapper
getHiddenLayers	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def getHiddenLayers(self):$/;"	m	class:NetworkWrapper
getIndividualFitness	pybrain/supervised/evolino/gpopulation.py	/^    def getIndividualFitness(self, individual):$/;"	m	class:Population
getIndividualFitness	pybrain/supervised/evolino/gpopulation.py	/^    def getIndividualFitness(self, individual):$/;"	m	class:SimplePopulation
getIndividualFitness	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^    def getIndividualFitness(self, individual):$/;"	m	class:Population
getIndividualFitness	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^    def getIndividualFitness(self, individual):$/;"	m	class:SimplePopulation
getIndividuals	pybrain/supervised/evolino/gpopulation.py	/^    def getIndividuals(self):$/;"	m	class:Population
getIndividuals	pybrain/supervised/evolino/gpopulation.py	/^    def getIndividuals(self):$/;"	m	class:SimplePopulation
getIndividuals	pybrain/supervised/evolino/population.py	/^    def getIndividuals(self):$/;"	m	class:EvolinoPopulation
getIndividuals	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^    def getIndividuals(self):$/;"	m	class:Population
getIndividuals	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^    def getIndividuals(self):$/;"	m	class:SimplePopulation
getIndividuals	tools/pybrain/pybrain/supervised/evolino/population.py	/^    def getIndividuals(self):$/;"	m	class:EvolinoPopulation
getIndividualsN	pybrain/supervised/evolino/gpopulation.py	/^    def getIndividualsN(self):$/;"	m	class:SimplePopulation
getIndividualsN	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^    def getIndividualsN(self):$/;"	m	class:SimplePopulation
getInputLayer	pybrain/supervised/evolino/networkwrapper.py	/^    def getInputLayer(self):$/;"	m	class:NetworkWrapper
getInputLayer	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def getInputLayer(self):$/;"	m	class:NetworkWrapper
getJoints	pybrain/rl/environments/ode/sensors.py	/^    def getJoints(self):$/;"	m	class:JointSensor
getJoints	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def getJoints(self):$/;"	m	class:JointSensor
getKilling	pybrain/rl/environments/twoplayergames/capturegame.py	/^    def getKilling(self, c):$/;"	m	class:CaptureGame
getKilling	pybrain/rl/environments/twoplayergames/gomoku.py	/^    def getKilling(self, c):$/;"	m	class:GomokuGame
getKilling	pybrain/rl/environments/twoplayergames/pente.py	/^    def getKilling(self, c):$/;"	m	class:PenteGame
getKilling	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    def getKilling(self, c):$/;"	m	class:CaptureGame
getKilling	tools/pybrain/pybrain/rl/environments/twoplayergames/gomoku.py	/^    def getKilling(self, c):$/;"	m	class:GomokuGame
getKilling	tools/pybrain/pybrain/rl/environments/twoplayergames/pente.py	/^    def getKilling(self, c):$/;"	m	class:PenteGame
getLastHiddenLayer	pybrain/supervised/evolino/networkwrapper.py	/^    def getLastHiddenLayer(self):$/;"	m	class:NetworkWrapper
getLastHiddenLayer	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def getLastHiddenLayer(self):$/;"	m	class:NetworkWrapper
getLegals	pybrain/rl/environments/twoplayergames/capturegame.py	/^    def getLegals(self, c):$/;"	m	class:CaptureGame
getLegals	pybrain/rl/environments/twoplayergames/gomoku.py	/^    def getLegals(self, c):$/;"	m	class:GomokuGame
getLegals	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    def getLegals(self, c):$/;"	m	class:CaptureGame
getLegals	tools/pybrain/pybrain/rl/environments/twoplayergames/gomoku.py	/^    def getLegals(self, c):$/;"	m	class:GomokuGame
getLength	pybrain/datasets/dataset.py	/^    def getLength(self):$/;"	m	class:DataSet
getLength	tools/pybrain/pybrain/datasets/dataset.py	/^    def getLength(self):$/;"	m	class:DataSet
getLiberties	pybrain/rl/environments/twoplayergames/capturegame.py	/^    def getLiberties(self, pos):$/;"	m	class:CaptureGame
getLiberties	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    def getLiberties(self, pos):$/;"	m	class:CaptureGame
getLinked	pybrain/datasets/dataset.py	/^    def getLinked(self, index=None):$/;"	m	class:DataSet
getLinked	tools/pybrain/pybrain/datasets/dataset.py	/^    def getLinked(self, index=None):$/;"	m	class:DataSet
getMaxAction	pybrain/rl/learners/valuebased/interface.py	/^    def getMaxAction(self, state):$/;"	m	class:ActionValueInterface
getMaxAction	pybrain/rl/learners/valuebased/interface.py	/^    def getMaxAction(self, state):$/;"	m	class:ActionValueNetwork
getMaxAction	pybrain/rl/learners/valuebased/interface.py	/^    def getMaxAction(self, state):$/;"	m	class:ActionValueTable
getMaxAction	tools/pybrain/pybrain/rl/learners/valuebased/interface.py	/^    def getMaxAction(self, state):$/;"	m	class:ActionValueInterface
getMaxAction	tools/pybrain/pybrain/rl/learners/valuebased/interface.py	/^    def getMaxAction(self, state):$/;"	m	class:ActionValueNetwork
getMaxAction	tools/pybrain/pybrain/rl/learners/valuebased/interface.py	/^    def getMaxAction(self, state):$/;"	m	class:ActionValueTable
getMaxFitness	pybrain/supervised/evolino/gpopulation.py	/^    def getMaxFitness(self):$/;"	m	class:SimplePopulation
getMaxFitness	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^    def getMaxFitness(self):$/;"	m	class:SimplePopulation
getMaxNIndividuals	pybrain/supervised/evolino/population.py	/^    def getMaxNIndividuals(self):$/;"	m	class:EvolinoSubPopulation
getMaxNIndividuals	tools/pybrain/pybrain/supervised/evolino/population.py	/^    def getMaxNIndividuals(self):$/;"	m	class:EvolinoSubPopulation
getName	pybrain/rl/environments/ode/tools/xmltools.py	/^    def getName(self):$/;"	m	class:XMLstruct
getName	pybrain/utilities.py	/^    def getName(self):$/;"	m	class:Named
getName	tools/pybrain/pybrain/rl/environments/ode/tools/xmltools.py	/^    def getName(self):$/;"	m	class:XMLstruct
getName	tools/pybrain/pybrain/utilities.py	/^    def getName(self):$/;"	m	class:Named
getNbClasses	pybrain/structure/modules/svmunit.py	/^    def getNbClasses(self):$/;"	m	class:SVMUnit
getNbClasses	pybrain/tools/svmdata.py	/^    def getNbClasses(self):$/;"	m	class:SVMData
getNbClasses	tools/pybrain/pybrain/structure/modules/svmunit.py	/^    def getNbClasses(self):$/;"	m	class:SVMUnit
getNbClasses	tools/pybrain/pybrain/tools/svmdata.py	/^    def getNbClasses(self):$/;"	m	class:SVMData
getNbSamples	pybrain/tools/svmdata.py	/^    def getNbSamples(self):$/;"	m	class:SVMData
getNbSamples	tools/pybrain/pybrain/tools/svmdata.py	/^    def getNbSamples(self):$/;"	m	class:SVMData
getNetwork	pybrain/supervised/evolino/networkwrapper.py	/^    def getNetwork(self):$/;"	m	class:NetworkWrapper
getNetwork	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def getNetwork(self):$/;"	m	class:NetworkWrapper
getNumSequences	pybrain/datasets/sequential.py	/^    def getNumSequences(self):$/;"	m	class:SequentialDataSet
getNumSequences	tools/pybrain/pybrain/datasets/sequential.py	/^    def getNumSequences(self):$/;"	m	class:SequentialDataSet
getNumValues	pybrain/rl/environments/ode/actuators.py	/^    def getNumValues(self):$/;"	m	class:Actuator
getNumValues	pybrain/rl/environments/ode/sensors.py	/^    def getNumValues(self):$/;"	m	class:Sensor
getNumValues	tools/pybrain/pybrain/rl/environments/ode/actuators.py	/^    def getNumValues(self):$/;"	m	class:Actuator
getNumValues	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def getNumValues(self):$/;"	m	class:Sensor
getObs	pybrain/rl/environments/cartpole/fast_version/cartpolewrap.pyx	/^def getObs():$/;"	f
getObs	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpolewrap.pyx	/^def getObs():$/;"	f
getObservation	pybrain/rl/environments/cartpole/balancetask.py	/^    def getObservation(self):$/;"	m	class:DiscreteBalanceTask
getObservation	pybrain/rl/environments/cartpole/balancetask.py	/^    def getObservation(self):$/;"	m	class:DiscreteBalanceTaskRBF
getObservation	pybrain/rl/environments/cartpole/balancetask.py	/^    def getObservation(self):$/;"	m	class:DiscretePOMDPTask
getObservation	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^extern void getObservation(double * input)$/;"	f
getObservation	pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^    def getObservation(self):$/;"	m	class:FastCartPoleTask
getObservation	pybrain/rl/environments/cartpole/fast_version/cartpolewrap.pyx	/^    cdef void getObservation(double * input)$/;"	f
getObservation	pybrain/rl/environments/classic/acrobot.py	/^    def getObservation(self):    $/;"	m	class:AcrobotTask
getObservation	pybrain/rl/environments/classic/acrobot.py	/^    def getObservation(self):    $/;"	m	class:SingleArmSwinger
getObservation	pybrain/rl/environments/classic/mountaincar.py	/^    def getObservation(self):    $/;"	m	class:MountainCar
getObservation	pybrain/rl/environments/classic/xor.py	/^    def getObservation(self):$/;"	m	class:XORChainTask
getObservation	pybrain/rl/environments/classic/xor.py	/^    def getObservation(self):$/;"	m	class:XORTask
getObservation	pybrain/rl/environments/flexcube/tasks.py	/^    def getObservation(self):$/;"	m	class:NoRewardTask
getObservation	pybrain/rl/environments/mazes/tasks/cheesemaze.py	/^    def getObservation(self):$/;"	m	class:CheeseMaze
getObservation	pybrain/rl/environments/mazes/tasks/maze4x3.py	/^    def getObservation(self):$/;"	m	class:FourByThreeMaze
getObservation	pybrain/rl/environments/mazes/tasks/mdp.py	/^    def getObservation(self):$/;"	m	class:MDPMazeTask
getObservation	pybrain/rl/environments/mazes/tasks/shuttle.py	/^    def getObservation(self):$/;"	m	class:ShuttleDocking
getObservation	pybrain/rl/environments/mazes/tasks/tiger.py	/^    def getObservation(self):$/;"	m	class:TigerTask
getObservation	pybrain/rl/environments/mazes/tasks/tmaze.py	/^    def getObservation(self):$/;"	m	class:TMaze
getObservation	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def getObservation(self):$/;"	m	class:CCRLPointTask
getObservation	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def getObservation(self):$/;"	m	class:CCRLPointVarTask
getObservation	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def getObservation(self):$/;"	m	class:CCRLTask
getObservation	pybrain/rl/environments/simple/tasks.py	/^    def getObservation(self):$/;"	m	class:MinimizeTask
getObservation	pybrain/rl/environments/task.py	/^    def getObservation(self):$/;"	m	class:Task
getObservation	task/RobotMotionTask.py	/^    def getObservation(self):$/;"	m	class:RobotMotionTask
getObservation	task/SimpleTemporalLogic.py	/^    def getObservation(self):$/;"	m	class:SimpleTemporalLogic
getObservation	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    def getObservation(self):$/;"	m	class:DiscreteBalanceTask
getObservation	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    def getObservation(self):$/;"	m	class:DiscreteBalanceTaskRBF
getObservation	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    def getObservation(self):$/;"	m	class:DiscretePOMDPTask
getObservation	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^extern void getObservation(double * input)$/;"	f
getObservation	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^    def getObservation(self):$/;"	m	class:FastCartPoleTask
getObservation	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpolewrap.pyx	/^    cdef void getObservation(double * input)$/;"	f
getObservation	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    def getObservation(self):    $/;"	m	class:AcrobotTask
getObservation	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    def getObservation(self):    $/;"	m	class:SingleArmSwinger
getObservation	tools/pybrain/pybrain/rl/environments/classic/mountaincar.py	/^    def getObservation(self):    $/;"	m	class:MountainCar
getObservation	tools/pybrain/pybrain/rl/environments/classic/xor.py	/^    def getObservation(self):$/;"	m	class:XORChainTask
getObservation	tools/pybrain/pybrain/rl/environments/classic/xor.py	/^    def getObservation(self):$/;"	m	class:XORTask
getObservation	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^    def getObservation(self):$/;"	m	class:NoRewardTask
getObservation	tools/pybrain/pybrain/rl/environments/mazes/tasks/cheesemaze.py	/^    def getObservation(self):$/;"	m	class:CheeseMaze
getObservation	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze4x3.py	/^    def getObservation(self):$/;"	m	class:FourByThreeMaze
getObservation	tools/pybrain/pybrain/rl/environments/mazes/tasks/mdp.py	/^    def getObservation(self):$/;"	m	class:MDPMazeTask
getObservation	tools/pybrain/pybrain/rl/environments/mazes/tasks/shuttle.py	/^    def getObservation(self):$/;"	m	class:ShuttleDocking
getObservation	tools/pybrain/pybrain/rl/environments/mazes/tasks/tiger.py	/^    def getObservation(self):$/;"	m	class:TigerTask
getObservation	tools/pybrain/pybrain/rl/environments/mazes/tasks/tmaze.py	/^    def getObservation(self):$/;"	m	class:TMaze
getObservation	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def getObservation(self):$/;"	m	class:CCRLPointTask
getObservation	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def getObservation(self):$/;"	m	class:CCRLPointVarTask
getObservation	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def getObservation(self):$/;"	m	class:CCRLTask
getObservation	tools/pybrain/pybrain/rl/environments/simple/tasks.py	/^    def getObservation(self):$/;"	m	class:MinimizeTask
getObservation	tools/pybrain/pybrain/rl/environments/task.py	/^    def getObservation(self):$/;"	m	class:Task
getObservationDimension	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^extern unsigned int getObservationDimension()$/;"	f
getObservationDimension	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^extern unsigned int getObservationDimension()$/;"	f
getOutputConnection	pybrain/supervised/evolino/networkwrapper.py	/^    def getOutputConnection(self):$/;"	m	class:NetworkWrapper
getOutputConnection	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def getOutputConnection(self):$/;"	m	class:NetworkWrapper
getOutputLayer	pybrain/supervised/evolino/networkwrapper.py	/^    def getOutputLayer(self):$/;"	m	class:NetworkWrapper
getOutputLayer	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def getOutputLayer(self):$/;"	m	class:NetworkWrapper
getOutputWeightMatrix	pybrain/structure/modules/evolinonetwork.py	/^    def getOutputWeightMatrix(self):$/;"	m	class:EvolinoNetwork
getOutputWeightMatrix	pybrain/supervised/evolino/networkwrapper.py	/^    def getOutputWeightMatrix(self):$/;"	m	class:EvolinoNetwork
getOutputWeightMatrix	pybrain/supervised/evolino/networkwrapper.py	/^    def getOutputWeightMatrix(self):$/;"	m	class:NetworkWrapper
getOutputWeightMatrix	tools/pybrain/pybrain/structure/modules/evolinonetwork.py	/^    def getOutputWeightMatrix(self):$/;"	m	class:EvolinoNetwork
getOutputWeightMatrix	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def getOutputWeightMatrix(self):$/;"	m	class:EvolinoNetwork
getOutputWeightMatrix	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def getOutputWeightMatrix(self):$/;"	m	class:NetworkWrapper
getPain	pybrain/rl/environments/flexcube/tasks.py	/^    def getPain(self):$/;"	m	class:NoRewardTask
getPain	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^    def getPain(self):$/;"	m	class:NoRewardTask
getPassList	pybrain/rl/environments/ode/tools/xodetools.py	/^    def getPassList(self):$/;"	m	class:XODEfile
getPassList	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def getPassList(self):$/;"	m	class:XODEfile
getPerformances	pybrain/tools/gridsearch.py	/^    def getPerformances(self):$/;"	m	class:GridSearch2D
getPerformances	tools/pybrain/pybrain/tools/gridsearch.py	/^    def getPerformances(self):$/;"	m	class:GridSearch2D
getPoleAngles	pybrain/rl/environments/cartpole/cartpole.py	/^    def getPoleAngles(self):$/;"	m	class:CartPoleEnvironment
getPoleAngles	pybrain/rl/environments/cartpole/cartpole.py	/^    def getPoleAngles(self):$/;"	m	class:CartPoleLinEnvironment
getPoleAngles	pybrain/rl/environments/cartpole/doublepole.py	/^    def getPoleAngles(self):$/;"	m	class:DoublePoleEnvironment
getPoleAngles	pybrain/rl/environments/cartpole/nonmarkovdoublepole.py	/^    def getPoleAngles(self):$/;"	m	class:NonMarkovDoublePoleEnvironment
getPoleAngles	tools/pybrain/pybrain/rl/environments/cartpole/cartpole.py	/^    def getPoleAngles(self):$/;"	m	class:CartPoleEnvironment
getPoleAngles	tools/pybrain/pybrain/rl/environments/cartpole/cartpole.py	/^    def getPoleAngles(self):$/;"	m	class:CartPoleLinEnvironment
getPoleAngles	tools/pybrain/pybrain/rl/environments/cartpole/doublepole.py	/^    def getPoleAngles(self):$/;"	m	class:DoublePoleEnvironment
getPoleAngles	tools/pybrain/pybrain/rl/environments/cartpole/nonmarkovdoublepole.py	/^    def getPoleAngles(self):$/;"	m	class:NonMarkovDoublePoleEnvironment
getPossibleParameters	pybrain/tools/rankingfunctions.py	/^    def getPossibleParameters(self, numberOfSamples):$/;"	m	class:TopLinearRanking
getPossibleParameters	tools/pybrain/pybrain/tools/rankingfunctions.py	/^    def getPossibleParameters(self, numberOfSamples):$/;"	m	class:TopLinearRanking
getR	pybrain/rl/environments/cartpole/fast_version/cartpolewrap.pyx	/^def getR():$/;"	f
getR	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpolewrap.pyx	/^def getR():$/;"	f
getRenderInterface	pybrain/rl/environments/serverinterface.py	/^    def getRenderInterface(self):$/;"	m	class:GraphicalEnvironment
getRenderInterface	tools/pybrain/pybrain/rl/environments/serverinterface.py	/^    def getRenderInterface(self):$/;"	m	class:GraphicalEnvironment
getRenderer	pybrain/rl/environments/graphical.py	/^    def getRenderer(self):$/;"	m	class:GraphicalEnvironment
getRenderer	tools/pybrain/pybrain/rl/environments/graphical.py	/^    def getRenderer(self):$/;"	m	class:GraphicalEnvironment
getReward	pybrain/rl/environments/cartpole/balancetask.py	/^    def getReward(self):$/;"	m	class:BalanceTask
getReward	pybrain/rl/environments/cartpole/balancetask.py	/^    def getReward(self):$/;"	m	class:DiscreteBalanceTask
getReward	pybrain/rl/environments/cartpole/balancetask.py	/^    def getReward(self):$/;"	m	class:DiscreteBalanceTaskRBF
getReward	pybrain/rl/environments/cartpole/balancetask.py	/^    def getReward(self):$/;"	m	class:DiscreteNoHelpTask
getReward	pybrain/rl/environments/cartpole/balancetask.py	/^    def getReward(self):$/;"	m	class:EasyBalanceTask
getReward	pybrain/rl/environments/cartpole/balancetask.py	/^    def getReward(self):$/;"	m	class:JustBalanceTask
getReward	pybrain/rl/environments/cartpole/balancetask.py	/^    def getReward(self):$/;"	m	class:LinearizedBalanceTask
getReward	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^double getReward()$/;"	f
getReward	pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^    def getReward(self):$/;"	m	class:FastCartPoleTask
getReward	pybrain/rl/environments/cartpole/fast_version/cartpolewrap.pyx	/^    cdef double getReward()$/;"	f
getReward	pybrain/rl/environments/classic/acrobot.py	/^    def getReward(self):$/;"	m	class:AcrobotTask
getReward	pybrain/rl/environments/classic/mountaincar.py	/^    def getReward(self):$/;"	m	class:MountainCar
getReward	pybrain/rl/environments/classic/xor.py	/^    def getReward(self):$/;"	m	class:XORTask
getReward	pybrain/rl/environments/flexcube/tasks.py	/^    def getReward(self):$/;"	m	class:JumpTask
getReward	pybrain/rl/environments/flexcube/tasks.py	/^    def getReward(self):$/;"	m	class:NoRewardTask
getReward	pybrain/rl/environments/flexcube/tasks.py	/^    def getReward(self):$/;"	m	class:TargetTask
getReward	pybrain/rl/environments/flexcube/tasks.py	/^    def getReward(self):$/;"	m	class:WalkDirectionTask
getReward	pybrain/rl/environments/flexcube/tasks.py	/^    def getReward(self):$/;"	m	class:WalkTask
getReward	pybrain/rl/environments/mazes/tasks/maze.py	/^    def getReward(self):$/;"	m	class:MazeTask
getReward	pybrain/rl/environments/mazes/tasks/maze4x3.py	/^    def getReward(self):$/;"	m	class:FourByThreeMaze
getReward	pybrain/rl/environments/mazes/tasks/mdp.py	/^    def getReward(self):$/;"	m	class:MDPMazeTask
getReward	pybrain/rl/environments/mazes/tasks/tiger.py	/^    def getReward(self):$/;"	m	class:TigerTask
getReward	pybrain/rl/environments/mazes/tasks/tmaze.py	/^    def getReward(self):$/;"	m	class:TMaze
getReward	pybrain/rl/environments/ode/tasks/acrobot.py	/^    def getReward(self):$/;"	m	class:GradualRewardTask
getReward	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def getReward(self):$/;"	m	class:CCRLGlasTask
getReward	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def getReward(self):$/;"	m	class:CCRLGlasVarTask
getReward	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def getReward(self):$/;"	m	class:CCRLPlateTask
getReward	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def getReward(self):$/;"	m	class:CCRLPointTask
getReward	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def getReward(self):$/;"	m	class:CCRLPointVarTask
getReward	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def getReward(self):$/;"	m	class:CCRLTask
getReward	pybrain/rl/environments/ode/tasks/johnnie.py	/^    def getReward(self):$/;"	m	class:JumpingTask
getReward	pybrain/rl/environments/ode/tasks/johnnie.py	/^    def getReward(self):$/;"	m	class:StandingTask
getReward	pybrain/rl/environments/ode/tasks/johnnie.py	/^    def getReward(self):$/;"	m	class:StandingUpTask
getReward	pybrain/rl/environments/shipsteer/northwardtask.py	/^    def getReward(self):$/;"	m	class:GoNorthwardTask
getReward	pybrain/rl/environments/simple/tasks.py	/^    def getReward(self):$/;"	m	class:MinimizeTask
getReward	pybrain/rl/environments/simplerace/simpleracetask.py	/^    def getReward(self):$/;"	m	class:SimpleraceTask
getReward	pybrain/rl/environments/task.py	/^    def getReward(self):$/;"	m	class:Task
getReward	pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^    def getReward(self):$/;"	m	class:CaptureGameTask
getReward	pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^    def getReward(self):$/;"	m	class:GomokuTask
getReward	task/RobotMotionTask.py	/^    def getReward(self):$/;"	m	class:RobotMotionTask
getReward	task/SimpleTemporalLogic.py	/^    def getReward(self):$/;"	m	class:SimpleTemporalLogic
getReward	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    def getReward(self):$/;"	m	class:BalanceTask
getReward	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    def getReward(self):$/;"	m	class:DiscreteBalanceTask
getReward	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    def getReward(self):$/;"	m	class:DiscreteBalanceTaskRBF
getReward	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    def getReward(self):$/;"	m	class:DiscreteNoHelpTask
getReward	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    def getReward(self):$/;"	m	class:EasyBalanceTask
getReward	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    def getReward(self):$/;"	m	class:JustBalanceTask
getReward	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    def getReward(self):$/;"	m	class:LinearizedBalanceTask
getReward	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^double getReward()$/;"	f
getReward	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^    def getReward(self):$/;"	m	class:FastCartPoleTask
getReward	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpolewrap.pyx	/^    cdef double getReward()$/;"	f
getReward	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    def getReward(self):$/;"	m	class:AcrobotTask
getReward	tools/pybrain/pybrain/rl/environments/classic/mountaincar.py	/^    def getReward(self):$/;"	m	class:MountainCar
getReward	tools/pybrain/pybrain/rl/environments/classic/xor.py	/^    def getReward(self):$/;"	m	class:XORTask
getReward	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^    def getReward(self):$/;"	m	class:JumpTask
getReward	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^    def getReward(self):$/;"	m	class:NoRewardTask
getReward	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^    def getReward(self):$/;"	m	class:TargetTask
getReward	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^    def getReward(self):$/;"	m	class:WalkDirectionTask
getReward	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^    def getReward(self):$/;"	m	class:WalkTask
getReward	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze.py	/^    def getReward(self):$/;"	m	class:MazeTask
getReward	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze4x3.py	/^    def getReward(self):$/;"	m	class:FourByThreeMaze
getReward	tools/pybrain/pybrain/rl/environments/mazes/tasks/mdp.py	/^    def getReward(self):$/;"	m	class:MDPMazeTask
getReward	tools/pybrain/pybrain/rl/environments/mazes/tasks/tiger.py	/^    def getReward(self):$/;"	m	class:TigerTask
getReward	tools/pybrain/pybrain/rl/environments/mazes/tasks/tmaze.py	/^    def getReward(self):$/;"	m	class:TMaze
getReward	tools/pybrain/pybrain/rl/environments/ode/tasks/acrobot.py	/^    def getReward(self):$/;"	m	class:GradualRewardTask
getReward	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def getReward(self):$/;"	m	class:CCRLGlasTask
getReward	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def getReward(self):$/;"	m	class:CCRLGlasVarTask
getReward	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def getReward(self):$/;"	m	class:CCRLPlateTask
getReward	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def getReward(self):$/;"	m	class:CCRLPointTask
getReward	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def getReward(self):$/;"	m	class:CCRLPointVarTask
getReward	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def getReward(self):$/;"	m	class:CCRLTask
getReward	tools/pybrain/pybrain/rl/environments/ode/tasks/johnnie.py	/^    def getReward(self):$/;"	m	class:JumpingTask
getReward	tools/pybrain/pybrain/rl/environments/ode/tasks/johnnie.py	/^    def getReward(self):$/;"	m	class:StandingTask
getReward	tools/pybrain/pybrain/rl/environments/ode/tasks/johnnie.py	/^    def getReward(self):$/;"	m	class:StandingUpTask
getReward	tools/pybrain/pybrain/rl/environments/shipsteer/northwardtask.py	/^    def getReward(self):$/;"	m	class:GoNorthwardTask
getReward	tools/pybrain/pybrain/rl/environments/simple/tasks.py	/^    def getReward(self):$/;"	m	class:MinimizeTask
getReward	tools/pybrain/pybrain/rl/environments/simplerace/simpleracetask.py	/^    def getReward(self):$/;"	m	class:SimpleraceTask
getReward	tools/pybrain/pybrain/rl/environments/task.py	/^    def getReward(self):$/;"	m	class:Task
getReward	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^    def getReward(self):$/;"	m	class:CaptureGameTask
getReward	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^    def getReward(self):$/;"	m	class:GomokuTask
getSample	pybrain/datasets/supervised.py	/^    def getSample(self, index=None):$/;"	m	class:SupervisedDataSet
getSample	pybrain/datasets/unsupervised.py	/^    def getSample(self, index):$/;"	m	class:UnsupervisedDataSet
getSample	pybrain/supervised/evolino/variate.py	/^    def getSample(self, min_val=None, max_val=None):$/;"	m	class:UniformVariate
getSample	pybrain/supervised/evolino/variate.py	/^    def getSample(self, x0=None, alpha=None):$/;"	m	class:CauchyVariate
getSample	pybrain/supervised/evolino/variate.py	/^    def getSample(self, x0=None, alpha=None):$/;"	m	class:GaussianVariate
getSample	pybrain/tools/mixtures/mixtureofgaussian.py	/^    def getSample(self, dm="max"):$/;"	m	class:MixtureOfGaussians
getSample	pybrain/tools/mixtures/mogpuremax.py	/^    def getSample(self):$/;"	m	class:MixtureOfGaussians
getSample	tools/pybrain/pybrain/datasets/supervised.py	/^    def getSample(self, index=None):$/;"	m	class:SupervisedDataSet
getSample	tools/pybrain/pybrain/datasets/unsupervised.py	/^    def getSample(self, index):$/;"	m	class:UnsupervisedDataSet
getSample	tools/pybrain/pybrain/supervised/evolino/variate.py	/^    def getSample(self, min_val=None, max_val=None):$/;"	m	class:UniformVariate
getSample	tools/pybrain/pybrain/supervised/evolino/variate.py	/^    def getSample(self, x0=None, alpha=None):$/;"	m	class:CauchyVariate
getSample	tools/pybrain/pybrain/supervised/evolino/variate.py	/^    def getSample(self, x0=None, alpha=None):$/;"	m	class:GaussianVariate
getSample	tools/pybrain/pybrain/tools/mixtures/mixtureofgaussian.py	/^    def getSample(self, dm="max"):$/;"	m	class:MixtureOfGaussians
getSample	tools/pybrain/pybrain/tools/mixtures/mogpuremax.py	/^    def getSample(self):$/;"	m	class:MixtureOfGaussians
getSensor	pybrain/rl/environments/flexcube/sensors.py	/^    def getSensor(self):$/;"	m	class:DistToOrigin
getSensor	pybrain/rl/environments/flexcube/sensors.py	/^    def getSensor(self):$/;"	m	class:EdgesReal
getSensor	pybrain/rl/environments/flexcube/sensors.py	/^    def getSensor(self):$/;"	m	class:EdgesSumReal
getSensor	pybrain/rl/environments/flexcube/sensors.py	/^    def getSensor(self):$/;"	m	class:EdgesTarget
getSensor	pybrain/rl/environments/flexcube/sensors.py	/^    def getSensor(self):$/;"	m	class:Sensors
getSensor	pybrain/rl/environments/flexcube/sensors.py	/^    def getSensor(self):$/;"	m	class:Target
getSensor	pybrain/rl/environments/flexcube/sensors.py	/^    def getSensor(self):$/;"	m	class:Time
getSensor	pybrain/rl/environments/flexcube/sensors.py	/^    def getSensor(self):$/;"	m	class:VerticesContact
getSensor	pybrain/rl/environments/flexcube/sensors.py	/^    def getSensor(self):$/;"	m	class:VerticesMinHight
getSensor	pybrain/rl/environments/flexcube/sensors.py	/^    def getSensor(self):$/;"	m	class:defaultSensor
getSensor	tools/pybrain/pybrain/rl/environments/flexcube/sensors.py	/^    def getSensor(self):$/;"	m	class:DistToOrigin
getSensor	tools/pybrain/pybrain/rl/environments/flexcube/sensors.py	/^    def getSensor(self):$/;"	m	class:EdgesReal
getSensor	tools/pybrain/pybrain/rl/environments/flexcube/sensors.py	/^    def getSensor(self):$/;"	m	class:EdgesSumReal
getSensor	tools/pybrain/pybrain/rl/environments/flexcube/sensors.py	/^    def getSensor(self):$/;"	m	class:EdgesTarget
getSensor	tools/pybrain/pybrain/rl/environments/flexcube/sensors.py	/^    def getSensor(self):$/;"	m	class:Sensors
getSensor	tools/pybrain/pybrain/rl/environments/flexcube/sensors.py	/^    def getSensor(self):$/;"	m	class:Target
getSensor	tools/pybrain/pybrain/rl/environments/flexcube/sensors.py	/^    def getSensor(self):$/;"	m	class:Time
getSensor	tools/pybrain/pybrain/rl/environments/flexcube/sensors.py	/^    def getSensor(self):$/;"	m	class:VerticesContact
getSensor	tools/pybrain/pybrain/rl/environments/flexcube/sensors.py	/^    def getSensor(self):$/;"	m	class:VerticesMinHight
getSensor	tools/pybrain/pybrain/rl/environments/flexcube/sensors.py	/^    def getSensor(self):$/;"	m	class:defaultSensor
getSensorByName	pybrain/rl/environments/ode/environment.py	/^    def getSensorByName(self, name):$/;"	m	class:ODEEnvironment
getSensorByName	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def getSensorByName(self, name):$/;"	m	class:ODEEnvironment
getSensorNames	pybrain/rl/environments/ode/environment.py	/^    def getSensorNames(self):$/;"	m	class:ODEEnvironment
getSensorNames	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def getSensorNames(self):$/;"	m	class:ODEEnvironment
getSensors	pybrain/rl/environments/cartpole/cartpole.py	/^    def getSensors(self):$/;"	m	class:CartPoleEnvironment
getSensors	pybrain/rl/environments/cartpole/cartpole.py	/^    def getSensors(self):$/;"	m	class:CartPoleLinEnvironment
getSensors	pybrain/rl/environments/cartpole/doublepole.py	/^    def getSensors(self):$/;"	m	class:DoublePoleEnvironment
getSensors	pybrain/rl/environments/cartpole/nonmarkovdoublepole.py	/^    def getSensors(self):$/;"	m	class:NonMarkovDoublePoleEnvironment
getSensors	pybrain/rl/environments/cartpole/nonmarkovpole.py	/^    def getSensors(self):$/;"	m	class:NonMarkovPoleEnvironment
getSensors	pybrain/rl/environments/environment.py	/^    def getSensors(self):$/;"	m	class:Environment
getSensors	pybrain/rl/environments/flexcube/environment.py	/^    def getSensors(self):$/;"	m	class:FlexCubeEnvironment
getSensors	pybrain/rl/environments/functions/function.py	/^    def getSensors(self):$/;"	m	class:FunctionEnvironment
getSensors	pybrain/rl/environments/mazes/maze.py	/^    def getSensors(self):$/;"	m	class:Maze
getSensors	pybrain/rl/environments/mazes/polarmaze.py	/^    def getSensors(self):$/;"	m	class:PolarMaze
getSensors	pybrain/rl/environments/ode/environment.py	/^    def getSensors(self):$/;"	m	class:ODEEnvironment
getSensors	pybrain/rl/environments/ode/tools/xodetools.py	/^    def getSensors(self):$/;"	m	class:XODEfinger
getSensors	pybrain/rl/environments/shipsteer/shipsteer.py	/^    def getSensors(self):$/;"	m	class:ShipSteeringEnvironment
getSensors	pybrain/rl/environments/simple/environment.py	/^    def getSensors(self):$/;"	m	class:SimpleEnvironment
getSensors	pybrain/rl/environments/simplerace/simpleracetcp.py	/^    def getSensors(self):$/;"	m	class:SimpleraceEnvironment
getSensors	pybrain/rl/environments/twoplayergames/capturegame.py	/^    def getSensors(self):$/;"	m	class:CaptureGame
getSensors	pybrain/rl/environments/twoplayergames/gomoku.py	/^    def getSensors(self):$/;"	m	class:GomokuGame
getSensors	tools/pybrain/pybrain/rl/environments/cartpole/cartpole.py	/^    def getSensors(self):$/;"	m	class:CartPoleEnvironment
getSensors	tools/pybrain/pybrain/rl/environments/cartpole/cartpole.py	/^    def getSensors(self):$/;"	m	class:CartPoleLinEnvironment
getSensors	tools/pybrain/pybrain/rl/environments/cartpole/doublepole.py	/^    def getSensors(self):$/;"	m	class:DoublePoleEnvironment
getSensors	tools/pybrain/pybrain/rl/environments/cartpole/nonmarkovdoublepole.py	/^    def getSensors(self):$/;"	m	class:NonMarkovDoublePoleEnvironment
getSensors	tools/pybrain/pybrain/rl/environments/cartpole/nonmarkovpole.py	/^    def getSensors(self):$/;"	m	class:NonMarkovPoleEnvironment
getSensors	tools/pybrain/pybrain/rl/environments/environment.py	/^    def getSensors(self):$/;"	m	class:Environment
getSensors	tools/pybrain/pybrain/rl/environments/flexcube/environment.py	/^    def getSensors(self):$/;"	m	class:FlexCubeEnvironment
getSensors	tools/pybrain/pybrain/rl/environments/functions/function.py	/^    def getSensors(self):$/;"	m	class:FunctionEnvironment
getSensors	tools/pybrain/pybrain/rl/environments/mazes/maze.py	/^    def getSensors(self):$/;"	m	class:Maze
getSensors	tools/pybrain/pybrain/rl/environments/mazes/polarmaze.py	/^    def getSensors(self):$/;"	m	class:PolarMaze
getSensors	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def getSensors(self):$/;"	m	class:ODEEnvironment
getSensors	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def getSensors(self):$/;"	m	class:XODEfinger
getSensors	tools/pybrain/pybrain/rl/environments/shipsteer/shipsteer.py	/^    def getSensors(self):$/;"	m	class:ShipSteeringEnvironment
getSensors	tools/pybrain/pybrain/rl/environments/simple/environment.py	/^    def getSensors(self):$/;"	m	class:SimpleEnvironment
getSensors	tools/pybrain/pybrain/rl/environments/simplerace/simpleracetcp.py	/^    def getSensors(self):$/;"	m	class:SimpleraceEnvironment
getSensors	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    def getSensors(self):$/;"	m	class:CaptureGame
getSensors	tools/pybrain/pybrain/rl/environments/twoplayergames/gomoku.py	/^    def getSensors(self):$/;"	m	class:GomokuGame
getSequence	pybrain/datasets/sequential.py	/^    def getSequence(self, index):$/;"	m	class:SequentialDataSet
getSequence	tools/pybrain/pybrain/datasets/sequential.py	/^    def getSequence(self, index):$/;"	m	class:SequentialDataSet
getSequenceClass	pybrain/datasets/classification.py	/^    def getSequenceClass(self, index=None):$/;"	m	class:SequenceClassificationDataSet
getSequenceClass	tools/pybrain/pybrain/datasets/classification.py	/^    def getSequenceClass(self, index=None):$/;"	m	class:SequenceClassificationDataSet
getSequenceEnds	pybrain/tools/validation.py	/^    def getSequenceEnds(cls, dataset):$/;"	m	class:SequenceHelper
getSequenceEnds	tools/pybrain/pybrain/tools/validation.py	/^    def getSequenceEnds(cls, dataset):$/;"	m	class:SequenceHelper
getSequenceEndsImportance	pybrain/tools/validation.py	/^    def getSequenceEndsImportance(cls, dataset):$/;"	m	class:SequenceHelper
getSequenceEndsImportance	tools/pybrain/pybrain/tools/validation.py	/^    def getSequenceEndsImportance(cls, dataset):$/;"	m	class:SequenceHelper
getSequenceIterator	pybrain/datasets/sequential.py	/^    def getSequenceIterator(self, index):$/;"	m	class:SequentialDataSet
getSequenceIterator	tools/pybrain/pybrain/datasets/sequential.py	/^    def getSequenceIterator(self, index):$/;"	m	class:SequentialDataSet
getSequenceLength	pybrain/datasets/sequential.py	/^    def getSequenceLength(self, index):$/;"	m	class:SequentialDataSet
getSequenceLength	tools/pybrain/pybrain/datasets/sequential.py	/^    def getSequenceLength(self, index):$/;"	m	class:SequentialDataSet
getSequenceStarts	pybrain/tools/validation.py	/^    def getSequenceStarts(cls, dataset):$/;"	m	class:SequenceHelper
getSequenceStarts	tools/pybrain/pybrain/tools/validation.py	/^    def getSequenceStarts(cls, dataset):$/;"	m	class:SequenceHelper
getSortedIndividualList	pybrain/supervised/evolino/gpopulation.py	/^    def getSortedIndividualList(self):$/;"	m	class:SimplePopulation
getSortedIndividualList	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^    def getSortedIndividualList(self):$/;"	m	class:SimplePopulation
getSpeed	pybrain/rl/environments/shipsteer/shipsteer.py	/^    def getSpeed(self):$/;"	m	class:ShipSteeringEnvironment
getSpeed	tools/pybrain/pybrain/rl/environments/shipsteer/shipsteer.py	/^    def getSpeed(self):$/;"	m	class:ShipSteeringEnvironment
getStND	pybrain/tools/mixtures/mixtureofgaussian.py	/^    def getStND(self, x, mue=0.0, sig=1.0):$/;"	m	class:MixtureOfGaussians
getStND	pybrain/tools/mixtures/mogpuremax.py	/^    def getStND(self, x, mue=0.0, sig=1.0):$/;"	m	class:MixtureOfGaussians
getStND	tools/pybrain/pybrain/tools/mixtures/mixtureofgaussian.py	/^    def getStND(self, x, mue=0.0, sig=1.0):$/;"	m	class:MixtureOfGaussians
getStND	tools/pybrain/pybrain/tools/mixtures/mogpuremax.py	/^    def getStND(self, x, mue=0.0, sig=1.0):$/;"	m	class:MixtureOfGaussians
getSubDirectories	pybrain/tests/runtests.py	/^def getSubDirectories(testdir):$/;"	f
getSubDirectories	tools/pybrain/pybrain/tests/runtests.py	/^def getSubDirectories(testdir):$/;"	f
getSubIndividuals	pybrain/supervised/evolino/individual.py	/^    def getSubIndividuals(self):$/;"	m	class:EvolinoIndividual
getSubIndividuals	tools/pybrain/pybrain/supervised/evolino/individual.py	/^    def getSubIndividuals(self):$/;"	m	class:EvolinoIndividual
getSubPopulations	pybrain/supervised/evolino/population.py	/^    def getSubPopulations(self):$/;"	m	class:EvolinoPopulation
getSubPopulations	tools/pybrain/pybrain/supervised/evolino/population.py	/^    def getSubPopulations(self):$/;"	m	class:EvolinoPopulation
getSubtag	pybrain/rl/environments/ode/tools/xmltools.py	/^    def getSubtag(self, name=None):$/;"	m	class:XMLstruct
getSubtag	tools/pybrain/pybrain/rl/environments/ode/tools/xmltools.py	/^    def getSubtag(self, name=None):$/;"	m	class:XMLstruct
getSumOverSequences	pybrain/datasets/reinforcement.py	/^    def getSumOverSequences(self, field):$/;"	m	class:ReinforcementDataSet
getSumOverSequences	tools/pybrain/pybrain/datasets/reinforcement.py	/^    def getSumOverSequences(self, field):$/;"	m	class:ReinforcementDataSet
getTargets	pybrain/tools/svmdata.py	/^    def getTargets(self):$/;"	m	class:SVMData
getTargets	tools/pybrain/pybrain/tools/svmdata.py	/^    def getTargets(self):$/;"	m	class:SVMData
getTotalReward	pybrain/rl/environments/episodic.py	/^    def getTotalReward(self):$/;"	m	class:EpisodicTask
getTotalReward	pybrain/rl/environments/simplerace/simpleracetask.py	/^    def getTotalReward(self):$/;"	m	class:SimpleraceTask
getTotalReward	tools/pybrain/pybrain/rl/environments/episodic.py	/^    def getTotalReward(self):$/;"	m	class:EpisodicTask
getTotalReward	tools/pybrain/pybrain/rl/environments/simplerace/simpleracetask.py	/^    def getTotalReward(self):$/;"	m	class:SimpleraceTask
getValue	pybrain/rl/environments/ode/tools/configgrab.py	/^    def getValue(self, name):$/;"	m	class:ConfigGrabber
getValue	pybrain/rl/learners/valuebased/interface.py	/^    def getValue(self, state, action):$/;"	m	class:ActionValueNetwork
getValue	pybrain/structure/modules/table.py	/^    def getValue(self, row, column):$/;"	m	class:Table
getValue	tools/pybrain/pybrain/rl/environments/ode/tools/configgrab.py	/^    def getValue(self, name):$/;"	m	class:ConfigGrabber
getValue	tools/pybrain/pybrain/rl/learners/valuebased/interface.py	/^    def getValue(self, state, action):$/;"	m	class:ActionValueNetwork
getValue	tools/pybrain/pybrain/structure/modules/table.py	/^    def getValue(self, row, column):$/;"	m	class:Table
getValues	pybrain/rl/environments/ode/sensors.py	/^    def getValues(self):$/;"	m	class:Sensor
getValues	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def getValues(self):$/;"	m	class:Sensor
getVectorFormat	pybrain/datasets/dataset.py	/^    def getVectorFormat(self):$/;"	m	class:DataSet
getVectorFormat	tools/pybrain/pybrain/datasets/dataset.py	/^    def getVectorFormat(self):$/;"	m	class:DataSet
getWinner	pybrain/rl/environments/twoplayergames/twoplayergame.py	/^    def getWinner(self):$/;"	m	class:TwoPlayerGame
getWinner	tools/pybrain/pybrain/rl/environments/twoplayergames/twoplayergame.py	/^    def getWinner(self):$/;"	m	class:TwoPlayerGame
getWorstIndividuals	pybrain/supervised/evolino/gpopulation.py	/^    def getWorstIndividuals(self, n):$/;"	m	class:SimplePopulation
getWorstIndividuals	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^    def getWorstIndividuals(self, n):$/;"	m	class:SimplePopulation
getXODERoot	pybrain/rl/environments/ode/environment.py	/^    def getXODERoot(self):$/;"	m	class:ODEEnvironment
getXODERoot	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def getXODERoot(self):$/;"	m	class:ODEEnvironment
get_theta	policy/BoltzmanAC.py	/^    def get_theta(self): return self._params$/;"	m	class:BoltzmanPolicy
gini	pybrain/tools/rankingfunctions.py	/^    gini = 0.1$/;"	v	class:SmoothGiniRanking
gini	tools/pybrain/pybrain/tools/rankingfunctions.py	/^    gini = 0.1$/;"	v	class:SmoothGiniRanking
giveHandicap	pybrain/rl/environments/twoplayergames/capturegame.py	/^    def giveHandicap(self, h, color=BLACK):$/;"	m	class:CaptureGame
giveHandicap	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    def giveHandicap(self, h, color=BLACK):$/;"	m	class:CaptureGame
giveReward	agents/HessianACAgent.py	/^    def giveReward(self, r):$/;"	m	class:HessianACAgent
giveReward	agents/LSTDACAgent.py	/^    def giveReward(self, r):$/;"	m	class:LSTDACAgent
giveReward	pybrain/rl/agents/agent.py	/^    def giveReward(self, r):$/;"	m	class:Agent
giveReward	pybrain/rl/agents/logging.py	/^    def giveReward(self, r):$/;"	m	class:LoggingAgent
giveReward	pybrain/tests/unittests/tools/test_rlgluebridge.py	/^    def giveReward(self, r):$/;"	m	class:PseudoPybrainAgent
giveReward	pybrain/tools/rlgluebridge.py	/^    def giveReward(self, reward):$/;"	m	class:BenchmarkingAgent
giveReward	tools/pybrain/examples/rl/environments/linear_fa/xor.py	/^    def giveReward(self, r):$/;"	m	class:LinFA_QAgent
giveReward	tools/pybrain/pybrain/rl/agents/agent.py	/^    def giveReward(self, r):$/;"	m	class:Agent
giveReward	tools/pybrain/pybrain/rl/agents/logging.py	/^    def giveReward(self, r):$/;"	m	class:LoggingAgent
giveReward	tools/pybrain/pybrain/tests/unittests/tools/test_rlgluebridge.py	/^    def giveReward(self, r):$/;"	m	class:PseudoPybrainAgent
giveReward	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    def giveReward(self, reward):$/;"	m	class:BenchmarkingAgent
goDown	pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    def goDown(self, h):$/;"	m	class:HandicapCaptureTask
goDown	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    def goDown(self, h):$/;"	m	class:HandicapCaptureTask
goUp	pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    def goUp(self, h):$/;"	m	class:HandicapCaptureTask
goUp	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    def goUp(self, h):$/;"	m	class:HandicapCaptureTask
goal	pybrain/rl/environments/mazes/maze.py	/^    goal = None$/;"	v	class:Maze
goal	pybrain/rl/environments/mazes/tasks/cheesemaze.py	/^    goal = (1, 3)$/;"	v	class:CheeseMaze
goal	pybrain/rl/environments/mazes/tasks/maze.py	/^    goal = (1, 3)$/;"	v	class:TrivialMaze
goal	pybrain/rl/environments/mazes/tasks/maze.py	/^    goal = None$/;"	v	class:MazeTask
goal	pybrain/rl/environments/mazes/tasks/maze4x3.py	/^    goal = (3, 4)$/;"	v	class:FourByThreeMaze
goal	pybrain/rl/environments/mazes/tasks/maze89state.py	/^    goal = (2, 7)$/;"	v	class:EightyNineStateMaze
goal	pybrain/rl/environments/mazes/tasks/shuttle.py	/^    goal = (1, 5)$/;"	v	class:ShuttleDocking
goal	tools/pybrain/pybrain/rl/environments/mazes/maze.py	/^    goal = None$/;"	v	class:Maze
goal	tools/pybrain/pybrain/rl/environments/mazes/tasks/cheesemaze.py	/^    goal = (1, 3)$/;"	v	class:CheeseMaze
goal	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze.py	/^    goal = (1, 3)$/;"	v	class:TrivialMaze
goal	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze.py	/^    goal = None$/;"	v	class:MazeTask
goal	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze4x3.py	/^    goal = (3, 4)$/;"	v	class:FourByThreeMaze
goal	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze89state.py	/^    goal = (2, 7)$/;"	v	class:EightyNineStateMaze
goal	tools/pybrain/pybrain/rl/environments/mazes/tasks/shuttle.py	/^    goal = (1, 5)$/;"	v	class:ShuttleDocking
goalPos	pybrain/rl/environments/classic/mountaincar.py	/^    goalPos = 0.45$/;"	v	class:MountainCar
goalPos	tools/pybrain/pybrain/rl/environments/classic/mountaincar.py	/^    goalPos = 0.45$/;"	v	class:MountainCar
goalStates	examples/problem_settings.py	/^    goalStates = [ (4, 4) ]$/;"	v
goalStates	examples/problem_settings.py	/^    goalStates = [ [49, 0], [49, 49], [0, 49] ]$/;"	v
goalStates	settings.py	/^    goalStates = [ (4, 4) ]$/;"	v
goalStates	settings.py	/^    goalStates = [ [49, 0], [49, 49], [0, 49] ]$/;"	v
gotoSequence	pybrain/datasets/sequential.py	/^    def gotoSequence(self, index):$/;"	m	class:SequentialDataSet
gotoSequence	tools/pybrain/pybrain/datasets/sequential.py	/^    def gotoSequence(self, index):$/;"	m	class:SequentialDataSet
gp	pybrain/auxiliary/gaussprocess.py	/^    gp = GaussianProcess(indim=1, start= -3, stop=3, step=0.05)$/;"	v	class:GaussianProcess
gp	pybrain/auxiliary/gaussprocess.py	/^    gp = GaussianProcess(indim=2, start=0, stop=5, step=0.2)$/;"	v	class:GaussianProcess
gp	tools/pybrain/examples/unsupervised/gp.py	/^gp = GaussianProcess(indim=1, start=-3, stop=3, step=0.05)$/;"	v
gp	tools/pybrain/examples/unsupervised/gp.py	/^gp = GaussianProcess(indim=2, start=0, stop=5, step=0.25)$/;"	v
gp	tools/pybrain/pybrain/auxiliary/gaussprocess.py	/^    gp = GaussianProcess(indim=1, start= -3, stop=3, step=0.05)$/;"	v	class:GaussianProcess
gp	tools/pybrain/pybrain/auxiliary/gaussprocess.py	/^    gp = GaussianProcess(indim=2, start=0, stop=5, step=0.2)$/;"	v	class:GaussianProcess
gprime	pybrain/structure/modules/lstm.py	/^    gprime = lambda _, x: tanhPrime(x)$/;"	v	class:LSTMLayer
gprime	pybrain/structure/modules/mdlstm.py	/^    def gprime(self, x): return tanhPrime(x)$/;"	m	class:MDLSTMLayer
gprime	tools/pybrain/pybrain/structure/modules/lstm.py	/^    gprime = lambda _, x: tanhPrime(x)$/;"	v	class:LSTMLayer
gprime	tools/pybrain/pybrain/structure/modules/mdlstm.py	/^    def gprime(self, x): return tanhPrime(x)$/;"	m	class:MDLSTMLayer
gradientCheck	pybrain/tests/helpers.py	/^def gradientCheck(module, tolerance=0.0001, dataset=None):$/;"	f
gradientCheck	tools/pybrain/pybrain/tests/helpers.py	/^def gradientCheck(module, tolerance=0.0001, dataset=None):$/;"	f
graphColor	pybrain/tools/plotting/multiline.py	/^        (0.6, 0.6, 0.6)]$/;"	v	class:MultilinePlotter
graphColor	tools/pybrain/pybrain/tools/plotting/multiline.py	/^        (0.6, 0.6, 0.6)]$/;"	v	class:MultilinePlotter
gray2int	pybrain/utilities.py	/^def gray2int(g, size):$/;"	f
gray2int	tools/pybrain/pybrain/utilities.py	/^def gray2int(g, size):$/;"	f
greedy	pybrain/rl/agents/linearfa.py	/^    greedy = False$/;"	v	class:LinearFA_Agent
greedy	tools/pybrain/pybrain/rl/agents/linearfa.py	/^    greedy = False$/;"	v	class:LinearFA_Agent
greedyEpisode	pybrain/rl/learners/directsearch/rwr.py	/^    def greedyEpisode(self):$/;"	m	class:RWR
greedyEpisode	tools/pybrain/pybrain/rl/learners/directsearch/rwr.py	/^    def greedyEpisode(self):$/;"	m	class:RWR
greedyRuns	pybrain/rl/learners/directsearch/rwr.py	/^    greedyRuns = 20$/;"	v	class:RWR
greedyRuns	tools/pybrain/pybrain/rl/learners/directsearch/rwr.py	/^    greedyRuns = 20$/;"	v	class:RWR
greedySelection	pybrain/rl/environments/twoplayergames/capturegameplayers/moduledecision.py	/^    greedySelection = False$/;"	v	class:ModuleDecidingPlayer
greedySelection	pybrain/rl/environments/twoplayergames/gomokuplayers/moduledecision.py	/^    greedySelection = False$/;"	v	class:ModuleDecidingPlayer
greedySelection	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/moduledecision.py	/^    greedySelection = False$/;"	v	class:ModuleDecidingPlayer
greedySelection	tools/pybrain/pybrain/rl/environments/twoplayergames/gomokuplayers/moduledecision.py	/^    greedySelection = False$/;"	v	class:ModuleDecidingPlayer
gridSize	examples/problem_settings.py	/^    gridSize = (5, 5)$/;"	v
gridSize	examples/problem_settings.py	/^    gridSize = [50, 50]$/;"	v
gridSize	settings.py	/^    gridSize = (5, 5)$/;"	v
gridSize	settings.py	/^    gridSize = [50, 50]$/;"	v
griddata	tools/pybrain/docs/tutorials/fnn.py	/^griddata = ClassificationDataSet(2, 1, nb_classes=3)$/;"	v
h	pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    h = HandicapCaptureTask(4, opponentStart=False)$/;"	v	class:HandicapCaptureTask
h	pybrain/structure/modules/lstm.py	/^    h = lambda _, x: tanh(x)$/;"	v	class:LSTMLayer
h	pybrain/structure/modules/mdlstm.py	/^    def h(self, x): return tanh(x)$/;"	m	class:MDLSTMLayer
h	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    h = HandicapCaptureTask(4, opponentStart=False)$/;"	v	class:HandicapCaptureTask
h	tools/pybrain/pybrain/structure/modules/lstm.py	/^    h = lambda _, x: tanh(x)$/;"	v	class:LSTMLayer
h	tools/pybrain/pybrain/structure/modules/mdlstm.py	/^    def h(self, x): return tanh(x)$/;"	m	class:MDLSTMLayer
h1	pybrain/tools/plotting/ciaoplot.py	/^    h1 = x * 4$/;"	v	class:CiaoPlot
h1	tools/pybrain/pybrain/tools/plotting/ciaoplot.py	/^    h1 = x * 4$/;"	v	class:CiaoPlot
h2	pybrain/tools/plotting/ciaoplot.py	/^    h2 = x + 20 * sqrt(x)$/;"	v	class:CiaoPlot
h2	tools/pybrain/pybrain/tools/plotting/ciaoplot.py	/^    h2 = x + 20 * sqrt(x)$/;"	v	class:CiaoPlot
hallOfFameEvaluation	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    hallOfFameEvaluation = 0. # proportion of HoF evaluations in relative fitness$/;"	v	class:Coevolution
hallOfFameEvaluation	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    hallOfFameEvaluation = 0. # proportion of HoF evaluations in relative fitness$/;"	v	class:Coevolution
hasDefault	pybrain/tools/kwargsprocessor.py	/^    def hasDefault(self):$/;"	m	class:KWArgDsc
hasDefault	tools/pybrain/pybrain/tools/kwargsprocessor.py	/^    def hasDefault(self):$/;"	m	class:KWArgDsc
hasDerivatives	pybrain/structure/connections/shared.py	/^    hasDerivatives = True$/;"	v	class:MotherConnection
hasDerivatives	pybrain/structure/parametercontainer.py	/^    hasDerivatives = False$/;"	v	class:ParameterContainer
hasDerivatives	tools/pybrain/pybrain/structure/connections/shared.py	/^    hasDerivatives = True$/;"	v	class:MotherConnection
hasDerivatives	tools/pybrain/pybrain/structure/parametercontainer.py	/^    hasDerivatives = False$/;"	v	class:ParameterContainer
hasField	pybrain/datasets/dataset.py	/^    def hasField(self, label):$/;"	m	class:DataSet
hasField	tools/pybrain/pybrain/datasets/dataset.py	/^    def hasField(self, label):$/;"	m	class:DataSet
hasRenderInterface	pybrain/rl/environments/serverinterface.py	/^    def hasRenderInterface(self):$/;"	m	class:GraphicalEnvironment
hasRenderInterface	tools/pybrain/pybrain/rl/environments/serverinterface.py	/^    def hasRenderInterface(self):$/;"	m	class:GraphicalEnvironment
hasRenderer	pybrain/rl/environments/graphical.py	/^    def hasRenderer(self):$/;"	m	class:GraphicalEnvironment
hasRenderer	tools/pybrain/pybrain/rl/environments/graphical.py	/^    def hasRenderer(self):$/;"	m	class:GraphicalEnvironment
hasSubtag	pybrain/rl/environments/ode/tools/xmltools.py	/^    def hasSubtag(self, name=None):$/;"	m	class:XMLstruct
hasSubtag	tools/pybrain/pybrain/rl/environments/ode/tools/xmltools.py	/^    def hasSubtag(self, name=None):$/;"	m	class:XMLstruct
hash	task/SimpleTemporalLogic.py	/^    def hash(self, x):$/;"	m	class:SimpleTemporalLogic
hessianThetaTh	examples/problem_settings.py	/^hessianThetaTh = 0.1 # threshold to detemin whether to accept this hessian based update$/;"	v
hessianThetaTh	settings.py	/^hessianThetaTh = 0.1 # threshold to detemin whether to accept this hessian based update$/;"	v
hidden2out	tools/pybrain/docs/tutorials/networks.py	/^hidden2out = FullConnection(hiddenLayer, outLayer)$/;"	v
hiddenDim	pybrain/structure/networks/rbm.py	/^    def hiddenDim(self):$/;"	m	class:Rbm
hiddenDim	tools/pybrain/pybrain/structure/networks/rbm.py	/^    def hiddenDim(self):$/;"	m	class:Rbm
hiddenLayer	tools/pybrain/docs/tutorials/networks.py	/^hiddenLayer = SigmoidLayer(3)$/;"	v
hiddenUnits	tools/pybrain/examples/rl/environments/flexcube/flexcube_pgpe.py	/^hiddenUnits = 4$/;"	v
hiddenUnits	tools/pybrain/examples/rl/environments/flexcube/flexcube_spsa.py	/^hiddenUnits = 4$/;"	v
hiddenUnits	tools/pybrain/examples/rl/environments/ode/ccrl_glass_pgpe.py	/^hiddenUnits = 4$/;"	v
hiddenUnits	tools/pybrain/examples/rl/environments/ode/ccrl_plate_pgpe.py	/^hiddenUnits = 10$/;"	v
hiddenUnits	tools/pybrain/examples/rl/environments/ode/johnnie_pgpe.py	/^hiddenUnits = 4$/;"	v
hiddenUnits	tools/pybrain/examples/rl/environments/ode/johnnie_reinforce.py	/^hiddenUnits = 4$/;"	v
hiddensize	pybrain/structure/networks/bidirectional.py	/^    hiddensize = 5$/;"	v	class:BidirectionalNetwork
hiddensize	tools/pybrain/pybrain/structure/networks/bidirectional.py	/^    hiddensize = 5$/;"	v	class:BidirectionalNetwork
highlightstring	tools/pybrain/docs/html/_static/searchtools.js	/^    var highlightstring = '?highlight=' + $.urlencode(hlterms.join(" "));$/;"	v
hlterms	tools/pybrain/docs/html/_static/searchtools.js	/^    var hlterms = [];$/;"	v
hprime	pybrain/structure/modules/lstm.py	/^    hprime = lambda _, x: tanhPrime(x)$/;"	v	class:LSTMLayer
hprime	pybrain/structure/modules/mdlstm.py	/^    def hprime(self, x): return tanhPrime(x)$/;"	m	class:MDLSTMLayer
hprime	tools/pybrain/pybrain/structure/modules/lstm.py	/^    hprime = lambda _, x: tanhPrime(x)$/;"	v	class:LSTMLayer
hprime	tools/pybrain/pybrain/structure/modules/mdlstm.py	/^    def hprime(self, x): return tanhPrime(x)$/;"	m	class:MDLSTMLayer
hsize	pybrain/structure/networks/custom/capturegame.py	/^    hsize = 5$/;"	v	class:CaptureGameNetwork
hsize	pybrain/structure/networks/multidimensional.py	/^    hsize = 5$/;"	v	class:MultiDimensionalRNN
hsize	tools/pybrain/pybrain/structure/networks/custom/capturegame.py	/^    hsize = 5$/;"	v	class:CaptureGameNetwork
hsize	tools/pybrain/pybrain/structure/networks/multidimensional.py	/^    hsize = 5$/;"	v	class:MultiDimensionalRNN
html_last_updated_fmt	tools/pybrain/docs/sphinx/conf.py	/^html_last_updated_fmt = '%b %d, %Y'$/;"	v
html_logo	tools/pybrain/docs/sphinx/conf.py	/^html_logo = 'pics\/pybrain_logo.gif'$/;"	v
html_static_path	tools/pybrain/docs/sphinx/conf.py	/^html_static_path = ['_static']$/;"	v
html_style	tools/pybrain/docs/sphinx/conf.py	/^html_style = 'default.css'$/;"	v
htmlhelp_basename	tools/pybrain/docs/sphinx/conf.py	/^htmlhelp_basename = 'PyBraindoc'$/;"	v
i	examples/ENAC.py	/^i = -1$/;"	v
i	examples/ENAC_TL.py	/^i = -1$/;"	v
i	examples/LSTDAC.py	/^i = -1$/;"	v
i	examples/QLambda_LinFA.py	/^i = -1$/;"	v
i	examples/Q_LinFA.py	/^i = -1$/;"	v
i	examples/SARSA_TL.py	/^i = -1$/;"	v
i	main.py	/^    i = -1$/;"	v
ife1	pybrain/tests/optimizationtest.py	/^ife1 = fe(1)$/;"	v
ife1	tools/pybrain/pybrain/tests/optimizationtest.py	/^ife1 = fe(1)$/;"	v
ife100	pybrain/tests/optimizationtest.py	/^ife100 = fe(100)$/;"	v
ife100	tools/pybrain/pybrain/tests/optimizationtest.py	/^ife100 = fe(100)$/;"	v
ife2	pybrain/tests/optimizationtest.py	/^ife2 = fe(2)$/;"	v
ife2	tools/pybrain/pybrain/tests/optimizationtest.py	/^ife2 = fe(2)$/;"	v
images	pybrain/tools/datasets/mnist.py	/^def images(filename):$/;"	f
images	tools/pybrain/pybrain/tools/datasets/mnist.py	/^def images(filename):$/;"	f
importanceMixing	pybrain/auxiliary/importancemixing.py	/^def importanceMixing(oldpoints, oldpdf, newpdf, newdistr, forcedRefresh = 0.01):$/;"	f
importanceMixing	pybrain/optimization/distributionbased/ves.py	/^    importanceMixing = True$/;"	v	class:VanillaGradientEvolutionStrategies
importanceMixing	pybrain/optimization/distributionbased/xnes.py	/^    importanceMixing = False$/;"	v	class:XNES
importanceMixing	tools/pybrain/pybrain/auxiliary/importancemixing.py	/^def importanceMixing(oldpoints, oldpdf, newpdf, newdistr, forcedRefresh = 0.01):$/;"	f
importanceMixing	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    importanceMixing = True$/;"	v	class:VanillaGradientEvolutionStrategies
importanceMixing	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    importanceMixing = False$/;"	v	class:XNES
in2hidden	tools/pybrain/docs/tutorials/networks.py	/^in2hidden = FullConnection(inLayer, hiddenLayer)$/;"	v
inLayer	tools/pybrain/docs/tutorials/networks.py	/^inLayer = LinearLayer(2)$/;"	v
inParams	pybrain/structure/modules/mdrnnlayer.py	/^    def inParams(self):$/;"	m	class:MdrnnLayer
inParams	tools/pybrain/pybrain/structure/modules/mdrnnlayer.py	/^    def inParams(self):$/;"	m	class:MdrnnLayer
inblock	tools/pybrain/docs/code2tut.py	/^        inblock = False$/;"	v
inblock	tools/pybrain/docs/code2tut.py	/^        inblock = True$/;"	v
inblock	tools/pybrain/docs/code2tut.py	/^inblock = False$/;"	v
incStep	pybrain/rl/environments/flexcube/tasks.py	/^    def incStep(self):$/;"	m	class:NoRewardTask
incStep	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^    def incStep(self):$/;"	m	class:NoRewardTask
include_package_data	tools/pybrain/setup.py	/^    include_package_data=True,$/;"	v
indim	pybrain/rl/environments/cartpole/cartpole.py	/^    indim = 1$/;"	v	class:CartPoleEnvironment
indim	pybrain/rl/environments/cartpole/doublepole.py	/^    indim = 1$/;"	v	class:DoublePoleEnvironment
indim	pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^    indim = 1$/;"	v	class:FastCartPoleTask
indim	pybrain/rl/environments/environment.py	/^    indim = 0$/;"	v	class:Environment
indim	pybrain/rl/environments/functions/function.py	/^    def indim(self):$/;"	m	class:FunctionEnvironment
indim	pybrain/rl/environments/mazes/tasks/pomdp.py	/^    def indim(self):$/;"	m	class:POMDPTask
indim	pybrain/rl/environments/ode/environment.py	/^    def indim(self):$/;"	m	class:ODEEnvironment
indim	pybrain/rl/environments/shipsteer/shipsteer.py	/^    def indim(self):$/;"	m	class:ShipSteeringEnvironment
indim	pybrain/rl/environments/simplerace/simpleracetcp.py	/^    indim = 2$/;"	v	class:SimpleraceEnvironment
indim	pybrain/rl/environments/task.py	/^    def indim(self):$/;"	m	class:Task
indim	pybrain/rl/environments/twoplayergames/capturegame.py	/^    def indim(self):$/;"	m	class:CaptureGame
indim	pybrain/rl/environments/twoplayergames/gomoku.py	/^    def indim(self):$/;"	m	class:GomokuGame
indim	tools/pybrain/pybrain/rl/environments/cartpole/cartpole.py	/^    indim = 1$/;"	v	class:CartPoleEnvironment
indim	tools/pybrain/pybrain/rl/environments/cartpole/doublepole.py	/^    indim = 1$/;"	v	class:DoublePoleEnvironment
indim	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^    indim = 1$/;"	v	class:FastCartPoleTask
indim	tools/pybrain/pybrain/rl/environments/environment.py	/^    indim = 0$/;"	v	class:Environment
indim	tools/pybrain/pybrain/rl/environments/functions/function.py	/^    def indim(self):$/;"	m	class:FunctionEnvironment
indim	tools/pybrain/pybrain/rl/environments/mazes/tasks/pomdp.py	/^    def indim(self):$/;"	m	class:POMDPTask
indim	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def indim(self):$/;"	m	class:ODEEnvironment
indim	tools/pybrain/pybrain/rl/environments/shipsteer/shipsteer.py	/^    def indim(self):$/;"	m	class:ShipSteeringEnvironment
indim	tools/pybrain/pybrain/rl/environments/simplerace/simpleracetcp.py	/^    indim = 2$/;"	v	class:SimpleraceEnvironment
indim	tools/pybrain/pybrain/rl/environments/task.py	/^    def indim(self):$/;"	m	class:Task
indim	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    def indim(self):$/;"	m	class:CaptureGame
indim	tools/pybrain/pybrain/rl/environments/twoplayergames/gomoku.py	/^    def indim(self):$/;"	m	class:GomokuGame
inertia	pybrain/optimization/populationbased/pso.py	/^    inertia = 0.9$/;"	v	class:ParticleSwarmOptimizer
inertia	tools/pybrain/pybrain/optimization/populationbased/pso.py	/^    inertia = 0.9$/;"	v	class:ParticleSwarmOptimizer
iniState	examples/problem_settings.py	/^    iniState = (0, 0)$/;"	v
iniState	examples/problem_settings.py	/^    iniState = [0, 0]$/;"	v
iniState	settings.py	/^    iniState = (0, 0)$/;"	v
iniState	settings.py	/^    iniState = [0, 0]$/;"	v
iniTheta	examples/LSTDAC.py	/^        iniTheta = [0,0],$/;"	v
iniTheta	examples/problem_settings.py	/^iniTheta = [5, 5]$/;"	v
iniTheta	settings.py	/^iniTheta = [5, 5]$/;"	v
init	pybrain/auxiliary/gradientdescent.py	/^    def init(self, values):$/;"	m	class:GradientDescent
init	pybrain/auxiliary/gradientdescent.py	/^    def init(self, values):$/;"	m	class:IRpropPlus
init	pybrain/auxiliary/gradientdescent.py	/^    def init(self, values):$/;"	m	class:NaturalGradient
init	pybrain/rl/environments/cartpole/fast_version/cartpolewrap.pyx	/^def init(int markov_, int numPoles_, int maxsteps_):$/;"	f
init	tools/pybrain/pybrain/auxiliary/gradientdescent.py	/^    def init(self, values):$/;"	m	class:GradientDescent
init	tools/pybrain/pybrain/auxiliary/gradientdescent.py	/^    def init(self, values):$/;"	m	class:IRpropPlus
init	tools/pybrain/pybrain/auxiliary/gradientdescent.py	/^    def init(self, values):$/;"	m	class:NaturalGradient
init	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpolewrap.pyx	/^def init(int markov_, int numPoles_, int maxsteps_):$/;"	f
initCartPole	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^extern void initCartPole(int markov_, int numPoles_, int maxsteps_)	$/;"	f
initCartPole	pybrain/rl/environments/cartpole/fast_version/cartpolewrap.pyx	/^    cdef void initCartPole(int markov_, int numPoles_, int maxsteps_)$/;"	f
initCartPole	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^extern void initCartPole(int markov_, int numPoles_, int maxsteps_)	$/;"	f
initCartPole	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpolewrap.pyx	/^    cdef void initCartPole(int markov_, int numPoles_, int maxsteps_)$/;"	f
initCovariances	pybrain/optimization/distributionbased/fem.py	/^    initCovariances = None$/;"	v	class:FEM
initCovariances	pybrain/optimization/distributionbased/ves.py	/^    initCovariances = None$/;"	v	class:VanillaGradientEvolutionStrategies
initCovariances	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^    initCovariances = None$/;"	v	class:FEM
initCovariances	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    initCovariances = None$/;"	v	class:VanillaGradientEvolutionStrategies
initGraphics	pybrain/tools/neuralnets.py	/^    def initGraphics(self, ymax=10, xmax= -1):$/;"	m	class:NNtools
initGraphics	tools/pybrain/pybrain/tools/neuralnets.py	/^    def initGraphics(self, ymax=10, xmax= -1):$/;"	m	class:NNtools
initParams	pybrain/structure/connections/shared.py	/^    def initParams(self, *args): raise OwnershipViolation$/;"	m	class:SharedConnection
initParams	tools/pybrain/pybrain/structure/connections/shared.py	/^    def initParams(self, *args): raise OwnershipViolation$/;"	m	class:SharedConnection
initPopulation	pybrain/optimization/populationbased/evolution.py	/^    def initPopulation(self):$/;"	m	class:Evolution
initPopulation	pybrain/optimization/populationbased/ga.py	/^    def initPopulation(self):$/;"	m	class:GA
initPopulation	tools/pybrain/pybrain/optimization/populationbased/evolution.py	/^    def initPopulation(self):$/;"	m	class:Evolution
initPopulation	tools/pybrain/pybrain/optimization/populationbased/ga.py	/^    def initPopulation(self):$/;"	m	class:GA
initPos	pybrain/rl/environments/mazes/maze.py	/^    initPos = None$/;"	v	class:Maze
initPos	pybrain/rl/environments/mazes/tasks/maze.py	/^    initPos = None$/;"	v	class:MazeTask
initPos	pybrain/rl/environments/mazes/tasks/maze.py	/^    initPos = [(1, 1)]$/;"	v	class:TrivialMaze
initPos	pybrain/rl/environments/mazes/tasks/maze4x3.py	/^    initPos = [(1, 1), (1, 2), (1, 3), (2, 1), (3, 1), (3, 2), (2, 3), (3, 3), (1, 4)]$/;"	v	class:FourByThreeMaze
initPos	pybrain/rl/environments/mazes/tasks/shuttle.py	/^    initPos = [(1, 1)]$/;"	v	class:ShuttleDocking
initPos	tools/pybrain/pybrain/rl/environments/mazes/maze.py	/^    initPos = None$/;"	v	class:Maze
initPos	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze.py	/^    initPos = None$/;"	v	class:MazeTask
initPos	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze.py	/^    initPos = [(1, 1)]$/;"	v	class:TrivialMaze
initPos	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze4x3.py	/^    initPos = [(1, 1), (1, 2), (1, 3), (2, 1), (3, 1), (3, 2), (2, 3), (3, 3), (1, 4)]$/;"	v	class:FourByThreeMaze
initPos	tools/pybrain/pybrain/rl/environments/mazes/tasks/shuttle.py	/^    initPos = [(1, 1)]$/;"	v	class:ShuttleDocking
initRangeScaling	pybrain/optimization/populationbased/ga.py	/^    initRangeScaling = 10.$/;"	v	class:GA
initRangeScaling	tools/pybrain/pybrain/optimization/populationbased/ga.py	/^    initRangeScaling = 10.$/;"	v	class:GA
initStepSize	pybrain/optimization/distributionbased/cmaes.py	/^    initStepSize = 0.5$/;"	v	class:CMAES
initStepSize	tools/pybrain/pybrain/optimization/distributionbased/cmaes.py	/^    initStepSize = 0.5$/;"	v	class:CMAES
initVariance	pybrain/optimization/distributionbased/rank1.py	/^    initVariance = 1.$/;"	v	class:Rank1NES
initVariance	pybrain/optimization/distributionbased/snes.py	/^    initVariance = 1.$/;"	v	class:SNES
initVariance	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^    initVariance = 1.$/;"	v	class:Rank1NES
initVariance	tools/pybrain/pybrain/optimization/distributionbased/snes.py	/^    initVariance = 1.$/;"	v	class:SNES
init_GL	pybrain/rl/environments/flexcube/viewer.py	/^    def init_GL(self, pyWorld, x, y, height, width):$/;"	m	class:FlexCubeRenderer
init_GL	pybrain/rl/environments/ode/viewer.py	/^    def init_GL(self, width=800, height=600):$/;"	m	class:ODEViewer
init_GL	pybrain/rl/environments/shipsteer/viewer.py	/^    def init_GL(self, pyWorld, x, y, height, width):$/;"	m	class:FlexCubeRenderer
init_GL	tools/pybrain/pybrain/rl/environments/flexcube/viewer.py	/^    def init_GL(self, pyWorld, x, y, height, width):$/;"	m	class:FlexCubeRenderer
init_GL	tools/pybrain/pybrain/rl/environments/ode/viewer.py	/^    def init_GL(self, width=800, height=600):$/;"	m	class:ODEViewer
init_GL	tools/pybrain/pybrain/rl/environments/shipsteer/viewer.py	/^    def init_GL(self, pyWorld, x, y, height, width):$/;"	m	class:FlexCubeRenderer
init_exploration	pybrain/rl/agents/linearfa.py	/^    init_exploration = 0.1   # aka epsilon$/;"	v	class:LinearFA_Agent
init_exploration	tools/pybrain/pybrain/rl/agents/linearfa.py	/^    init_exploration = 0.1   # aka epsilon$/;"	v	class:LinearFA_Agent
init_temperature	pybrain/rl/agents/linearfa.py	/^    init_temperature = 1.$/;"	v	class:LinearFA_Agent
init_temperature	tools/pybrain/pybrain/rl/agents/linearfa.py	/^    init_temperature = 1.$/;"	v	class:LinearFA_Agent
initialFactorSigma	pybrain/optimization/distributionbased/ves.py	/^    initialFactorSigma = None # default: identity matrix$/;"	v	class:VanillaGradientEvolutionStrategies
initialFactorSigma	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    initialFactorSigma = None # default: identity matrix$/;"	v	class:VanillaGradientEvolutionStrategies
initialPopulation	pybrain/optimization/populationbased/ga.py	/^    initialPopulation = None$/;"	v	class:GA
initialPopulation	tools/pybrain/pybrain/optimization/populationbased/ga.py	/^    initialPopulation = None$/;"	v	class:GA
initialWeightRange	pybrain/supervised/trainers/evolino.py	/^    initialWeightRange = property(lambda self: self._initialWeightRange)$/;"	v	class:EvolinoTrainer
initialWeightRange	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^    initialWeightRange = ( -0.01 , 0.01 ),$/;"	v
initialWeightRange	tools/pybrain/pybrain/supervised/trainers/evolino.py	/^    initialWeightRange = property(lambda self: self._initialWeightRange)$/;"	v	class:EvolinoTrainer
initialize	pybrain/rl/learners/valuebased/interface.py	/^    def initialize(self, value=0.0):$/;"	m	class:ActionValueTable
initialize	tools/pybrain/pybrain/rl/learners/valuebased/interface.py	/^    def initialize(self, value=0.0):$/;"	m	class:ActionValueTable
injectBackproject	pybrain/supervised/evolino/networkwrapper.py	/^    def injectBackproject(self, injection):$/;"	m	class:NetworkWrapper
injectBackproject	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def injectBackproject(self, injection):$/;"	m	class:NetworkWrapper
inmod	pybrain/structure/connections/connection.py	/^    inmod = None$/;"	v	class:Connection
inmod	tools/pybrain/pybrain/structure/connections/connection.py	/^    inmod = None$/;"	v	class:Connection
inner	pybrain/tools/rlgluebridge.py	/^    def inner(*args, **kwargs):$/;"	f	function:adaptAgent
inner	pybrain/utilities.py	/^        def inner(*args, **kwargs):$/;"	f	function:multiEvaluate.decorator
inner	pybrain/utilities.py	/^        def inner(*args, **kwargs):$/;"	f	function:threaded.innerDecorator
inner	pybrain/utilities.py	/^    def inner(*args, **kwargs):$/;"	f	function:garbagecollect
inner	pybrain/utilities.py	/^    def inner(*args, **kwargs):$/;"	f	function:memoize
inner	pybrain/utilities.py	/^    def inner(*args, **kwargs):$/;"	f	function:trace
inner	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    def inner(*args, **kwargs):$/;"	f	function:adaptAgent
inner	tools/pybrain/pybrain/utilities.py	/^        def inner(*args, **kwargs):$/;"	f	function:multiEvaluate.decorator
inner	tools/pybrain/pybrain/utilities.py	/^        def inner(*args, **kwargs):$/;"	f	function:threaded.innerDecorator
inner	tools/pybrain/pybrain/utilities.py	/^    def inner(*args, **kwargs):$/;"	f	function:garbagecollect
inner	tools/pybrain/pybrain/utilities.py	/^    def inner(*args, **kwargs):$/;"	f	function:memoize
inner	tools/pybrain/pybrain/utilities.py	/^    def inner(*args, **kwargs):$/;"	f	function:trace
innerDecorator	pybrain/utilities.py	/^    def innerDecorator(func):$/;"	f	function:threaded
innerDecorator	tools/pybrain/pybrain/utilities.py	/^    def innerDecorator(func):$/;"	f	function:threaded
input	pybrain/structure/networks/convolutional.py	/^    input = [[[0, 0], [0, 0], [0, 0], [0, 0]],$/;"	v	class:SimpleConvolutionalNetwork
input	tools/pybrain/docs/tutorials/fnn.py	/^        input = multivariate_normal(means[klass], cov[klass])$/;"	v
input	tools/pybrain/pybrain/structure/networks/convolutional.py	/^    input = [[[0, 0], [0, 0], [0, 0], [0, 0]],$/;"	v	class:SimpleConvolutionalNetwork
input_ranges	pybrain/rl/environments/classic/acrobot.py	/^    input_ranges = [[-pi, pi], [-pi, pi], [-4 * pi, 4 * pi], [-9 * pi, 9 * pi]]$/;"	v	class:AcrobotTask
input_ranges	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    input_ranges = [[-pi, pi], [-pi, pi], [-4 * pi, 4 * pi], [-9 * pi, 9 * pi]]$/;"	v	class:AcrobotTask
inputerror	pybrain/structure/evolvables/cheaplycopiable.py	/^    def inputerror(self):$/;"	m	class:CheaplyCopiable
inputerror	tools/pybrain/pybrain/structure/evolvables/cheaplycopiable.py	/^    def inputerror(self):$/;"	m	class:CheaplyCopiable
inputsize	pybrain/structure/networks/bidirectional.py	/^    inputsize = 1$/;"	v	class:BidirectionalNetwork
inputsize	tools/pybrain/pybrain/structure/networks/bidirectional.py	/^    inputsize = 1$/;"	v	class:BidirectionalNetwork
insert	pybrain/rl/environments/ode/tools/xmltools.py	/^    def insert(self, name, attr=None):$/;"	m	class:XMLstruct
insert	pybrain/supervised/knn/lsh/nearoptimal.py	/^    def insert(self, point, satellite):$/;"	m	class:MultiDimHash
insert	tools/pybrain/pybrain/rl/environments/ode/tools/xmltools.py	/^    def insert(self, name, attr=None):$/;"	m	class:XMLstruct
insert	tools/pybrain/pybrain/supervised/knn/lsh/nearoptimal.py	/^    def insert(self, point, satellite):$/;"	m	class:MultiDimHash
insertBody	pybrain/rl/environments/ode/tools/xodetools.py	/^    def insertBody(self, bname, shape, size, density, pos=[0, 0, 0], passSet=None, euler=None, mass=None, color=None):$/;"	m	class:XODEfile
insertBody	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def insertBody(self, bname, shape, size, density, pos=[0, 0, 0], passSet=None, euler=None, mass=None, color=None):$/;"	m	class:XODEfile
insertFloor	pybrain/rl/environments/ode/tools/xodetools.py	/^    def insertFloor(self, y= -0.5):$/;"	m	class:XODEfile
insertFloor	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def insertFloor(self, y= -0.5):$/;"	m	class:XODEfile
insertHapticSensor	pybrain/rl/environments/ode/tools/xodetools.py	/^    def insertHapticSensor(self, ctr=(0, 4, 18.5), dx=0.0, dz=0.0):$/;"	m	class:XODEfinger
insertHapticSensor	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def insertHapticSensor(self, ctr=(0, 4, 18.5), dx=0.0, dz=0.0):$/;"	m	class:XODEfinger
insertHapticSensors	pybrain/rl/environments/ode/tools/xodetools.py	/^    def insertHapticSensors(self):$/;"	m	class:XODEfinger
insertHapticSensors	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def insertHapticSensors(self):$/;"	m	class:XODEfinger
insertHapticSensorsRandom	pybrain/rl/environments/ode/tools/xodetools.py	/^    def insertHapticSensorsRandom(self):$/;"	m	class:XODEfinger
insertHapticSensorsRandom	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def insertHapticSensorsRandom(self):$/;"	m	class:XODEfinger
insertJoint	pybrain/rl/environments/ode/tools/xodetools.py	/^    def insertJoint(self, body1, body2, type, axis=None, anchor=(0, 0, 0), rel=False, name=None):$/;"	m	class:XODEfile
insertJoint	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def insertJoint(self, body1, body2, type, axis=None, anchor=(0, 0, 0), rel=False, name=None):$/;"	m	class:XODEfile
insertMulti	pybrain/rl/environments/ode/tools/xmltools.py	/^    def insertMulti(self, attrlist):$/;"	m	class:XMLstruct
insertMulti	tools/pybrain/pybrain/rl/environments/ode/tools/xmltools.py	/^    def insertMulti(self, attrlist):$/;"	m	class:XMLstruct
insertPressureSensorElement	pybrain/rl/environments/ode/tools/xodetools.py	/^                             mass=None, passSet=[], stiff=10.0):$/;"	m	class:XODEfile
insertPressureSensorElement	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^                             mass=None, passSet=[], stiff=10.0):$/;"	m	class:XODEfile
insertSampleStructure	pybrain/rl/environments/ode/tools/xodetools.py	/^    def insertSampleStructure(self, angle=0, std=0.05, xoffs=0.0, dist=1.0, **kwargs):$/;"	m	class:HapticTestSetupWithSine
insertSampleStructure	pybrain/rl/environments/ode/tools/xodetools.py	/^    def insertSampleStructure(self, angle=30, std=0.05, dist=0.9, **kwargs):$/;"	m	class:HapticTestSetupWithRidges
insertSampleStructure	pybrain/rl/environments/ode/tools/xodetools.py	/^    def insertSampleStructure(self, angle=None):$/;"	m	class:XODEfinger
insertSampleStructure	pybrain/rl/environments/ode/tools/xodetools.py	/^    def insertSampleStructure(self, std=0.05, xoffs=0.0, dist=1.0, **kwargs):$/;"	m	class:HapticTestSetupWithSpirals
insertSampleStructure	pybrain/rl/environments/ode/tools/xodetools.py	/^    def insertSampleStructure(self, xoffs=0.0, std=0.025, dist=0.9, **kwargs):$/;"	m	class:HapticTestSetupWithSpheres
insertSampleStructure	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def insertSampleStructure(self, angle=0, std=0.05, xoffs=0.0, dist=1.0, **kwargs):$/;"	m	class:HapticTestSetupWithSine
insertSampleStructure	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def insertSampleStructure(self, angle=30, std=0.05, dist=0.9, **kwargs):$/;"	m	class:HapticTestSetupWithRidges
insertSampleStructure	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def insertSampleStructure(self, angle=None):$/;"	m	class:XODEfinger
insertSampleStructure	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def insertSampleStructure(self, std=0.05, xoffs=0.0, dist=1.0, **kwargs):$/;"	m	class:HapticTestSetupWithSpirals
insertSampleStructure	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def insertSampleStructure(self, xoffs=0.0, std=0.025, dist=0.9, **kwargs):$/;"	m	class:HapticTestSetupWithSpheres
insize	pybrain/structure/networks/custom/capturegame.py	/^    insize = 2$/;"	v	class:CaptureGameNetwork
insize	pybrain/structure/networks/multidimensional.py	/^    insize = 1$/;"	v	class:MultiDimensionalRNN
insize	tools/pybrain/pybrain/structure/networks/custom/capturegame.py	/^    insize = 2$/;"	v	class:CaptureGameNetwork
insize	tools/pybrain/pybrain/structure/networks/multidimensional.py	/^    insize = 1$/;"	v	class:MultiDimensionalRNN
install_requires	tools/pybrain/setup.py	/^    install_requires = ["scipy"],$/;"	v
int2gray	pybrain/utilities.py	/^def int2gray(i):$/;"	f
int2gray	tools/pybrain/pybrain/utilities.py	/^def int2gray(i):$/;"	f
integrateObservation	agents/LSTDACAgent.py	/^    def integrateObservation(self, obs):$/;"	m	class:LSTDACAgent
integrateObservation	pybrain/rl/agents/agent.py	/^    def integrateObservation(self, obs):$/;"	m	class:Agent
integrateObservation	pybrain/rl/agents/linearfa.py	/^    def integrateObservation(self, obs):$/;"	m	class:LinearFA_Agent
integrateObservation	pybrain/rl/agents/logging.py	/^    def integrateObservation(self, obs):$/;"	m	class:LoggingAgent
integrateObservation	pybrain/rl/environments/simplerace/simplecontroller.py	/^    def integrateObservation(self, obs):$/;"	m	class:SimpleController
integrateObservation	pybrain/rl/environments/twoplayergames/capturegameplayers/moduledecision.py	/^    def integrateObservation(self, obs = None):$/;"	m	class:ModuleDecidingPlayer
integrateObservation	pybrain/rl/environments/twoplayergames/gomokuplayers/moduledecision.py	/^    def integrateObservation(self, obs = None):$/;"	m	class:ModuleDecidingPlayer
integrateObservation	pybrain/tests/unittests/tools/test_rlgluebridge.py	/^    def integrateObservation(self, obs):$/;"	m	class:PseudoPybrainAgent
integrateObservation	tools/pybrain/pybrain/rl/agents/agent.py	/^    def integrateObservation(self, obs):$/;"	m	class:Agent
integrateObservation	tools/pybrain/pybrain/rl/agents/linearfa.py	/^    def integrateObservation(self, obs):$/;"	m	class:LinearFA_Agent
integrateObservation	tools/pybrain/pybrain/rl/agents/logging.py	/^    def integrateObservation(self, obs):$/;"	m	class:LoggingAgent
integrateObservation	tools/pybrain/pybrain/rl/environments/simplerace/simplecontroller.py	/^    def integrateObservation(self, obs):$/;"	m	class:SimpleController
integrateObservation	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/moduledecision.py	/^    def integrateObservation(self, obs = None):$/;"	m	class:ModuleDecidingPlayer
integrateObservation	tools/pybrain/pybrain/rl/environments/twoplayergames/gomokuplayers/moduledecision.py	/^    def integrateObservation(self, obs = None):$/;"	m	class:ModuleDecidingPlayer
integrateObservation	tools/pybrain/pybrain/tests/unittests/tools/test_rlgluebridge.py	/^    def integrateObservation(self, obs):$/;"	m	class:PseudoPybrainAgent
invSigmo	pybrain/tools/mixtures/mixtureofgaussian.py	/^    def invSigmo(self, a):$/;"	m	class:MixtureOfGaussians
invSigmo	pybrain/tools/mixtures/mogpuremax.py	/^    def invSigmo(self, a):$/;"	m	class:MixtureOfGaussians
invSigmo	tools/pybrain/pybrain/tools/mixtures/mixtureofgaussian.py	/^    def invSigmo(self, a):$/;"	m	class:MixtureOfGaussians
invSigmo	tools/pybrain/pybrain/tools/mixtures/mogpuremax.py	/^    def invSigmo(self, a):$/;"	m	class:MixtureOfGaussians
invert	pybrain/structure/networks/rbm.py	/^    def invert(self):$/;"	m	class:Rbm
invert	tools/pybrain/pybrain/structure/networks/rbm.py	/^    def invert(self):$/;"	m	class:Rbm
isFinished	pybrain/rl/environments/cartpole/balancetask.py	/^    def isFinished(self):$/;"	m	class:BalanceTask
isFinished	pybrain/rl/environments/cartpole/balancetask.py	/^    def isFinished(self):$/;"	m	class:DiscreteBalanceTaskRBF
isFinished	pybrain/rl/environments/cartpole/balancetask.py	/^    def isFinished(self):$/;"	m	class:LinearizedBalanceTask
isFinished	pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^    def isFinished(self):$/;"	m	class:FastCartPoleTask
isFinished	pybrain/rl/environments/cartpole/fast_version/cartpolewrap.pyx	/^def isFinished():$/;"	f
isFinished	pybrain/rl/environments/classic/acrobot.py	/^    def isFinished(self):$/;"	m	class:AcrobotTask
isFinished	pybrain/rl/environments/classic/mountaincar.py	/^    def isFinished(self):$/;"	m	class:MountainCar
isFinished	pybrain/rl/environments/classic/xor.py	/^    def isFinished(self):$/;"	m	class:XORTask
isFinished	pybrain/rl/environments/episodic.py	/^    def isFinished(self):$/;"	m	class:EpisodicTask
isFinished	pybrain/rl/environments/flexcube/tasks.py	/^    def isFinished(self):$/;"	m	class:NoRewardTask
isFinished	pybrain/rl/environments/flexcube/tasks.py	/^    def isFinished(self):$/;"	m	class:TargetTask
isFinished	pybrain/rl/environments/mazes/tasks/maze.py	/^    def isFinished(self):$/;"	m	class:MazeTask
isFinished	pybrain/rl/environments/mazes/tasks/pomdp.py	/^    def isFinished(self):$/;"	m	class:POMDPTask
isFinished	pybrain/rl/environments/mazes/tasks/tiger.py	/^    def isFinished(self):$/;"	m	class:TigerTask
isFinished	pybrain/rl/environments/ode/tasks/acrobot.py	/^    def isFinished(self):$/;"	m	class:GradualRewardTask
isFinished	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def isFinished(self):$/;"	m	class:CCRLGlasTask
isFinished	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def isFinished(self):$/;"	m	class:CCRLGlasVarTask
isFinished	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def isFinished(self):$/;"	m	class:CCRLPlateTask
isFinished	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def isFinished(self):$/;"	m	class:CCRLPointTask
isFinished	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def isFinished(self):$/;"	m	class:CCRLPointVarTask
isFinished	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def isFinished(self):$/;"	m	class:CCRLTask
isFinished	pybrain/rl/environments/ode/tasks/johnnie.py	/^    def isFinished(self):$/;"	m	class:JohnnieTask
isFinished	pybrain/rl/environments/ode/tasks/johnnie.py	/^    def isFinished(self):$/;"	m	class:RStandingTask
isFinished	pybrain/rl/environments/shipsteer/northwardtask.py	/^    def isFinished(self):$/;"	m	class:GoNorthwardTask
isFinished	pybrain/rl/environments/simple/tasks.py	/^    def isFinished(self):$/;"	m	class:MinimizeTask
isFinished	pybrain/rl/environments/simplerace/simpleracetask.py	/^    def isFinished(self):$/;"	m	class:SimpleraceTask
isFinished	pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^    def isFinished(self):$/;"	m	class:CaptureGameTask
isFinished	pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^    def isFinished(self):$/;"	m	class:GomokuTask
isFinished	task/RobotMotionTask.py	/^    def isFinished(self):$/;"	m	class:RobotMotionTask
isFinished	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    def isFinished(self):$/;"	m	class:BalanceTask
isFinished	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    def isFinished(self):$/;"	m	class:DiscreteBalanceTaskRBF
isFinished	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    def isFinished(self):$/;"	m	class:LinearizedBalanceTask
isFinished	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^    def isFinished(self):$/;"	m	class:FastCartPoleTask
isFinished	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpolewrap.pyx	/^def isFinished():$/;"	f
isFinished	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    def isFinished(self):$/;"	m	class:AcrobotTask
isFinished	tools/pybrain/pybrain/rl/environments/classic/mountaincar.py	/^    def isFinished(self):$/;"	m	class:MountainCar
isFinished	tools/pybrain/pybrain/rl/environments/classic/xor.py	/^    def isFinished(self):$/;"	m	class:XORTask
isFinished	tools/pybrain/pybrain/rl/environments/episodic.py	/^    def isFinished(self):$/;"	m	class:EpisodicTask
isFinished	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^    def isFinished(self):$/;"	m	class:NoRewardTask
isFinished	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^    def isFinished(self):$/;"	m	class:TargetTask
isFinished	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze.py	/^    def isFinished(self):$/;"	m	class:MazeTask
isFinished	tools/pybrain/pybrain/rl/environments/mazes/tasks/pomdp.py	/^    def isFinished(self):$/;"	m	class:POMDPTask
isFinished	tools/pybrain/pybrain/rl/environments/mazes/tasks/tiger.py	/^    def isFinished(self):$/;"	m	class:TigerTask
isFinished	tools/pybrain/pybrain/rl/environments/ode/tasks/acrobot.py	/^    def isFinished(self):$/;"	m	class:GradualRewardTask
isFinished	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def isFinished(self):$/;"	m	class:CCRLGlasTask
isFinished	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def isFinished(self):$/;"	m	class:CCRLGlasVarTask
isFinished	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def isFinished(self):$/;"	m	class:CCRLPlateTask
isFinished	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def isFinished(self):$/;"	m	class:CCRLPointTask
isFinished	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def isFinished(self):$/;"	m	class:CCRLPointVarTask
isFinished	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def isFinished(self):$/;"	m	class:CCRLTask
isFinished	tools/pybrain/pybrain/rl/environments/ode/tasks/johnnie.py	/^    def isFinished(self):$/;"	m	class:JohnnieTask
isFinished	tools/pybrain/pybrain/rl/environments/ode/tasks/johnnie.py	/^    def isFinished(self):$/;"	m	class:RStandingTask
isFinished	tools/pybrain/pybrain/rl/environments/shipsteer/northwardtask.py	/^    def isFinished(self):$/;"	m	class:GoNorthwardTask
isFinished	tools/pybrain/pybrain/rl/environments/simple/tasks.py	/^    def isFinished(self):$/;"	m	class:MinimizeTask
isFinished	tools/pybrain/pybrain/rl/environments/simplerace/simpleracetask.py	/^    def isFinished(self):$/;"	m	class:SimpleraceTask
isFinished	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^    def isFinished(self):$/;"	m	class:CaptureGameTask
isFinished	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^    def isFinished(self):$/;"	m	class:GomokuTask
isLegal	pybrain/rl/environments/twoplayergames/capturegame.py	/^    def isLegal(self, c, pos):$/;"	m	class:CaptureGame
isLegal	pybrain/rl/environments/twoplayergames/gomoku.py	/^    def isLegal(self, c, pos):$/;"	m	class:GomokuGame
isLegal	pybrain/rl/environments/twoplayergames/twoplayergame.py	/^    def isLegal(self, player, action):$/;"	m	class:TwoPlayerGame
isLegal	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    def isLegal(self, c, pos):$/;"	m	class:CaptureGame
isLegal	tools/pybrain/pybrain/rl/environments/twoplayergames/gomoku.py	/^    def isLegal(self, c, pos):$/;"	m	class:GomokuGame
isLegal	tools/pybrain/pybrain/rl/environments/twoplayergames/twoplayergame.py	/^    def isLegal(self, player, action):$/;"	m	class:TwoPlayerGame
isScreenCapturing	pybrain/rl/environments/ode/viewer.py	/^    def isScreenCapturing(self):$/;"	m	class:ODEViewer
isScreenCapturing	tools/pybrain/pybrain/rl/environments/ode/viewer.py	/^    def isScreenCapturing(self):$/;"	m	class:ODEViewer
isSuccessful	pybrain/tools/plotting/fitnessprogression.py	/^    def isSuccessful(l):$/;"	f	function:plotFitnessProgession
isSuccessful	tools/pybrain/pybrain/tools/plotting/fitnessprogression.py	/^    def isSuccessful(l):$/;"	f	function:plotFitnessProgession
isiter	pybrain/supervised/evolino/gfilter.py	/^def isiter(obj):$/;"	f
isiter	tools/pybrain/pybrain/supervised/evolino/gfilter.py	/^def isiter(obj):$/;"	f
iterCombinations	pybrain/utilities.py	/^def iterCombinations(tup):$/;"	f
iterCombinations	tools/pybrain/pybrain/utilities.py	/^def iterCombinations(tup):$/;"	f
iterRbms	pybrain/unsupervised/trainers/deepbelief.py	/^    def iterRbms(self):$/;"	m	class:DeepBeliefTrainer
iterRbms	tools/pybrain/pybrain/unsupervised/trainers/deepbelief.py	/^    def iterRbms(self):$/;"	m	class:DeepBeliefTrainer
jQuery.browser.version	tools/pybrain/docs/html/_static/jquery.js	/^while(elem=second[i++])first[pos++]=elem;return first;},unique:function(array){var ret=[],done={};try{for(var i=0,length=array.length;i<length;i++){var id=jQuery.data(array[i]);if(!done[id]){done[id]=true;ret.push(array[i]);}}}catch(e){ret=array;}return ret;},grep:function(elems,callback,inv){var ret=[];for(var i=0,length=elems.length;i<length;i++)if(!inv!=!callback(elems[i],i))ret.push(elems[i]);return ret;},map:function(elems,callback){var ret=[];for(var i=0,length=elems.length;i<length;i++){var value=callback(elems[i],i);if(value!=null)ret[ret.length]=value;}return ret.concat.apply([],ret);}});var userAgent=navigator.userAgent.toLowerCase();jQuery.browser={version:(userAgent.match(\/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/)||[])[1],safari:\/webkit\/.test(userAgent),opera:\/opera\/.test(userAgent),msie:\/msie\/.test(userAgent)&&!\/opera\/.test(userAgent),mozilla:\/mozilla\/.test(userAgent)&&!\/(compatible|webkit)\/.test(userAgent)};var styleFloat=jQuery.browser.msie?"styleFloat":"cssFloat";jQuery.extend({boxModel:!jQuery.browser.msie||document.compatMode=="CSS1Compat",props:{"for":"htmlFor","class":"className","float":styleFloat,cssFloat:styleFloat,styleFloat:styleFloat,readonly:"readOnly",maxlength:"maxLength",cellspacing:"cellSpacing"}});jQuery.each({parent:function(elem){return elem.parentNode;},parents:function(elem){return jQuery.dir(elem,"parentNode");},next:function(elem){return jQuery.nth(elem,2,"nextSibling");},prev:function(elem){return jQuery.nth(elem,2,"previousSibling");},nextAll:function(elem){return jQuery.dir(elem,"nextSibling");},prevAll:function(elem){return jQuery.dir(elem,"previousSibling");},siblings:function(elem){return jQuery.sibling(elem.parentNode.firstChild,elem);},children:function(elem){return jQuery.sibling(elem.firstChild);},contents:function(elem){return jQuery.nodeName(elem,"iframe")?elem.contentDocument||elem.contentWindow.document:jQuery.makeArray(elem.childNodes);}},function(name,fn){jQuery.fn[name]=function(selector){var ret=jQuery.map(this,fn);if(selector&&typeof selector=="string")ret=jQuery.multiFilter(selector,ret);return this.pushStack(jQuery.unique(ret));};});jQuery.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(name,original){jQuery.fn[name]=function(){var args=arguments;return this.each(function(){for(var i=0,length=args.length;i<length;i++)jQuery(args[i])[original](this);});};});jQuery.each({removeAttr:function(name){jQuery.attr(this,name,"");if(this.nodeType==1)this.removeAttribute(name);},addClass:function(classNames){jQuery.className.add(this,classNames);},removeClass:function(classNames){jQuery.className.remove(this,classNames);},toggleClass:function(classNames){jQuery.className[jQuery.className.has(this,classNames)?"remove":"add"](this,classNames);},remove:function(selector){if(!selector||jQuery.filter(selector,[this]).r.length){jQuery("*",this).add(this).each(function(){jQuery.event.remove(this);jQuery.removeData(this);});if(this.parentNode)this.parentNode.removeChild(this);}},empty:function(){jQuery(">*",this).remove();while(this.firstChild)this.removeChild(this.firstChild);}},function(name,fn){jQuery.fn[name]=function(){return this.each(fn,arguments);};});jQuery.each(["Height","Width"],function(i,name){var type=name.toLowerCase();jQuery.fn[type]=function(size){return this[0]==window?jQuery.browser.opera&&document.body["client"+name]||jQuery.browser.safari&&window["inner"+name]||document.compatMode=="CSS1Compat"&&document.documentElement["client"+name]||document.body["client"+name]:this[0]==document?Math.max(Math.max(document.body["scroll"+name],document.documentElement["scroll"+name]),Math.max(document.body["offset"+name],document.documentElement["offset"+name])):size==undefined?(this.length?jQuery.css(this[0],type):null):this.css(type,size.constructor==String?size:size+"px");};});function num(elem,prop){return elem[0]&&parseInt(jQuery.curCSS(elem[0],prop,true),10)||0;}var chars=jQuery.browser.safari&&parseInt(jQuery.browser.version)<417?"(?:[\\\\w*_-]|\\\\\\\\.)":"(?:[\\\\w\\u0128-\\uFFFF*_-]|\\\\\\\\.)",quickChild=new RegExp("^>\\\\s*("+chars+"+)"),quickID=new RegExp("^("+chars+"+)(#)("+chars+"+)"),quickClass=new RegExp("^([#.]?)("+chars+"*)");jQuery.extend({expr:{"":function(a,i,m){return m[2]=="*"||jQuery.nodeName(a,m[2]);},"#":function(a,i,m){return a.getAttribute("id")==m[2];},":":{lt:function(a,i,m){return i<m[3]-0;},gt:function(a,i,m){return i>m[3]-0;},nth:function(a,i,m){return m[3]-0==i;},eq:function(a,i,m){return m[3]-0==i;},first:function(a,i){return i==0;},last:function(a,i,m,r){return i==r.length-1;},even:function(a,i){return i%2==0;},odd:function(a,i){return i%2;},"first-child":function(a){return a.parentNode.getElementsByTagName("*")[0]==a;},"last-child":function(a){return jQuery.nth(a.parentNode.lastChild,1,"previousSibling")==a;},"only-child":function(a){return!jQuery.nth(a.parentNode.lastChild,2,"previousSibling");},parent:function(a){return a.firstChild;},empty:function(a){return!a.firstChild;},contains:function(a,i,m){return(a.textContent||a.innerText||jQuery(a).text()||"").indexOf(m[3])>=0;},visible:function(a){return"hidden"!=a.type&&jQuery.css(a,"display")!="none"&&jQuery.css(a,"visibility")!="hidden";},hidden:function(a){return"hidden"==a.type||jQuery.css(a,"display")=="none"||jQuery.css(a,"visibility")=="hidden";},enabled:function(a){return!a.disabled;},disabled:function(a){return a.disabled;},checked:function(a){return a.checked;},selected:function(a){return a.selected||jQuery.attr(a,"selected");},text:function(a){return"text"==a.type;},radio:function(a){return"radio"==a.type;},checkbox:function(a){return"checkbox"==a.type;},file:function(a){return"file"==a.type;},password:function(a){return"password"==a.type;},submit:function(a){return"submit"==a.type;},image:function(a){return"image"==a.type;},reset:function(a){return"reset"==a.type;},button:function(a){return"button"==a.type||jQuery.nodeName(a,"button");},input:function(a){return\/input|select|textarea|button\/i.test(a.nodeName);},has:function(a,i,m){return jQuery.find(m[3],a).length;},header:function(a){return\/h\\d\/i.test(a.nodeName);},animated:function(a){return jQuery.grep(jQuery.timers,function(fn){return a==fn.elem;}).length;}}},parse:[\/^(\\[) *@?([\\w-]+) *([!*$^~=]*) *('?"?)(.*?)\\4 *\\]\/,\/^(:)([\\w-]+)\\("?'?(.*?(\\(.*?\\))?[^(]*?)"?'?\\)\/,new RegExp("^([:.#]*)("+chars+"+)")],multiFilter:function(expr,elems,not){var old,cur=[];while(expr&&expr!=old){old=expr;var f=jQuery.filter(expr,elems,not);expr=f.t.replace(\/^\\s*,\\s*\/,"");cur=not?elems=f.r:jQuery.merge(cur,f.r);}return cur;},find:function(t,context){if(typeof t!="string")return[t];if(context&&context.nodeType!=1&&context.nodeType!=9)return[];context=context||document;var ret=[context],done=[],last,nodeName;while(t&&last!=t){var r=[];last=t;t=jQuery.trim(t);var foundToken=false,re=quickChild,m=re.exec(t);if(m){nodeName=m[1].toUpperCase();for(var i=0;ret[i];i++)for(var c=ret[i].firstChild;c;c=c.nextSibling)if(c.nodeType==1&&(nodeName=="*"||c.nodeName.toUpperCase()==nodeName))r.push(c);ret=r;t=t.replace(re,"");if(t.indexOf(" ")==0)continue;foundToken=true;}else{re=\/^([>+~])\\s*(\\w*)\/i;if((m=re.exec(t))!=null){r=[];var merge={};nodeName=m[2].toUpperCase();m=m[1];for(var j=0,rl=ret.length;j<rl;j++){var n=m=="~"||m=="+"?ret[j].nextSibling:ret[j].firstChild;for(;n;n=n.nextSibling)if(n.nodeType==1){var id=jQuery.data(n);if(m=="~"&&merge[id])break;if(!nodeName||n.nodeName.toUpperCase()==nodeName){if(m=="~")merge[id]=true;r.push(n);}if(m=="+")break;}}ret=r;t=jQuery.trim(t.replace(re,""));foundToken=true;}}if(t&&!foundToken){if(!t.indexOf(",")){if(context==ret[0])ret.shift();done=jQuery.merge(done,ret);r=ret=[context];t=" "+t.substr(1,t.length);}else{var re2=quickID;var m=re2.exec(t);if(m){m=[0,m[2],m[3],m[1]];}else{re2=quickClass;m=re2.exec(t);}m[2]=m[2].replace(\/\\\\\/g,"");var elem=ret[ret.length-1];if(m[1]=="#"&&elem&&elem.getElementById&&!jQuery.isXMLDoc(elem)){var oid=elem.getElementById(m[2]);if((jQuery.browser.msie||jQuery.browser.opera)&&oid&&typeof oid.id=="string"&&oid.id!=m[2])oid=jQuery('[@id="'+m[2]+'"]',elem)[0];ret=r=oid&&(!m[3]||jQuery.nodeName(oid,m[3]))?[oid]:[];}else{for(var i=0;ret[i];i++){var tag=m[1]=="#"&&m[3]?m[3]:m[1]!=""||m[0]==""?"*":m[2];if(tag=="*"&&ret[i].nodeName.toLowerCase()=="object")tag="param";r=jQuery.merge(r,ret[i].getElementsByTagName(tag));}if(m[1]==".")r=jQuery.classFilter(r,m[2]);if(m[1]=="#"){var tmp=[];for(var i=0;r[i];i++)if(r[i].getAttribute("id")==m[2]){tmp=[r[i]];break;}r=tmp;}ret=r;}t=t.replace(re2,"");}}if(t){var val=jQuery.filter(t,r);ret=r=val.r;t=jQuery.trim(val.t);}}if(t)ret=[];if(ret&&context==ret[0])ret.shift();done=jQuery.merge(done,ret);return done;},classFilter:function(r,m,not){m=" "+m+" ";var tmp=[];for(var i=0;r[i];i++){var pass=(" "+r[i].className+" ").indexOf(m)>=0;if(!not&&pass||not&&!pass)tmp.push(r[i]);}return tmp;},filter:function(t,r,not){var last;while(t&&t!=last){last=t;var p=jQuery.parse,m;for(var i=0;p[i];i++){m=p[i].exec(t);if(m){t=t.substring(m[0].length);m[2]=m[2].replace(\/\\\\\/g,"");break;}}if(!m)break;if(m[1]==":"&&m[2]=="not")r=isSimple.test(m[3])?jQuery.filter(m[3],r,true).r:jQuery(r).not(m[3]);else if(m[1]==".")r=jQuery.classFilter(r,m[2],not);else if(m[1]=="["){var tmp=[],type=m[3];for(var i=0,rl=r.length;i<rl;i++){var a=r[i],z=a[jQuery.props[m[2]]||m[2]];if(z==null||\/href|src|selected\/.test(m[2]))z=jQuery.attr(a,m[2])||'';if((type==""&&!!z||type=="="&&z==m[5]||type=="!="&&z!=m[5]||type=="^="&&z&&!z.indexOf(m[5])||type=="$="&&z.substr(z.length-m[5].length)==m[5]||(type=="*="||type=="~=")&&z.indexOf(m[5])>=0)^not)tmp.push(a);}r=tmp;}else if(m[1]==":"&&m[2]=="nth-child"){var merge={},tmp=[],test=\/(-?)(\\d*)n((?:\\+|-)?\\d*)\/.exec(m[3]=="even"&&"2n"||m[3]=="odd"&&"2n+1"||!\/\\D\/.test(m[3])&&"0n+"+m[3]||m[3]),first=(test[1]+(test[2]||1))-0,last=test[3]-0;for(var i=0,rl=r.length;i<rl;i++){var node=r[i],parentNode=node.parentNode,id=jQuery.data(parentNode);if(!merge[id]){var c=1;for(var n=parentNode.firstChild;n;n=n.nextSibling)if(n.nodeType==1)n.nodeIndex=c++;merge[id]=true;}var add=false;if(first==0){if(node.nodeIndex==last)add=true;}else if((node.nodeIndex-last)%first==0&&(node.nodeIndex-last)\/first>=0)add=true;if(add^not)tmp.push(node);}r=tmp;}else{var fn=jQuery.expr[m[1]];if(typeof fn=="object")fn=fn[m[2]];if(typeof fn=="string")fn=eval("false||function(a,i){return "+fn+";}");r=jQuery.grep(r,function(elem,i){return fn(elem,i,m,r);},not);}}return{r:r,t:t};},dir:function(elem,dir){var matched=[],cur=elem[dir];while(cur&&cur!=document){if(cur.nodeType==1)matched.push(cur);cur=cur[dir];}return matched;},nth:function(cur,result,dir,elem){result=result||1;var num=0;for(;cur;cur=cur[dir])if(cur.nodeType==1&&++num==result)break;return cur;},sibling:function(n,elem){var r=[];for(;n;n=n.nextSibling){if(n.nodeType==1&&n!=elem)r.push(n);}return r;}});jQuery.event={add:function(elem,types,handler,data){if(elem.nodeType==3||elem.nodeType==8)return;if(jQuery.browser.msie&&elem.setInterval)elem=window;if(!handler.guid)handler.guid=this.guid++;if(data!=undefined){var fn=handler;handler=this.proxy(fn,function(){return fn.apply(this,arguments);});handler.data=data;}var events=jQuery.data(elem,"events")||jQuery.data(elem,"events",{}),handle=jQuery.data(elem,"handle")||jQuery.data(elem,"handle",function(){if(typeof jQuery!="undefined"&&!jQuery.event.triggered)return jQuery.event.handle.apply(arguments.callee.elem,arguments);});handle.elem=elem;jQuery.each(types.split(\/\\s+\/),function(index,type){var parts=type.split(".");type=parts[0];handler.type=parts[1];var handlers=events[type];if(!handlers){handlers=events[type]={};if(!jQuery.event.special[type]||jQuery.event.special[type].setup.call(elem)===false){if(elem.addEventListener)elem.addEventListener(type,handle,false);else if(elem.attachEvent)elem.attachEvent("on"+type,handle);}}handlers[handler.guid]=handler;jQuery.event.global[type]=true;});elem=null;},guid:1,global:{},remove:function(elem,types,handler){if(elem.nodeType==3||elem.nodeType==8)return;var events=jQuery.data(elem,"events"),ret,index;if(events){if(types==undefined||(typeof types=="string"&&types.charAt(0)=="."))for(var type in events)this.remove(elem,type+(types||""));else{if(types.type){handler=types.handler;types=types.type;}jQuery.each(types.split(\/\\s+\/),function(index,type){var parts=type.split(".");type=parts[0];if(events[type]){if(handler)delete events[type][handler.guid];else$/;"	p
jQuery.contains	tools/pybrain/docs/html/_static/doctools.js	/^}$/;"	f
jQuery.fn.highlightText	tools/pybrain/docs/html/_static/doctools.js	/^}$/;"	f
jQuery.fn.highlightText.highlight	tools/pybrain/docs/html/_static/doctools.js	/^  function highlight(node) {$/;"	f
jQuery.fn.init	tools/pybrain/docs/html/_static/jquery.js	/^return this.trigger("setData"+parts[1]+"!",[parts[0],value]).each(function(){jQuery.data(this,key,value);});},removeData:function(key){return this.each(function(){jQuery.removeData(this,key);});},domManip:function(args,table,reverse,callback){var clone=this.length>1,elems;return this.each(function(){if(!elems){elems=jQuery.clean(args,this.ownerDocument);if(reverse)elems.reverse();}var obj=this;if(table&&jQuery.nodeName(this,"table")&&jQuery.nodeName(elems[0],"tr"))obj=this.getElementsByTagName("tbody")[0]||this.appendChild(this.ownerDocument.createElement("tbody"));var scripts=jQuery([]);jQuery.each(elems,function(){var elem=clone?jQuery(this).clone(true)[0]:this;if(jQuery.nodeName(elem,"script"))scripts=scripts.add(elem);else{if(elem.nodeType==1)scripts=scripts.add(jQuery("script",elem).remove());callback.call(obj,elem);}});scripts.each(evalScript);});}};jQuery.fn.init.prototype=jQuery.fn;function evalScript(i,elem){if(elem.src)jQuery.ajax({url:elem.src,async:false,dataType:"script"});else$/;"	c
jQuery.getQueryParameters	tools/pybrain/docs/html/_static/doctools.js	/^jQuery.urlencode = encodeURIComponent;$/;"	f
jQuery.makeSearchSummary	tools/pybrain/docs/html/_static/searchtools.js	/^\/**$/;"	f
jQuery.urldecode	tools/pybrain/docs/html/_static/doctools.js	/^}$/;"	f
jacardCoefficient	pybrain/supervised/knn/lsh/minhash.py	/^def jacardCoefficient(a, b):$/;"	f
jacardCoefficient	tools/pybrain/pybrain/supervised/knn/lsh/minhash.py	/^def jacardCoefficient(a, b):$/;"	f
javaAgent	tools/pybrain/examples/rl/environments/capturegame/minitournament.py	/^    javaAgent = ClientCapturePlayer(game, name = 'java')$/;"	v
keywords	tools/pybrain/setup.py	/^    keywords="Neural Networks Machine Learning",$/;"	v
killAgent	tools/pybrain/examples/rl/environments/capturegame/minitournament.py	/^killAgent = KillingPlayer(game, name = 'kill')$/;"	v
kinit	pybrain/auxiliary/kmeans.py	/^def kinit(X, k):$/;"	f
kinit	tools/pybrain/pybrain/auxiliary/kmeans.py	/^def kinit(X, k):$/;"	f
kmax	pybrain/rl/environments/functions/multimodal.py	/^    kmax = 20$/;"	v	class:WeierstrassFunction
kmax	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    kmax = 20$/;"	v	class:WeierstrassFunction
kmeanspp	pybrain/auxiliary/kmeans.py	/^def kmeanspp(Y, k):$/;"	f
kmeanspp	tools/pybrain/pybrain/auxiliary/kmeans.py	/^def kmeanspp(Y, k):$/;"	f
knn	pybrain/supervised/knn/lsh/minhash.py	/^    def knn(self, item, k):$/;"	m	class:MinHash
knn	pybrain/supervised/knn/lsh/nearoptimal.py	/^    def knn(self, point, k):$/;"	m	class:MultiDimHash
knn	tools/pybrain/pybrain/supervised/knn/lsh/minhash.py	/^    def knn(self, item, k):$/;"	m	class:MinHash
knn	tools/pybrain/pybrain/supervised/knn/lsh/nearoptimal.py	/^    def knn(self, point, k):$/;"	m	class:MultiDimHash
known_extensions	pybrain/utilities.py	/^known_extensions = {$/;"	v
known_extensions	tools/pybrain/pybrain/utilities.py	/^known_extensions = {$/;"	v
l	pybrain/optimization/distributionbased/xnes.py	/^    l = XNES(f, -ones(dim))$/;"	v	class:XNES
l	pybrain/rl/environments/cartpole/cartpole.py	/^    l = 0.5$/;"	v	class:CartPoleEnvironment
l	tools/pybrain/examples/optimization/optimizerinterface.py	/^    l = algo(lambda x: sum(x)**2)$/;"	v
l	tools/pybrain/examples/optimization/optimizerinterface.py	/^l = ES(f, mu = 10, lambada = 20)$/;"	v
l	tools/pybrain/examples/optimization/optimizerinterface.py	/^l = OriginalNES(f, batchSize = 25, importanceMixing = False)$/;"	v
l	tools/pybrain/examples/optimization/optimizerinterface.py	/^l = algo()$/;"	v
l	tools/pybrain/examples/optimization/optimizerinterface.py	/^l = algo(f)$/;"	v
l	tools/pybrain/examples/optimization/optimizerinterface.py	/^l = algo(f, array(x0))$/;"	v
l	tools/pybrain/examples/optimization/optimizerinterface.py	/^l = algo(f, batchSise = 10, theMiddleOfTheTutorial = 'here')$/;"	v
l	tools/pybrain/examples/optimization/optimizerinterface.py	/^l = algo(f, desiredEvaluation = 10)$/;"	v
l	tools/pybrain/examples/optimization/optimizerinterface.py	/^l = algo(f, maxEvaluations = 20)$/;"	v
l	tools/pybrain/examples/optimization/optimizerinterface.py	/^l = algo(f, maxLearningSteps = 25)$/;"	v
l	tools/pybrain/examples/optimization/optimizerinterface.py	/^l = algo(f, numParameters = 2)$/;"	v
l	tools/pybrain/examples/optimization/optimizerinterface.py	/^l = algo(f, pcontainer)$/;"	v
l	tools/pybrain/examples/optimization/optimizerinterface.py	/^l = algo(f, x0)$/;"	v
l	tools/pybrain/examples/optimization/optimizerinterface.py	/^l = algo(f, x0, storeAllEvaluations = True, storeAllEvaluated = True, maxEvaluations = 150)$/;"	v
l	tools/pybrain/examples/optimization/optimizerinterface.py	/^l = algo(lambda x: sum(x)**2, x0)$/;"	v
l	tools/pybrain/examples/optimization/optimizerinterface.py	/^l = algo(task, nnet)$/;"	v
l	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    l = XNES(f, -ones(dim))$/;"	v	class:XNES
l	tools/pybrain/pybrain/rl/environments/cartpole/cartpole.py	/^    l = 0.5$/;"	v	class:CartPoleEnvironment
l1	pybrain/rl/environments/classic/acrobot.py	/^    l1 = 1.0$/;"	v	class:AcrobotTask
l1	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    l1 = 1.0$/;"	v	class:AcrobotTask
l1Square	pybrain/rl/environments/classic/acrobot.py	/^    l1Square = l1 * l1$/;"	v	class:AcrobotTask
l1Square	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    l1Square = l1 * l1$/;"	v	class:AcrobotTask
l2	pybrain/rl/environments/classic/acrobot.py	/^    l2 = 1.0$/;"	v	class:AcrobotTask
l2	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    l2 = 1.0$/;"	v	class:AcrobotTask
l2Square	pybrain/rl/environments/classic/acrobot.py	/^    l2Square = l2 * l2$/;"	v	class:AcrobotTask
l2Square	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    l2Square = l2 * l2$/;"	v	class:AcrobotTask
labels	pybrain/tools/datasets/mnist.py	/^def labels(filename):$/;"	f
labels	tools/pybrain/pybrain/tools/datasets/mnist.py	/^def labels(filename):$/;"	f
lamb	examples/LSTDAC.py	/^        lamb = 1,$/;"	v
lamb	examples/problem_settings.py	/^lamb=0.9$/;"	v
lamb	settings.py	/^lamb=0.9$/;"	v
lambada	pybrain/optimization/memetic/innermemetic.py	/^    lambada = 5$/;"	v	class:InnerMemeticSearch
lambada	pybrain/optimization/populationbased/es.py	/^    lambada = 50$/;"	v	class:ES
lambada	tools/pybrain/pybrain/optimization/memetic/innermemetic.py	/^    lambada = 5$/;"	v	class:InnerMemeticSearch
lambada	tools/pybrain/pybrain/optimization/populationbased/es.py	/^    lambada = 50$/;"	v	class:ES
lastPos	examples/ENAC.py	/^lastPos = None$/;"	v
lastPos	examples/QLambda_LinFA.py	/^lastPos = None$/;"	v
lastPos	examples/Q_LinFA.py	/^lastPos = None$/;"	v
lastPos	examples/SARSA_TL.py	/^lastPos = None$/;"	v
lastPos	main.py	/^lastPos = None$/;"	v
lastStepCurrentWp	pybrain/rl/environments/simplerace/simpleracetcp.py	/^    lastStepCurrentWp = [0, 0]$/;"	v	class:SimpleraceEnvironment
lastStepCurrentWp	tools/pybrain/pybrain/rl/environments/simplerace/simpleracetcp.py	/^    lastStepCurrentWp = [0, 0]$/;"	v	class:SimpleraceEnvironment
lastStepNextWp	pybrain/rl/environments/simplerace/simpleracetcp.py	/^    lastStepNextWp = [0, 0]$/;"	v	class:SimpleraceEnvironment
lastStepNextWp	tools/pybrain/pybrain/rl/environments/simplerace/simpleracetcp.py	/^    lastStepNextWp = [0, 0]$/;"	v	class:SimpleraceEnvironment
lastaction	pybrain/rl/agents/logging.py	/^    lastaction = None$/;"	v	class:LoggingAgent
lastaction	tools/pybrain/pybrain/rl/agents/logging.py	/^    lastaction = None$/;"	v	class:LoggingAgent
lastobs	pybrain/rl/agents/logging.py	/^    lastobs = None$/;"	v	class:LoggingAgent
lastobs	tools/pybrain/pybrain/rl/agents/logging.py	/^    lastobs = None$/;"	v	class:LoggingAgent
lastreward	pybrain/rl/agents/logging.py	/^    lastreward = None$/;"	v	class:LoggingAgent
lastreward	tools/pybrain/pybrain/rl/agents/logging.py	/^    lastreward = None$/;"	v	class:LoggingAgent
latex_documents	tools/pybrain/docs/sphinx/conf.py	/^latex_documents = [$/;"	v
latex_use_modindex	tools/pybrain/docs/sphinx/conf.py	/^latex_use_modindex = True$/;"	v
lazyInversions	pybrain/rl/learners/valuebased/linearfa.py	/^    lazyInversions = 20$/;"	v	class:LSPI
lazyInversions	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    lazyInversions = 20$/;"	v	class:LSPI
lc1	pybrain/rl/environments/classic/acrobot.py	/^    lc1 = 0.5$/;"	v	class:AcrobotTask
lc1	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    lc1 = 0.5$/;"	v	class:AcrobotTask
lc1Square	pybrain/rl/environments/classic/acrobot.py	/^    lc1Square = lc1 * lc1$/;"	v	class:AcrobotTask
lc1Square	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    lc1Square = lc1 * lc1$/;"	v	class:AcrobotTask
lc2	pybrain/rl/environments/classic/acrobot.py	/^    lc2 = 0.5$/;"	v	class:AcrobotTask
lc2	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    lc2 = 0.5$/;"	v	class:AcrobotTask
lc2Square	pybrain/rl/environments/classic/acrobot.py	/^    lc2Square = lc2 * lc2$/;"	v	class:AcrobotTask
lc2Square	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    lc2Square = lc2 * lc2$/;"	v	class:AcrobotTask
learn	agents/LSTDACAgent.py	/^    def learn(self):$/;"	m	class:LSTDACAgent
learn	pybrain/optimization/optimizer.py	/^    def learn(self, additionalLearningSteps = None):$/;"	m	class:BlackBoxOptimizer
learn	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def learn(self, maxSteps=None):$/;"	m	class:Coevolution
learn	pybrain/rl/agents/learning.py	/^    def learn(self, episodes=1):$/;"	m	class:LearningAgent
learn	pybrain/rl/agents/linearfa.py	/^    def learn(self):$/;"	m	class:LinearFA_Agent
learn	pybrain/rl/learners/directsearch/policygradient.py	/^    def learn(self):$/;"	m	class:PolicyGradientLearner
learn	pybrain/rl/learners/directsearch/rwr.py	/^    def learn(self, batches):$/;"	m	class:RWR
learn	pybrain/rl/learners/learner.py	/^    def learn(self):$/;"	m	class:Learner
learn	pybrain/rl/learners/valuebased/nfq.py	/^    def learn(self):$/;"	m	class:NFQ
learn	pybrain/rl/learners/valuebased/q.py	/^    def learn(self):$/;"	m	class:Q
learn	pybrain/rl/learners/valuebased/qlambda.py	/^    def learn(self):$/;"	m	class:QLambda
learn	pybrain/rl/learners/valuebased/sarsa.py	/^    def learn(self):$/;"	m	class:SARSA
learn	pybrain/tools/mixtures/mixtureofgaussian.py	/^    def learn(self, x, y, dm="max", typ="logLiklihood"):$/;"	m	class:MixtureOfGaussians
learn	pybrain/tools/mixtures/mogpuremax.py	/^    def learn(self, x, y):$/;"	m	class:MixtureOfGaussians
learn	tools/pybrain/pybrain/optimization/optimizer.py	/^    def learn(self, additionalLearningSteps = None):$/;"	m	class:BlackBoxOptimizer
learn	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    def learn(self, maxSteps=None):$/;"	m	class:Coevolution
learn	tools/pybrain/pybrain/rl/agents/learning.py	/^    def learn(self, episodes=1):$/;"	m	class:LearningAgent
learn	tools/pybrain/pybrain/rl/agents/linearfa.py	/^    def learn(self):$/;"	m	class:LinearFA_Agent
learn	tools/pybrain/pybrain/rl/learners/directsearch/policygradient.py	/^    def learn(self):$/;"	m	class:PolicyGradientLearner
learn	tools/pybrain/pybrain/rl/learners/directsearch/rwr.py	/^    def learn(self, batches):$/;"	m	class:RWR
learn	tools/pybrain/pybrain/rl/learners/learner.py	/^    def learn(self):$/;"	m	class:Learner
learn	tools/pybrain/pybrain/rl/learners/valuebased/nfq.py	/^    def learn(self):$/;"	m	class:NFQ
learn	tools/pybrain/pybrain/rl/learners/valuebased/q.py	/^    def learn(self):$/;"	m	class:Q
learn	tools/pybrain/pybrain/rl/learners/valuebased/qlambda.py	/^    def learn(self):$/;"	m	class:QLambda
learn	tools/pybrain/pybrain/rl/learners/valuebased/sarsa.py	/^    def learn(self):$/;"	m	class:SARSA
learn	tools/pybrain/pybrain/tools/mixtures/mixtureofgaussian.py	/^    def learn(self, x, y, dm="max", typ="logLiklihood"):$/;"	m	class:MixtureOfGaussians
learn	tools/pybrain/pybrain/tools/mixtures/mogpuremax.py	/^    def learn(self, x, y):$/;"	m	class:MixtureOfGaussians
learnEpisodes	pybrain/rl/learners/learner.py	/^    def learnEpisodes(self, episodes = 1, *args, **kwargs):$/;"	m	class:EpisodicLearner
learnEpisodes	tools/pybrain/pybrain/rl/learners/learner.py	/^    def learnEpisodes(self, episodes = 1, *args, **kwargs):$/;"	m	class:EpisodicLearner
learnOnDataSet	learners/ActorCriticLearner.py	/^    def learnOnDataSet(self):$/;"	m	class:ActorCriticLearner
learnOnDataSet	learners/ENACLearner.py	/^    def learnOnDataSet(self, dataset):$/;"	m	class:ENAC
learnOnDataSet	learners/HessianACLearner.py	/^    def learnOnDataSet(self, dataset):$/;"	m	class:HessianACLearner
learnOnDataSet	learners/TDLearner.py	/^    def learnOnDataSet(self, dataset):$/;"	m	class:TDLearner
learnOnDataset	pybrain/rl/learners/learner.py	/^    def learnOnDataset(self, dataset, *args, **kwargs):$/;"	m	class:DataSetLearner
learnOnDataset	tools/pybrain/pybrain/rl/learners/learner.py	/^    def learnOnDataset(self, dataset, *args, **kwargs):$/;"	m	class:DataSetLearner
learnOneBatch	pybrain/rl/learners/directsearch/rwr.py	/^    def learnOneBatch(self):$/;"	m	class:RWR
learnOneBatch	tools/pybrain/pybrain/rl/learners/directsearch/rwr.py	/^    def learnOneBatch(self):$/;"	m	class:RWR
learner	enac.py	/^learner = ENAC(iniTheta=iniTheta, learningRate=0.1)$/;"	v
learner	examples/ENAC.py	/^learner = ENAC()$/;"	v
learner	examples/ENAC_TL.py	/^learner = SARSA()$/;"	v
learner	examples/LSTDAC.py	/^learner = LSTDACLearner(actiondim=4, **para)$/;"	v
learner	examples/QLambda_LinFA.py	/^learner = QLambda_LinFA(4, 1)$/;"	v
learner	examples/Q_LinFA.py	/^learner = Q_LinFA(4, 1)$/;"	v
learner	examples/SARSA_TL.py	/^learner = SARSA()$/;"	v
learner	main.py	/^learner = TDLearner(aDim, iniTheta,$/;"	v
learner	pybrain/tests/unittests/tools/test_rlgluebridge.py	/^    learner = None$/;"	v	class:PseudoPybrainAgent
learner	tools/pybrain/docs/tutorials/rl.py	/^learner = Q()$/;"	v
learner	tools/pybrain/examples/optimization/optimizers_for_rl.py	/^learner = HillClimber(storeAllEvaluations = True)$/;"	v
learner	tools/pybrain/examples/rl/environments/capturegame/evolvingplayer.py	/^learner = ES(task, net, mu = 5, lambada = 5,$/;"	v
learner	tools/pybrain/examples/rl/environments/maze/td.py	/^learner = SARSA()$/;"	v
learner	tools/pybrain/examples/rl/environments/shipsteer/shipbench_sde.py	/^learner = ENAC()$/;"	v
learner	tools/pybrain/examples/rl/valuebased/nfq.py	/^learner = NFQ()$/;"	v
learner	tools/pybrain/examples/rl/valuebased/td.py	/^learner = SARSA()$/;"	v
learner	tools/pybrain/pybrain/tests/unittests/tools/test_rlgluebridge.py	/^    learner = None$/;"	v	class:PseudoPybrainAgent
learning	pybrain/rl/agents/learning.py	/^    learning = property(_getLearning, _setLearning)$/;"	v	class:LearningAgent
learning	pybrain/rl/agents/linearfa.py	/^    learning = True$/;"	v	class:LinearFA_Agent
learning	pybrain/tests/unittests/tools/test_rlgluebridge.py	/^    learning = False$/;"	v	class:PseudoPybrainAgent
learning	tools/pybrain/pybrain/rl/agents/learning.py	/^    learning = property(_getLearning, _setLearning)$/;"	v	class:LearningAgent
learning	tools/pybrain/pybrain/rl/agents/linearfa.py	/^    learning = True$/;"	v	class:LinearFA_Agent
learning	tools/pybrain/pybrain/tests/unittests/tools/test_rlgluebridge.py	/^    learning = False$/;"	v	class:PseudoPybrainAgent
learningRate	pybrain/optimization/distributionbased/nes.py	/^    learningRate = 1.$/;"	v	class:ExactNES
learningRate	pybrain/optimization/distributionbased/nes.py	/^    learningRate = 1.$/;"	v	class:OriginalNES
learningRate	pybrain/optimization/distributionbased/ves.py	/^    learningRate = 0.01$/;"	v	class:VanillaGradientEvolutionStrategies
learningRate	pybrain/optimization/finitedifference/fd.py	/^    learningRate = 0.1$/;"	v	class:FiniteDifferences
learningRate	pybrain/optimization/finitedifference/pgpe.py	/^    learningRate = 0.2    $/;"	v	class:PGPE
learningRate	pybrain/rl/learners/directsearch/policygradient.py	/^    learningRate = property(_getLearningRate, _setLearningRate)$/;"	v	class:PolicyGradientLearner
learningRate	pybrain/rl/learners/directsearch/rwr.py	/^    learningRate = 0.005$/;"	v	class:RWR
learningRate	pybrain/rl/learners/valuebased/linearfa.py	/^    learningRate = 0.5      # aka alpha: make sure this is being decreased by calls from the learning agent!$/;"	v	class:LinearFALearner
learningRate	tools/pybrain/examples/rl/environments/ode/acrobot_pgpe.py	/^                                    learningRate = 0.05,$/;"	v
learningRate	tools/pybrain/pybrain/optimization/distributionbased/nes.py	/^    learningRate = 1.$/;"	v	class:ExactNES
learningRate	tools/pybrain/pybrain/optimization/distributionbased/nes.py	/^    learningRate = 1.$/;"	v	class:OriginalNES
learningRate	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    learningRate = 0.01$/;"	v	class:VanillaGradientEvolutionStrategies
learningRate	tools/pybrain/pybrain/optimization/finitedifference/fd.py	/^    learningRate = 0.1$/;"	v	class:FiniteDifferences
learningRate	tools/pybrain/pybrain/optimization/finitedifference/pgpe.py	/^    learningRate = 0.2    $/;"	v	class:PGPE
learningRate	tools/pybrain/pybrain/rl/learners/directsearch/policygradient.py	/^    learningRate = property(_getLearningRate, _setLearningRate)$/;"	v	class:PolicyGradientLearner
learningRate	tools/pybrain/pybrain/rl/learners/directsearch/rwr.py	/^    learningRate = 0.005$/;"	v	class:RWR
learningRate	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    learningRate = 0.5      # aka alpha: make sure this is being decreased by calls from the learning agent!$/;"	v	class:LinearFALearner
learningRateDecay	pybrain/optimization/finitedifference/fd.py	/^    learningRateDecay = None$/;"	v	class:FiniteDifferences
learningRateDecay	pybrain/rl/learners/valuebased/linearfa.py	/^    learningRateDecay = 100 # aka n_0, but counting decay-calls$/;"	v	class:LinearFALearner
learningRateDecay	tools/pybrain/pybrain/optimization/finitedifference/fd.py	/^    learningRateDecay = None$/;"	v	class:FiniteDifferences
learningRateDecay	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    learningRateDecay = 100 # aka n_0, but counting decay-calls$/;"	v	class:LinearFALearner
learningRateSigma	pybrain/optimization/distributionbased/ves.py	/^    learningRateSigma = None # default: the same than learningRate$/;"	v	class:VanillaGradientEvolutionStrategies
learningRateSigma	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    learningRateSigma = None # default: the same than learningRate$/;"	v	class:VanillaGradientEvolutionStrategies
leftordered	pybrain/tools/ibp.py	/^def leftordered(M):$/;"	f
leftordered	tools/pybrain/pybrain/tools/ibp.py	/^def leftordered(M):$/;"	f
length	pybrain/rl/environments/mazes/tasks/tmaze.py	/^    length = 10$/;"	v	class:TMaze
length	tools/pybrain/pybrain/rl/environments/mazes/tasks/tmaze.py	/^    length = 10$/;"	v	class:TMaze
license	tools/pybrain/setup.py	/^    license="BSD",$/;"	v
line	tools/pybrain/docs/code2tut.py	/^                line = line.strip()$/;"	v
line	tools/pybrain/docs/code2tut.py	/^        line = "  "+line$/;"	v
line	tools/pybrain/docs/code2tut.py	/^        line = line.replace('"""','')$/;"	v
line	tools/pybrain/docs/code2tut.py	/^        line = line.strip()+"\\n"$/;"	v
line	tools/pybrain/docs/code2tut.py	/^line = f_in.readline()$/;"	v
line	tools/pybrain/docs/code2tut.py	/^line= line.split('"')[1]             #  # PyBrain Tutorial "Classification ..."$/;"	v
linearComponent	pybrain/tools/rankingfunctions.py	/^    linearComponent = 0.$/;"	v	class:SmoothGiniRanking
linearComponent	tools/pybrain/pybrain/tools/rankingfunctions.py	/^    linearComponent = 0.$/;"	v	class:SmoothGiniRanking
linecomment	tools/pybrain/docs/code2tut.py	/^            linecomment = True$/;"	v
linecomment	tools/pybrain/docs/code2tut.py	/^    linecomment = False$/;"	v
linecomment	tools/pybrain/docs/code2tut.py	/^linecomment = False$/;"	v
linkFields	pybrain/datasets/dataset.py	/^    def linkFields(self, linklist):$/;"	m	class:DataSet
linkFields	tools/pybrain/pybrain/datasets/dataset.py	/^    def linkFields(self, linklist):$/;"	m	class:DataSet
linscale	pybrain/utilities.py	/^def linscale(d, lim):$/;"	f
linscale	tools/pybrain/pybrain/utilities.py	/^def linscale(d, lim):$/;"	f
listen	pybrain/tools/networking/udpconnection.py	/^    def listen(self):$/;"	m	class:UDPServer
listen	pybrain/tools/networking/udpconnection.py	/^    def listen(self, arrayList=None):$/;"	m	class:UDPClient
listen	tools/pybrain/pybrain/tools/networking/udpconnection.py	/^    def listen(self):$/;"	m	class:UDPServer
listen	tools/pybrain/pybrain/tools/networking/udpconnection.py	/^    def listen(self, arrayList=None):$/;"	m	class:UDPClient
listener	pybrain/optimization/optimizer.py	/^    listener = None$/;"	v	class:BlackBoxOptimizer
listener	tools/pybrain/pybrain/optimization/optimizer.py	/^    listener = None$/;"	v	class:BlackBoxOptimizer
load	pybrain/supervised/trainers/svmtrainer.py	/^    def load(self, filename):$/;"	m	class:SVMTrainer
load	pybrain/tools/datasettools.py	/^    def load(self, fname):$/;"	m	class:DataSetNormalizer
load	tools/pybrain/pybrain/supervised/trainers/svmtrainer.py	/^    def load(self, filename):$/;"	m	class:SVMTrainer
load	tools/pybrain/pybrain/tools/datasettools.py	/^    def load(self, fname):$/;"	m	class:DataSetNormalizer
loadConfig	pybrain/rl/environments/ode/environment.py	/^    def loadConfig(self, filename, reload=False):$/;"	m	class:ODEEnvironment
loadConfig	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def loadConfig(self, filename, reload=False):$/;"	m	class:ODEEnvironment
loadData	pybrain/tools/svmdata.py	/^    def loadData(self, fname):$/;"	m	class:SVMData
loadData	tools/pybrain/pybrain/tools/svmdata.py	/^    def loadData(self, fname):$/;"	m	class:SVMData
loadFromFile	pybrain/utilities.py	/^    def loadFromFile(cls, filename, format=None):$/;"	m	class:Serializable
loadFromFile	tools/pybrain/pybrain/utilities.py	/^    def loadFromFile(cls, filename, format=None):$/;"	m	class:Serializable
loadFromFileLike	pybrain/utilities.py	/^    def loadFromFileLike(cls, flo, format=None):$/;"	m	class:Serializable
loadFromFileLike	tools/pybrain/pybrain/utilities.py	/^    def loadFromFileLike(cls, flo, format=None):$/;"	m	class:Serializable
loadMATdata	pybrain/tools/svmdata.py	/^    def loadMATdata(self, fname):$/;"	m	class:SVMData
loadMATdata	tools/pybrain/pybrain/tools/svmdata.py	/^    def loadMATdata(self, fname):$/;"	m	class:SVMData
loadModel	pybrain/structure/modules/svmunit.py	/^    def loadModel(self, filename):$/;"	m	class:SVMUnit
loadModel	tools/pybrain/pybrain/structure/modules/svmunit.py	/^    def loadModel(self, filename):$/;"	m	class:SVMUnit
loadName	pybrain/tools/example_tools.py	/^    loadName = "none.wgt"$/;"	v	class:ExTools
loadName	tools/pybrain/pybrain/tools/example_tools.py	/^    loadName = "none.wgt"$/;"	v	class:ExTools
loadRawData	pybrain/tools/svmdata.py	/^    def loadRawData(self, fname):$/;"	m	class:SVMData
loadRawData	tools/pybrain/pybrain/tools/svmdata.py	/^    def loadRawData(self, fname):$/;"	m	class:SVMData
loadSVMdata	pybrain/tools/svmdata.py	/^    def loadSVMdata(self, fname):$/;"	m	class:SVMData
loadSVMdata	tools/pybrain/pybrain/tools/svmdata.py	/^    def loadSVMdata(self, fname):$/;"	m	class:SVMData
loadWeights	pybrain/tools/example_tools.py	/^    def loadWeights(self, filename):$/;"	m	class:ExTools
loadWeights	tools/pybrain/pybrain/tools/example_tools.py	/^    def loadWeights(self, filename):$/;"	m	class:ExTools
loadXODE	pybrain/rl/environments/ode/environment.py	/^    def loadXODE(self, filename, reload=False):$/;"	m	class:ODEEnvironment
loadXODE	pybrain/rl/environments/ode/instances/ccrl.py	/^    def loadXODE(self, filename, reload=False):$/;"	m	class:CCRLEnvironment
loadXODE	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def loadXODE(self, filename, reload=False):$/;"	m	class:ODEEnvironment
loadXODE	tools/pybrain/pybrain/rl/environments/ode/instances/ccrl.py	/^    def loadXODE(self, filename, reload=False):$/;"	m	class:CCRLEnvironment
load_libsvm	pybrain/datasets/classification.py	/^    def load_libsvm(cls, f):$/;"	m	class:ClassificationDataSet
load_libsvm	tools/pybrain/pybrain/datasets/classification.py	/^    def load_libsvm(cls, f):$/;"	m	class:ClassificationDataSet
load_matlab	pybrain/datasets/classification.py	/^    def load_matlab(cls, fname):$/;"	m	class:ClassificationDataSet
load_matlab	tools/pybrain/pybrain/datasets/classification.py	/^    def load_matlab(cls, fname):$/;"	m	class:ClassificationDataSet
load_pickle	pybrain/utilities.py	/^    def load_pickle(cls, flo):$/;"	m	class:Serializable
load_pickle	tools/pybrain/pybrain/utilities.py	/^    def load_pickle(cls, flo):$/;"	m	class:Serializable
localSearch	pybrain/optimization/memetic/memetic.py	/^    localSearch = HillClimber$/;"	v	class:MemeticSearch
localSearch	tools/pybrain/docs/tutorials/blackboxoptimization.py	/^                                              localSearch=CMAES).learn()$/;"	v
localSearch	tools/pybrain/docs/tutorials/blackboxoptimization.py	/^                                      localSearch=ES,$/;"	v
localSearch	tools/pybrain/docs/tutorials/blackboxoptimization.py	/^                                   localSearch=ExactNES,$/;"	v
localSearch	tools/pybrain/pybrain/optimization/memetic/memetic.py	/^    localSearch = HillClimber$/;"	v	class:MemeticSearch
localSearchArgs	pybrain/optimization/memetic/memetic.py	/^    localSearchArgs = {}$/;"	v	class:MemeticSearch
localSearchArgs	tools/pybrain/docs/tutorials/blackboxoptimization.py	/^                                      localSearchArgs={'mu': 5, 'lambada': 5}).learn()$/;"	v
localSearchArgs	tools/pybrain/docs/tutorials/blackboxoptimization.py	/^                                   localSearchArgs={'batchSize': 20}).learn()$/;"	v
localSearchArgs	tools/pybrain/pybrain/optimization/memetic/memetic.py	/^    localSearchArgs = {}$/;"	v	class:MemeticSearch
localSteps	pybrain/optimization/memetic/memetic.py	/^    localSteps = 50$/;"	v	class:MemeticSearch
localSteps	tools/pybrain/pybrain/optimization/memetic/memetic.py	/^    localSteps = 50$/;"	v	class:MemeticSearch
log2C	tools/pybrain/examples/supervised/neuralnets+svm/example_svm.py	/^log2C=0.   # degree of slack$/;"	v
log2g	tools/pybrain/examples/supervised/neuralnets+svm/example_svm.py	/^log2g=1.1  # width of RBF kernels$/;"	v
logging	pybrain/rl/agents/logging.py	/^    logging = True$/;"	v	class:LoggingAgent
logging	tools/pybrain/examples/rl/environments/linear_fa/xor.py	/^    logging = False$/;"	v	class:LinFA_QAgent
logging	tools/pybrain/pybrain/rl/agents/logging.py	/^    logging = True$/;"	v	class:LoggingAgent
longPoleAngle	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^double longPoleAngle;$/;"	v
longPoleAngle	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^double longPoleAngle;$/;"	v
lowerDimensionBound	pybrain/supervised/knn/lsh/nearoptimal.py	/^    lowerDimensionBound = 24$/;"	v	class:MultiDimHash
lowerDimensionBound	tools/pybrain/pybrain/supervised/knn/lsh/nearoptimal.py	/^    lowerDimensionBound = 24$/;"	v	class:MultiDimHash
m	pybrain/tools/mixtures/mixtureofgaussian.py	/^    m = MixtureOfGaussians("rastrigin", 10)$/;"	v	class:MixtureOfGaussians
m	pybrain/tools/mixtures/mogpuremax.py	/^    m = MixtureOfGaussians()$/;"	v	class:MixtureOfGaussians
m	tools/pybrain/pybrain/tools/mixtures/mixtureofgaussian.py	/^    m = MixtureOfGaussians("rastrigin", 10)$/;"	v	class:MixtureOfGaussians
m	tools/pybrain/pybrain/tools/mixtures/mogpuremax.py	/^    m = MixtureOfGaussians()$/;"	v	class:MixtureOfGaussians
m1	pybrain/rl/environments/classic/acrobot.py	/^    m1 = 1.0$/;"	v	class:AcrobotTask
m1	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    m1 = 1.0$/;"	v	class:AcrobotTask
m2	pybrain/rl/environments/classic/acrobot.py	/^    m2 = 1.0$/;"	v	class:AcrobotTask
m2	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    m2 = 1.0$/;"	v	class:AcrobotTask
main	compare.py	/^def main():$/;"	f
makeCentered	pybrain/auxiliary/pca.py	/^def makeCentered(data):$/;"	f
makeCentered	tools/pybrain/pybrain/auxiliary/pca.py	/^def makeCentered(data):$/;"	f
makeData	tools/pybrain/examples/unsupervised/lsh.py	/^def makeData(amount = 10000):$/;"	f
makeMnistDataSets	pybrain/tools/datasets/mnist.py	/^def makeMnistDataSets(path):$/;"	f
makeMnistDataSets	tools/pybrain/pybrain/tools/datasets/mnist.py	/^def makeMnistDataSets(path):$/;"	f
makePoint	tools/pybrain/examples/unsupervised/lsh.py	/^    def makePoint():$/;"	f	function:makeData
make_test_suite	pybrain/tests/runtests.py	/^def make_test_suite():$/;"	f
make_test_suite	tools/pybrain/pybrain/tests/runtests.py	/^def make_test_suite():$/;"	f
markov	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^bool markov;$/;"	v
markov	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^bool markov;$/;"	v
maskFlipProbability	pybrain/structure/evolvables/maskedparameters.py	/^    maskFlipProbability = 0.05$/;"	v	class:MaskedParameters
maskFlipProbability	tools/pybrain/pybrain/structure/evolvables/maskedparameters.py	/^    maskFlipProbability = 0.05$/;"	v	class:MaskedParameters
maskOnProbability	pybrain/structure/evolvables/maskedparameters.py	/^    maskOnProbability = 0.5$/;"	v	class:MaskedParameters
maskOnProbability	tools/pybrain/pybrain/structure/evolvables/maskedparameters.py	/^    maskOnProbability = 0.5$/;"	v	class:MaskedParameters
mass	pybrain/rl/environments/shipsteer/shipsteer.py	/^    mass = 1000.   # mass of ship in unclear units$/;"	v	class:ShipSteeringEnvironment
mass	tools/pybrain/pybrain/rl/environments/shipsteer/shipsteer.py	/^    mass = 1000.   # mass of ship in unclear units$/;"	v	class:ShipSteeringEnvironment
master_doc	tools/pybrain/docs/sphinx/conf.py	/^master_doc = 'index'$/;"	v
matchingDict	pybrain/utilities.py	/^def matchingDict(d, selection, require_existence=False):$/;"	f
matchingDict	tools/pybrain/pybrain/utilities.py	/^def matchingDict(d, selection, require_existence=False):$/;"	f
maxComplexity	pybrain/structure/evolvables/maskedparameters.py	/^    maxComplexity = None$/;"	v	class:MaskedParameters
maxComplexity	tools/pybrain/pybrain/structure/evolvables/maskedparameters.py	/^    maxComplexity = None$/;"	v	class:MaskedParameters
maxCond	pybrain/rl/environments/functions/multimodal.py	/^    maxCond = 1000.$/;"	v	class:GallagherGauss101MeFunction
maxCond	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    maxCond = 1000.$/;"	v	class:GallagherGauss101MeFunction
maxEpochs	pybrain/rl/learners/directsearch/rwr.py	/^    maxEpochs = 20$/;"	v	class:RWR
maxEpochs	tools/pybrain/pybrain/rl/learners/directsearch/rwr.py	/^    maxEpochs = 20$/;"	v	class:RWR
maxEvals	tools/pybrain/docs/tutorials/blackboxoptimization.py	/^maxEvals = 1000$/;"	v
maxEvaluations	pybrain/optimization/optimizer.py	/^    maxEvaluations = 1e6 $/;"	v	class:BlackBoxOptimizer
maxEvaluations	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    maxEvaluations = None$/;"	v	class:Coevolution
maxEvaluations	tools/pybrain/examples/rl/environments/capturegame/evolvingplayer.py	/^             maxEvaluations = 50)$/;"	v
maxEvaluations	tools/pybrain/pybrain/optimization/optimizer.py	/^    maxEvaluations = 1e6 $/;"	v	class:BlackBoxOptimizer
maxEvaluations	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    maxEvaluations = None$/;"	v	class:Coevolution
maxGames	pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    maxGames = 200$/;"	v	class:HandicapCaptureTask
maxGames	pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    maxGames = 3$/;"	v	class:RelativeGomokuTask
maxGames	pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    maxGames = 3$/;"	v	class:RelativeCaptureTask
maxGames	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    maxGames = 200$/;"	v	class:HandicapCaptureTask
maxGames	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    maxGames = 3$/;"	v	class:RelativeGomokuTask
maxGames	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    maxGames = 3$/;"	v	class:RelativeCaptureTask
maxGenerations	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    maxGenerations = None$/;"	v	class:Coevolution
maxGenerations	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    maxGenerations = None$/;"	v	class:Coevolution
maxLearningSteps	pybrain/optimization/optimizer.py	/^    maxLearningSteps = None    $/;"	v	class:BlackBoxOptimizer
maxLearningSteps	tools/pybrain/pybrain/optimization/optimizer.py	/^    maxLearningSteps = None    $/;"	v	class:BlackBoxOptimizer
maxSpeed1	pybrain/rl/environments/classic/acrobot.py	/^    maxSpeed1 = 4 * pi$/;"	v	class:AcrobotTask
maxSpeed1	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    maxSpeed1 = 4 * pi$/;"	v	class:AcrobotTask
maxSpeed2	pybrain/rl/environments/classic/acrobot.py	/^    maxSpeed2 = 9 * pi$/;"	v	class:AcrobotTask
maxSpeed2	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    maxSpeed2 = 9 * pi$/;"	v	class:AcrobotTask
maxSteps	pybrain/rl/environments/classic/acrobot.py	/^    maxSteps = 99$/;"	v	class:SingleArmSwinger
maxSteps	pybrain/rl/environments/classic/acrobot.py	/^    maxSteps = 999$/;"	v	class:AcrobotTask
maxSteps	pybrain/rl/environments/classic/mountaincar.py	/^    maxSteps = 999$/;"	v	class:MountainCar
maxSteps	pybrain/rl/environments/mazes/tasks/pomdp.py	/^    maxSteps = None$/;"	v	class:POMDPTask
maxSteps	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    maxSteps = 99$/;"	v	class:SingleArmSwinger
maxSteps	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    maxSteps = 999$/;"	v	class:AcrobotTask
maxSteps	tools/pybrain/pybrain/rl/environments/classic/mountaincar.py	/^    maxSteps = 999$/;"	v	class:MountainCar
maxSteps	tools/pybrain/pybrain/rl/environments/mazes/tasks/pomdp.py	/^    maxSteps = None$/;"	v	class:POMDPTask
maxTemperature	pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    maxTemperature = 0.2$/;"	v	class:RelativeGomokuTask
maxTemperature	pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    maxTemperature = 0.2$/;"	v	class:RelativeCaptureTask
maxTemperature	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    maxTemperature = 0.2$/;"	v	class:RelativeGomokuTask
maxTemperature	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    maxTemperature = 0.2$/;"	v	class:RelativeCaptureTask
maxoffset	pybrain/structure/modules/lstm.py	/^    maxoffset = 0$/;"	v	class:LSTMLayer
maxoffset	pybrain/structure/modules/mdlstm.py	/^    maxoffset = 0$/;"	v	class:MDLSTMLayer
maxoffset	tools/pybrain/pybrain/structure/modules/lstm.py	/^    maxoffset = 0$/;"	v	class:LSTMLayer
maxoffset	tools/pybrain/pybrain/structure/modules/mdlstm.py	/^    maxoffset = 0$/;"	v	class:MDLSTMLayer
maxsteps	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^int maxsteps;$/;"	v
maxsteps	tools/pybrain/examples/rl/environments/shipsteer/shipbench_sde.py	/^maxsteps = 500$/;"	v
maxsteps	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^int maxsteps;$/;"	v
mazeTable	pybrain/rl/environments/mazes/maze.py	/^    mazeTable = None$/;"	v	class:Maze
mazeTable	tools/pybrain/pybrain/rl/environments/mazes/maze.py	/^    mazeTable = None$/;"	v	class:Maze
mazeclass	pybrain/rl/environments/mazes/tasks/maze.py	/^    mazeclass = Maze$/;"	v	class:MazeTask
mazeclass	pybrain/rl/environments/mazes/tasks/maze89state.py	/^    mazeclass = PolarMaze$/;"	v	class:EightyNineStateMaze
mazeclass	pybrain/rl/environments/mazes/tasks/shuttle.py	/^    mazeclass = PolarMaze$/;"	v	class:ShuttleDocking
mazeclass	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze.py	/^    mazeclass = Maze$/;"	v	class:MazeTask
mazeclass	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze89state.py	/^    mazeclass = PolarMaze$/;"	v	class:EightyNineStateMaze
mazeclass	tools/pybrain/pybrain/rl/environments/mazes/tasks/shuttle.py	/^    mazeclass = PolarMaze$/;"	v	class:ShuttleDocking
mc	pybrain/rl/environments/cartpole/cartpole.py	/^    mc = 1.0$/;"	v	class:CartPoleEnvironment
mc	tools/pybrain/pybrain/rl/environments/cartpole/cartpole.py	/^    mc = 1.0$/;"	v	class:CartPoleEnvironment
means	tools/pybrain/docs/tutorials/fnn.py	/^means = [(-1, 0), (2, 4), (3, 1)]$/;"	v
meatSlice	pybrain/structure/modules/mdlstm.py	/^    def meatSlice(self):$/;"	m	class:MDLSTMLayer
meatSlice	tools/pybrain/pybrain/structure/modules/mdlstm.py	/^    def meatSlice(self):$/;"	m	class:MDLSTMLayer
memoize	pybrain/utilities.py	/^def memoize(func):$/;"	f
memoize	tools/pybrain/pybrain/utilities.py	/^def memoize(func):$/;"	f
memory	pybrain/optimization/populationbased/pso.py	/^    memory = 2.0$/;"	v	class:ParticleSwarmOptimizer
memory	tools/pybrain/pybrain/optimization/populationbased/pso.py	/^    memory = 2.0$/;"	v	class:ParticleSwarmOptimizer
merge	pybrain/rl/environments/ode/tools/xodetools.py	/^    def merge(self, xodefile, joinLevel='space'):$/;"	m	class:XODEfile
merge	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def merge(self, xodefile, joinLevel='space'):$/;"	m	class:XODEfile
metascale	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^metascale = 8.$/;"	v
minEvals	pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    minEvals = 5$/;"	v	class:HandicapCaptureTask
minEvals	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    minEvals = 5$/;"	v	class:HandicapCaptureTask
minIter	examples/problem_settings.py	/^minIter = 8e2$/;"	v
minIter	settings.py	/^minIter = 8e2$/;"	v
minReward	pybrain/rl/environments/mazes/tasks/maze4x3.py	/^    minReward = -1$/;"	v	class:FourByThreeMaze
minReward	pybrain/rl/environments/mazes/tasks/pomdp.py	/^    minReward = 0$/;"	v	class:POMDPTask
minReward	pybrain/rl/environments/mazes/tasks/tiger.py	/^    minReward = -100$/;"	v	class:TigerTask
minReward	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze4x3.py	/^    minReward = -1$/;"	v	class:FourByThreeMaze
minReward	tools/pybrain/pybrain/rl/environments/mazes/tasks/pomdp.py	/^    minReward = 0$/;"	v	class:POMDPTask
minReward	tools/pybrain/pybrain/rl/environments/mazes/tasks/tiger.py	/^    minReward = -100$/;"	v	class:TigerTask
minTemperature	pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    minTemperature = 0$/;"	v	class:RelativeGomokuTask
minTemperature	pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    minTemperature = 0$/;"	v	class:RelativeCaptureTask
minTemperature	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    minTemperature = 0$/;"	v	class:RelativeGomokuTask
minTemperature	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    minTemperature = 0$/;"	v	class:RelativeCaptureTask
minimize	pybrain/optimization/optimizer.py	/^    minimize = property(_getMinimize, _setMinimize)$/;"	v	class:BlackBoxOptimizer
minimize	tools/pybrain/pybrain/optimization/optimizer.py	/^    minimize = property(_getMinimize, _setMinimize)$/;"	v	class:BlackBoxOptimizer
minimumCenterWeight	pybrain/optimization/distributionbased/fem.py	/^    minimumCenterWeight = 0.01$/;"	v	class:FEM
minimumCenterWeight	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^    minimumCenterWeight = 0.01$/;"	v	class:FEM
missingDependencies	pybrain/tests/runtests.py	/^def missingDependencies(target_module):$/;"	f
missingDependencies	tools/pybrain/pybrain/tests/runtests.py	/^def missingDependencies(target_module):$/;"	f
modelfile	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^char modelfile[100];$/;"	v
modelfile	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^char modelfile[100];$/;"	v
module	pybrain/rl/explorers/discrete/discrete.py	/^    module = property(_getModule, _setModule)/;"	v	class:DiscreteExplorer
module	pybrain/rl/explorers/discrete/discretesde.py	/^    module = property(_getModule, _setModule)$/;"	v	class:DiscreteStateDependentExplorer
module	pybrain/rl/learners/directsearch/policygradient.py	/^    module = property(_getModule, _setModule)$/;"	v	class:PolicyGradientLearner
module	pybrain/rl/learners/learner.py	/^    module = None$/;"	v	class:Learner
module	pybrain/rl/learners/valuebased/valuebased.py	/^    module = property(_getModule, _setModule)$/;"	v	class:ValueBasedLearner
module	pybrain/supervised/trainers/trainer.py	/^    module = None$/;"	v	class:Trainer
module	tools/pybrain/examples/rl/valuebased/nfq.py	/^module = ActionValueNetwork(4, 3)$/;"	v
module	tools/pybrain/pybrain/rl/explorers/discrete/discrete.py	/^    module = property(_getModule, _setModule)/;"	v	class:DiscreteExplorer
module	tools/pybrain/pybrain/rl/explorers/discrete/discretesde.py	/^    module = property(_getModule, _setModule)$/;"	v	class:DiscreteStateDependentExplorer
module	tools/pybrain/pybrain/rl/learners/directsearch/policygradient.py	/^    module = property(_getModule, _setModule)$/;"	v	class:PolicyGradientLearner
module	tools/pybrain/pybrain/rl/learners/learner.py	/^    module = None$/;"	v	class:Learner
module	tools/pybrain/pybrain/rl/learners/valuebased/valuebased.py	/^    module = property(_getModule, _setModule)$/;"	v	class:ValueBasedLearner
module	tools/pybrain/pybrain/supervised/trainers/trainer.py	/^    module = None$/;"	v	class:Trainer
modules	pybrain/tools/customxml/networkreader.py	/^    modules = {}$/;"	v	class:NetworkReader
modules	tools/pybrain/pybrain/tools/customxml/networkreader.py	/^    modules = {}$/;"	v	class:NetworkReader
momentum	pybrain/optimization/distributionbased/ves.py	/^    momentum = None$/;"	v	class:VanillaGradientEvolutionStrategies
momentum	pybrain/optimization/finitedifference/fd.py	/^    momentum = 0.0$/;"	v	class:FiniteDifferences
momentum	pybrain/optimization/finitedifference/pgpe.py	/^    momentum = 0.0$/;"	v	class:PGPE
momentum	pybrain/rl/learners/directsearch/rwr.py	/^    momentum = 0.9$/;"	v	class:RWR
momentum	tools/pybrain/examples/rl/environments/ode/acrobot_pgpe.py	/^                                    momentum = 0.0,$/;"	v
momentum	tools/pybrain/examples/rl/environments/shipsteer/shipbench_pgpe.py	/^                                    momentum = 0.0,$/;"	v
momentum	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    momentum = None$/;"	v	class:VanillaGradientEvolutionStrategies
momentum	tools/pybrain/pybrain/optimization/finitedifference/fd.py	/^    momentum = 0.0$/;"	v	class:FiniteDifferences
momentum	tools/pybrain/pybrain/optimization/finitedifference/pgpe.py	/^    momentum = 0.0$/;"	v	class:PGPE
momentum	tools/pybrain/pybrain/rl/learners/directsearch/rwr.py	/^    momentum = 0.9$/;"	v	class:RWR
mother	pybrain/structure/connections/shared.py	/^    mother = None$/;"	v	class:SharedConnection
mother	tools/pybrain/pybrain/structure/connections/shared.py	/^    mother = None$/;"	v	class:SharedConnection
mothers	pybrain/tools/customxml/networkreader.py	/^    mothers = {}$/;"	v	class:NetworkReader
mothers	tools/pybrain/pybrain/tools/customxml/networkreader.py	/^    mothers = {}$/;"	v	class:NetworkReader
move	pybrain/optimization/populationbased/pso.py	/^    def move(self):$/;"	m	class:Particle
move	tools/pybrain/pybrain/optimization/populationbased/pso.py	/^    def move(self):$/;"	m	class:Particle
mp	pybrain/rl/environments/cartpole/cartpole.py	/^    mp = 0.1$/;"	v	class:CartPoleEnvironment
mp	tools/pybrain/pybrain/rl/environments/cartpole/cartpole.py	/^    mp = 0.1$/;"	v	class:CartPoleEnvironment
mu	pybrain/optimization/memetic/innermemetic.py	/^    mu = 5$/;"	v	class:InnerMemeticSearch
mu	pybrain/optimization/populationbased/es.py	/^    mu = 50$/;"	v	class:ES
mu	tools/pybrain/pybrain/optimization/memetic/innermemetic.py	/^    mu = 5$/;"	v	class:InnerMemeticSearch
mu	tools/pybrain/pybrain/optimization/populationbased/es.py	/^    mu = 50$/;"	v	class:ES
muMultiplier	pybrain/optimization/distributionbased/fem.py	/^    muMultiplier = 1.$/;"	v	class:FEM
muMultiplier	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^    muMultiplier = 1.$/;"	v	class:FEM
multiEvaluate	pybrain/utilities.py	/^def multiEvaluate(repeat):$/;"	f
multiEvaluate	tools/pybrain/pybrain/utilities.py	/^def multiEvaluate(repeat):$/;"	f
multivariateCauchy	pybrain/tools/functions.py	/^def multivariateCauchy(mu, sigma, onlyDiagonal=True):$/;"	f
multivariateCauchy	tools/pybrain/pybrain/tools/functions.py	/^def multivariateCauchy(mu, sigma, onlyDiagonal=True):$/;"	f
multivariateNormalPdf	pybrain/tools/functions.py	/^def multivariateNormalPdf(z, x, sigma):$/;"	f
multivariateNormalPdf	tools/pybrain/pybrain/tools/functions.py	/^def multivariateNormalPdf(z, x, sigma):$/;"	f
mustMaximize	pybrain/optimization/distributionbased/rank1.py	/^    mustMaximize = True$/;"	v	class:Rank1NES
mustMaximize	pybrain/optimization/distributionbased/snes.py	/^    mustMaximize = True$/;"	v	class:SNES
mustMaximize	pybrain/optimization/distributionbased/ves.py	/^    mustMaximize = True$/;"	v	class:VanillaGradientEvolutionStrategies
mustMaximize	pybrain/optimization/distributionbased/xnes.py	/^    mustMaximize = True$/;"	v	class:XNES
mustMaximize	pybrain/optimization/optimizer.py	/^    mustMaximize = False$/;"	v	class:BlackBoxOptimizer
mustMaximize	pybrain/optimization/populationbased/es.py	/^    mustMaximize = True$/;"	v	class:ES
mustMaximize	pybrain/optimization/populationbased/evolution.py	/^    mustMaximize = True$/;"	v	class:Evolution
mustMaximize	pybrain/optimization/populationbased/ga.py	/^    mustMaximize = True$/;"	v	class:GA
mustMaximize	pybrain/optimization/populationbased/multiobjective/nsga2.py	/^    mustMaximize = True$/;"	v	class:MultiObjectiveGA
mustMaximize	pybrain/optimization/populationbased/pso.py	/^    mustMaximize = True$/;"	v	class:ParticleSwarmOptimizer
mustMaximize	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^    mustMaximize = True$/;"	v	class:Rank1NES
mustMaximize	tools/pybrain/pybrain/optimization/distributionbased/snes.py	/^    mustMaximize = True$/;"	v	class:SNES
mustMaximize	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    mustMaximize = True$/;"	v	class:VanillaGradientEvolutionStrategies
mustMaximize	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    mustMaximize = True$/;"	v	class:XNES
mustMaximize	tools/pybrain/pybrain/optimization/optimizer.py	/^    mustMaximize = False$/;"	v	class:BlackBoxOptimizer
mustMaximize	tools/pybrain/pybrain/optimization/populationbased/es.py	/^    mustMaximize = True$/;"	v	class:ES
mustMaximize	tools/pybrain/pybrain/optimization/populationbased/evolution.py	/^    mustMaximize = True$/;"	v	class:Evolution
mustMaximize	tools/pybrain/pybrain/optimization/populationbased/ga.py	/^    mustMaximize = True$/;"	v	class:GA
mustMaximize	tools/pybrain/pybrain/optimization/populationbased/multiobjective/nsga2.py	/^    mustMaximize = True$/;"	v	class:MultiObjectiveGA
mustMaximize	tools/pybrain/pybrain/optimization/populationbased/pso.py	/^    mustMaximize = True$/;"	v	class:ParticleSwarmOptimizer
mustMinimize	pybrain/optimization/distributionbased/cmaes.py	/^    mustMinimize = True$/;"	v	class:CMAES
mustMinimize	pybrain/optimization/neldermead.py	/^    mustMinimize = True$/;"	v	class:NelderMead
mustMinimize	pybrain/optimization/optimizer.py	/^    mustMinimize = False$/;"	v	class:BlackBoxOptimizer
mustMinimize	tools/pybrain/pybrain/optimization/distributionbased/cmaes.py	/^    mustMinimize = True$/;"	v	class:CMAES
mustMinimize	tools/pybrain/pybrain/optimization/neldermead.py	/^    mustMinimize = True$/;"	v	class:NelderMead
mustMinimize	tools/pybrain/pybrain/optimization/optimizer.py	/^    mustMinimize = False$/;"	v	class:BlackBoxOptimizer
mutate	pybrain/structure/evolvables/cheaplycopiable.py	/^    def mutate(self, *args, **kwargs):$/;"	m	class:CheaplyCopiable
mutate	pybrain/structure/evolvables/evolvable.py	/^    def mutate(self, **args):$/;"	m	class:Evolvable
mutate	pybrain/structure/evolvables/maskedparameters.py	/^    def mutate(self):$/;"	m	class:MaskedParameters
mutate	pybrain/structure/parametercontainer.py	/^    def mutate(self):$/;"	m	class:ParameterContainer
mutate	pybrain/tests/optimizationtest.py	/^    def mutate(self):      self.x += random() - 0.3$/;"	m	class:SimpleEvo
mutate	tools/pybrain/pybrain/structure/evolvables/cheaplycopiable.py	/^    def mutate(self, *args, **kwargs):$/;"	m	class:CheaplyCopiable
mutate	tools/pybrain/pybrain/structure/evolvables/evolvable.py	/^    def mutate(self, **args):$/;"	m	class:Evolvable
mutate	tools/pybrain/pybrain/structure/evolvables/maskedparameters.py	/^    def mutate(self):$/;"	m	class:MaskedParameters
mutate	tools/pybrain/pybrain/structure/parametercontainer.py	/^    def mutate(self):$/;"	m	class:ParameterContainer
mutate	tools/pybrain/pybrain/tests/optimizationtest.py	/^    def mutate(self):      self.x += random() - 0.3$/;"	m	class:SimpleEvo
mutated	pybrain/optimization/populationbased/ga.py	/^    def mutated(self, indiv):$/;"	m	class:GA
mutated	tools/pybrain/pybrain/optimization/populationbased/ga.py	/^    def mutated(self, indiv):$/;"	m	class:GA
mutationAlpha	pybrain/supervised/trainers/evolino.py	/^    mutationAlpha = property(lambda self: self._mutationAlpha)$/;"	v	class:EvolinoTrainer
mutationAlpha	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^    mutationAlpha = 0.001,$/;"	v
mutationAlpha	tools/pybrain/pybrain/supervised/trainers/evolino.py	/^    mutationAlpha = property(lambda self: self._mutationAlpha)$/;"	v	class:EvolinoTrainer
mutationProb	pybrain/optimization/populationbased/ga.py	/^    mutationProb = 0.1$/;"	v	class:GA
mutationProb	tools/pybrain/pybrain/optimization/populationbased/ga.py	/^    mutationProb = 0.1$/;"	v	class:GA
mutationStd	pybrain/structure/parametercontainer.py	/^    mutationStd = 0.1$/;"	v	class:ParameterContainer
mutationStd	tools/pybrain/pybrain/structure/parametercontainer.py	/^    mutationStd = 0.1$/;"	v	class:ParameterContainer
mutationStdDev	pybrain/optimization/populationbased/ga.py	/^    mutationStdDev = 0.5$/;"	v	class:GA
mutationStdDev	pybrain/optimization/populationbased/multiobjective/nsga2.py	/^    mutationStdDev = 1.$/;"	v	class:MultiObjectiveGA
mutationStdDev	tools/pybrain/pybrain/optimization/populationbased/ga.py	/^    mutationStdDev = 0.5$/;"	v	class:GA
mutationStdDev	tools/pybrain/pybrain/optimization/populationbased/multiobjective/nsga2.py	/^    mutationStdDev = 1.$/;"	v	class:MultiObjectiveGA
mutationStdev	pybrain/structure/evolvables/maskedparameters.py	/^    mutationStdev = 0.1$/;"	v	class:MaskedParameters
mutationStdev	tools/pybrain/pybrain/structure/evolvables/maskedparameters.py	/^    mutationStdev = 0.1$/;"	v	class:MaskedParameters
mutationVariate	pybrain/supervised/evolino/gfilter.py	/^    mutationVariate = None$/;"	v	class:SimpleMutation
mutationVariate	pybrain/supervised/trainers/evolino.py	/^    mutationVariate = property(lambda self: self._mutationVariate)$/;"	v	class:EvolinoTrainer
mutationVariate	tools/pybrain/pybrain/supervised/evolino/gfilter.py	/^    mutationVariate = None$/;"	v	class:SimpleMutation
mutationVariate	tools/pybrain/pybrain/supervised/trainers/evolino.py	/^    mutationVariate = property(lambda self: self._mutationVariate)$/;"	v	class:EvolinoTrainer
mutative	pybrain/optimization/distributionbased/fem.py	/^    mutative = False$/;"	v	class:FEM
mutative	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^    mutative = False$/;"	v	class:FEM
n	examples/problem_settings.py	/^n = len(iniTheta) # dimension of the theta$/;"	v
n	settings.py	/^n = len(iniTheta) # dimension of the theta$/;"	v
n	tools/pybrain/docs/tutorials/networks.py	/^n = FeedForwardNetwork()$/;"	v
n	tools/pybrain/examples/optimization/multiobjective/nsga2.py	/^n = MultiObjectiveGA(f, x0, storeAllEvaluations = True)$/;"	v
n	tools/pybrain/examples/rl/environments/capturegame/pente.py	/^n = ConvolutionalBoardNetwork(dim, 5, 3)$/;"	v
n2	tools/pybrain/docs/tutorials/networks.py	/^n2 = RecurrentNetwork(name='net2')$/;"	v
n3	tools/pybrain/docs/tutorials/networks.py	/^n3 = buildNetwork(2, 3, 1, bias=False)$/;"	v
nBurstMutationEpochs	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^    nBurstMutationEpochs = numpy.Infinity,$/;"	v
nCombinations	pybrain/supervised/trainers/evolino.py	/^    nCombinations = property(lambda self: self._nCombinations)$/;"	v	class:EvolinoTrainer
nCombinations	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^    nCombinations = 1,$/;"	v
nCombinations	tools/pybrain/pybrain/supervised/trainers/evolino.py	/^    nCombinations = property(lambda self: self._nCombinations)$/;"	v	class:EvolinoTrainer
nParents	pybrain/supervised/trainers/evolino.py	/^    nParents = property(lambda self: self._nParents)$/;"	v	class:EvolinoTrainer
nParents	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^    nParents = 8,$/;"	v
nParents	tools/pybrain/pybrain/supervised/trainers/evolino.py	/^    nParents = property(lambda self: self._nParents)$/;"	v	class:EvolinoTrainer
nPts	pybrain/supervised/trainers/svmtrainer.py	/^    nPts = 13$/;"	v	class:GridSearchDOE
nPts	tools/pybrain/pybrain/supervised/trainers/svmtrainer.py	/^    nPts = 13$/;"	v	class:GridSearchDOE
n_to_one	pybrain/utilities.py	/^def n_to_one(arr):$/;"	f
n_to_one	tools/pybrain/pybrain/utilities.py	/^def n_to_one(arr):$/;"	f
nactions	pybrain/rl/environments/classic/acrobot.py	/^    nactions = len(action_list)$/;"	v	class:AcrobotTask
nactions	pybrain/rl/environments/classic/mountaincar.py	/^    nactions = len(action_list)$/;"	v	class:MountainCar
nactions	pybrain/rl/environments/classic/xor.py	/^    nactions = 2$/;"	v	class:XORTask
nactions	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    nactions = len(action_list)$/;"	v	class:AcrobotTask
nactions	tools/pybrain/pybrain/rl/environments/classic/mountaincar.py	/^    nactions = len(action_list)$/;"	v	class:MountainCar
nactions	tools/pybrain/pybrain/rl/environments/classic/xor.py	/^    nactions = 2$/;"	v	class:XORTask
name	pybrain/structure/connections/shared.py	/^    name = property(_getName, _setName)$/;"	v	class:SharedConnection
name	pybrain/utilities.py	/^    name = property(_getName, _setName)$/;"	v	class:Named
name	tools/pybrain/pybrain/structure/connections/shared.py	/^    name = property(_getName, _setName)$/;"	v	class:SharedConnection
name	tools/pybrain/pybrain/utilities.py	/^    name = property(_getName, _setName)$/;"	v	class:Named
name	tools/pybrain/setup.py	/^    name="PyBrain",$/;"	v
nbAttributes	pybrain/rl/environments/ode/tools/xmltools.py	/^    def nbAttributes(self):$/;"	m	class:XMLstruct
nbAttributes	tools/pybrain/pybrain/rl/environments/ode/tools/xmltools.py	/^    def nbAttributes(self):$/;"	m	class:XMLstruct
nbparams	pybrain/structure/connections/shared.py	/^    nbparams = None$/;"	v	class:MotherConnection
nbparams	tools/pybrain/pybrain/structure/connections/shared.py	/^    nbparams = None$/;"	v	class:MotherConnection
nearlyEqual	pybrain/tests/unittests/structure/networks/test_borderswipingnetwork.py	/^def nearlyEqual(lst1, lst2, tolerance=0.001):$/;"	f
nearlyEqual	tools/pybrain/pybrain/tests/unittests/structure/networks/test_borderswipingnetwork.py	/^def nearlyEqual(lst1, lst2, tolerance=0.001):$/;"	f
need_next_action	pybrain/rl/learners/valuebased/linearfa.py	/^    need_next_action = [LSPI, SARSALambda_LinFA]$/;"	v	class:LearningTester
need_next_action	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    need_next_action = [LSPI, SARSALambda_LinFA]$/;"	v	class:LearningTester
neighbourfunction	pybrain/optimization/populationbased/pso.py	/^    neighbourfunction = None$/;"	v	class:ParticleSwarmOptimizer
neighbourfunction	tools/pybrain/pybrain/optimization/populationbased/pso.py	/^    neighbourfunction = None$/;"	v	class:ParticleSwarmOptimizer
net	tools/pybrain/examples/optimization/optimizers_for_rl.py	/^net = buildNetwork(task.outdim, 1, task.indim)$/;"	v
net	tools/pybrain/examples/rl/environments/capturegame/evolvingplayer.py	/^    net = CaptureGameNetwork(size = size, hsize = 2, simpleborders = True)$/;"	v
net	tools/pybrain/examples/rl/environments/capturegame/evolvingplayer.py	/^    net = buildNetwork(task.outdim, task.indim, outclass = SigmoidLayer)$/;"	v
net	tools/pybrain/examples/rl/environments/capturegame/evolvingplayer.py	/^net = CheaplyCopiable(net)$/;"	v
net	tools/pybrain/examples/rl/environments/capturegame/minitournament.py	/^net = buildNetwork(game.outdim, game.indim, outclass = SigmoidLayer)$/;"	v
net	tools/pybrain/examples/rl/environments/cartpole/cart_all.py	/^        net = buildNetwork(4, 1, bias=False)$/;"	v
net	tools/pybrain/examples/rl/environments/cartpole/cart_cma.py	/^    net = buildNetwork(4, 1, bias=False)$/;"	v
net	tools/pybrain/examples/rl/environments/cartpole/cart_enac.py	/^    net = buildNetwork(4, 1, bias=False)$/;"	v
net	tools/pybrain/examples/rl/environments/cartpole/cart_fem.py	/^    net = buildNetwork(4, 1, bias=False)$/;"	v
net	tools/pybrain/examples/rl/environments/cartpole/cart_nes.py	/^    net = buildNetwork(4, 1, bias=False)$/;"	v
net	tools/pybrain/examples/rl/environments/cartpole/cart_pgpe.py	/^    net = buildNetwork(4, 1, bias=False)$/;"	v
net	tools/pybrain/examples/rl/environments/cartpole/cart_reinf.py	/^    net = buildNetwork(4, 1, bias=False)$/;"	v
net	tools/pybrain/examples/rl/environments/cartpole/play_cartpole.py	/^net = buildNetwork(4, 1, bias=False)$/;"	v
net	tools/pybrain/examples/rl/environments/flexcube/flexcube_pgpe.py	/^    net = buildNetwork(len(task.getObservation()), hiddenUnits, env.actLen, outclass=TanhLayer)    $/;"	v
net	tools/pybrain/examples/rl/environments/flexcube/flexcube_spsa.py	/^    net = buildNetwork(len(task.getObservation()), hiddenUnits, env.actLen, outclass=TanhLayer)    $/;"	v
net	tools/pybrain/examples/rl/environments/ode/acrobot_fd.py	/^    net = buildNetwork(len(task.getObservation()), env.actLen, outclass=TanhLayer)    $/;"	v
net	tools/pybrain/examples/rl/environments/ode/acrobot_pgpe.py	/^    net = buildNetwork(len(task.getObservation()), env.actLen, outclass=TanhLayer)    $/;"	v
net	tools/pybrain/examples/rl/environments/ode/ccrl_glass_pgpe.py	/^    net = buildNetwork(len(task.getObservation()), hiddenUnits, env.actLen, outclass=TanhLayer) #, hiddenUnits    $/;"	v
net	tools/pybrain/examples/rl/environments/ode/ccrl_plate_pgpe.py	/^    net = buildNetwork(len(task.getObservation()), hiddenUnits, env.actLen, outclass=TanhLayer)    $/;"	v
net	tools/pybrain/examples/rl/environments/ode/johnnie_pgpe.py	/^    net = buildNetwork(len(task.getObservation()), hiddenUnits, env.actLen, outclass=TanhLayer)    $/;"	v
net	tools/pybrain/examples/rl/environments/ode/johnnie_reinforce.py	/^    net = buildNetwork(len(task.getObservation()), hiddenUnits, env.actLen, outclass=TanhLayer)    $/;"	v
net	tools/pybrain/examples/rl/environments/shipsteer/shipbench_pgpe.py	/^    net = buildNetwork(task.outdim, task.indim, outclass=TanhLayer)$/;"	v
net	tools/pybrain/examples/rl/environments/shipsteer/shipbench_sde.py	/^net = buildNetwork(task.outdim, task.indim, bias=False)$/;"	v
net	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^net = EvolinoNetwork( trnData.outdim, 40 )$/;"	v
net1	pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    net1 = CaptureGameNetwork(hsize = 1)$/;"	v	class:RelativeGomokuTask
net1	pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    net1 = CaptureGameNetwork(hsize=1)$/;"	v	class:RelativeCaptureTask
net1	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    net1 = CaptureGameNetwork(hsize = 1)$/;"	v	class:RelativeGomokuTask
net1	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    net1 = CaptureGameNetwork(hsize=1)$/;"	v	class:RelativeCaptureTask
net2	pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    net2 = CaptureGameNetwork(hsize = 1)$/;"	v	class:RelativeGomokuTask
net2	pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    net2 = CaptureGameNetwork(hsize=1)$/;"	v	class:RelativeCaptureTask
net2	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    net2 = CaptureGameNetwork(hsize = 1)$/;"	v	class:RelativeGomokuTask
net2	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    net2 = CaptureGameNetwork(hsize=1)$/;"	v	class:RelativeCaptureTask
netAgent	tools/pybrain/examples/rl/environments/capturegame/minitournament.py	/^netAgent = ModuleDecidingPlayer(net, game, name = 'net')$/;"	v
netAgentGreedy	tools/pybrain/examples/rl/environments/capturegame/minitournament.py	/^netAgentGreedy = ModuleDecidingPlayer(net, game, name = 'greedy', greedySelection = True)$/;"	v
netCompare	pybrain/tests/helpers.py	/^def netCompare(net1, net2, forwardpasses=1, verbose=False):$/;"	f
netCompare	tools/pybrain/pybrain/tests/helpers.py	/^def netCompare(net1, net2, forwardpasses=1, verbose=False):$/;"	f
netweights	pybrain/rl/learners/directsearch/rwr.py	/^    netweights = 0.01$/;"	v	class:RWR
netweights	tools/pybrain/pybrain/rl/learners/directsearch/rwr.py	/^    netweights = 0.01$/;"	v	class:RWR
newChild	pybrain/tools/customxml/handling.py	/^    def newChild(self, node, name):$/;"	m	class:XMLHandling
newChild	tools/pybrain/pybrain/tools/customxml/handling.py	/^    def newChild(self, node, name):$/;"	m	class:XMLHandling
newEpisode	agents/LSTDACAgent.py	/^    def newEpisode(self):$/;"	m	class:LSTDACAgent
newEpisode	learners/ENACLearner.py	/^    def newEpisode(self):$/;"	m	class:ENAC
newEpisode	learners/LSTDACLearner.py	/^    def newEpisode(self):$/;"	m	class:LSTDACLearner
newEpisode	learners/TDLearner.py	/^    def newEpisode(self):$/;"	m	class:TDLearner
newEpisode	pybrain/rl/agents/agent.py	/^    def newEpisode(self):$/;"	m	class:Agent
newEpisode	pybrain/rl/agents/learning.py	/^    def newEpisode(self):$/;"	m	class:LearningAgent
newEpisode	pybrain/rl/agents/linearfa.py	/^    def newEpisode(self):$/;"	m	class:LinearFA_Agent
newEpisode	pybrain/rl/agents/logging.py	/^    def newEpisode(self):$/;"	m	class:LoggingAgent
newEpisode	pybrain/rl/environments/twoplayergames/capturegameplayers/moduledecision.py	/^    def newEpisode(self):$/;"	m	class:ModuleDecidingPlayer
newEpisode	pybrain/rl/environments/twoplayergames/gomokuplayers/moduledecision.py	/^    def newEpisode(self):$/;"	m	class:ModuleDecidingPlayer
newEpisode	pybrain/rl/explorers/continuous/sde.py	/^    def newEpisode(self):$/;"	m	class:StateDependentExplorer
newEpisode	pybrain/rl/explorers/discrete/discretesde.py	/^    def newEpisode(self):$/;"	m	class:DiscreteStateDependentExplorer
newEpisode	pybrain/rl/explorers/explorer.py	/^    def newEpisode(self):$/;"	m	class:Explorer
newEpisode	pybrain/rl/learners/learner.py	/^    def newEpisode(self):$/;"	m	class:EpisodicLearner
newEpisode	pybrain/rl/learners/valuebased/linearfa.py	/^    def newEpisode(self):  $/;"	m	class:LinearFALearner
newEpisode	pybrain/rl/learners/valuebased/linearfa.py	/^    def newEpisode(self):$/;"	m	class:QLambda_LinFA
newEpisode	pybrain/tests/unittests/tools/test_rlgluebridge.py	/^    def newEpisode(self):$/;"	m	class:PseudoPybrainAgent
newEpisode	pybrain/tools/rlgluebridge.py	/^    def newEpisode(self):$/;"	m	class:BenchmarkingAgent
newEpisode	tools/pybrain/pybrain/rl/agents/agent.py	/^    def newEpisode(self):$/;"	m	class:Agent
newEpisode	tools/pybrain/pybrain/rl/agents/learning.py	/^    def newEpisode(self):$/;"	m	class:LearningAgent
newEpisode	tools/pybrain/pybrain/rl/agents/linearfa.py	/^    def newEpisode(self):$/;"	m	class:LinearFA_Agent
newEpisode	tools/pybrain/pybrain/rl/agents/logging.py	/^    def newEpisode(self):$/;"	m	class:LoggingAgent
newEpisode	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/moduledecision.py	/^    def newEpisode(self):$/;"	m	class:ModuleDecidingPlayer
newEpisode	tools/pybrain/pybrain/rl/environments/twoplayergames/gomokuplayers/moduledecision.py	/^    def newEpisode(self):$/;"	m	class:ModuleDecidingPlayer
newEpisode	tools/pybrain/pybrain/rl/explorers/continuous/sde.py	/^    def newEpisode(self):$/;"	m	class:StateDependentExplorer
newEpisode	tools/pybrain/pybrain/rl/explorers/discrete/discretesde.py	/^    def newEpisode(self):$/;"	m	class:DiscreteStateDependentExplorer
newEpisode	tools/pybrain/pybrain/rl/explorers/explorer.py	/^    def newEpisode(self):$/;"	m	class:Explorer
newEpisode	tools/pybrain/pybrain/rl/learners/learner.py	/^    def newEpisode(self):$/;"	m	class:EpisodicLearner
newEpisode	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    def newEpisode(self):  $/;"	m	class:LinearFALearner
newEpisode	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    def newEpisode(self):$/;"	m	class:QLambda_LinFA
newEpisode	tools/pybrain/pybrain/tests/unittests/tools/test_rlgluebridge.py	/^    def newEpisode(self):$/;"	m	class:PseudoPybrainAgent
newEpisode	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    def newEpisode(self):$/;"	m	class:BenchmarkingAgent
newRootNode	pybrain/tools/customxml/handling.py	/^    def newRootNode(self, name):$/;"	m	class:XMLHandling
newRootNode	tools/pybrain/pybrain/tools/customxml/handling.py	/^    def newRootNode(self, name):$/;"	m	class:XMLHandling
newSample	pybrain/optimization/distributionbased/ves.py	/^            def newSample():$/;"	f	function:VanillaGradientEvolutionStrategies._produceSamples
newSample	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^            def newSample():$/;"	f	function:VanillaGradientEvolutionStrategies._produceSamples
newSequence	pybrain/datasets/sequential.py	/^    def newSequence(self):$/;"	m	class:SequentialDataSet
newSequence	tools/pybrain/pybrain/datasets/sequential.py	/^    def newSequence(self):$/;"	m	class:SequentialDataSet
newSimilarInstance	pybrain/structure/evolvables/evolvable.py	/^    def newSimilarInstance(self):$/;"	m	class:Evolvable
newSimilarInstance	pybrain/structure/evolvables/topology.py	/^    def newSimilarInstance(self):$/;"	m	class:TopologyEvolvable
newSimilarInstance	tools/pybrain/pybrain/structure/evolvables/evolvable.py	/^    def newSimilarInstance(self):$/;"	m	class:Evolvable
newSimilarInstance	tools/pybrain/pybrain/structure/evolvables/topology.py	/^    def newSimilarInstance(self):$/;"	m	class:TopologyEvolvable
newcall	pybrain/utilities.py	/^    def newcall(*args, **kwargs):$/;"	f	function:storeCallResults
newcall	tools/pybrain/pybrain/utilities.py	/^    def newcall(*args, **kwargs):$/;"	f	function:storeCallResults
newpdf	pybrain/optimization/distributionbased/ves.py	/^            def newpdf(s):$/;"	f	function:VanillaGradientEvolutionStrategies._produceSamples
newpdf	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^            def newpdf(s):$/;"	f	function:VanillaGradientEvolutionStrategies._produceSamples
newsize	tools/pybrain/examples/rl/environments/capturegame/evolvingplayer.py	/^newsize = 7$/;"	v
newtask	tools/pybrain/examples/rl/environments/capturegame/evolvingplayer.py	/^newtask = CaptureGameTask(newsize, averageOverGames = 50, opponent = KillingPlayer)$/;"	v
nf	multirun.py	/^        nf = str(i) + '-' + f.rsplit('\/')[-1]$/;"	v
nnet	pybrain/tests/optimizationtest.py	/^nnet = buildNetwork(task.outdim, 2, task.indim)$/;"	v
nnet	tools/pybrain/examples/optimization/optimizerinterface.py	/^nnet = buildNetwork(task.outdim, 2, task.indim)$/;"	v
nnet	tools/pybrain/pybrain/tests/optimizationtest.py	/^nnet = buildNetwork(task.outdim, 2, task.indim)$/;"	v
noise	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^double noise;$/;"	v
noise	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^double noise;$/;"	v
noisetrans	pybrain/rl/environments/functions/transformations.py	/^        def noisetrans(f):$/;"	f	function:BBOBTransformationFunction.__init__
noisetrans	tools/pybrain/pybrain/rl/environments/functions/transformations.py	/^        def noisetrans(f):$/;"	f	function:BBOBTransformationFunction.__init__
noisy	pybrain/rl/environments/mazes/tasks/maze.py	/^    def noisy(self):$/;"	m	class:MazeTask
noisy	pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^    noisy = True$/;"	v	class:CaptureGameTask
noisy	pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^    noisy = True$/;"	v	class:GomokuTask
noisy	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze.py	/^    def noisy(self):$/;"	m	class:MazeTask
noisy	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^    noisy = True$/;"	v	class:CaptureGameTask
noisy	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^    noisy = True$/;"	v	class:GomokuTask
non_dominated_front	pybrain/tools/nondominated.py	/^non_dominated_front = _non_dominated_front_merge_arr$/;"	v
non_dominated_front	tools/pybrain/pybrain/tools/nondominated.py	/^non_dominated_front = _non_dominated_front_merge_arr$/;"	v
non_dominated_sort	pybrain/tools/nondominated.py	/^def non_dominated_sort(iterable, key=lambda x: x, allowequality=True):$/;"	f
non_dominated_sort	tools/pybrain/pybrain/tools/nondominated.py	/^def non_dominated_sort(iterable, key=lambda x: x, allowequality=True):$/;"	f
norm	pybrain/rl/environments/ode/tools/mathhelpers.py	/^def norm(p):$/;"	f
norm	tools/pybrain/pybrain/rl/environments/ode/tools/mathhelpers.py	/^def norm(p):$/;"	f
normAct	pybrain/rl/environments/flexcube/environment.py	/^    def normAct(self, s):$/;"	m	class:FlexCubeEnvironment
normAct	tools/pybrain/pybrain/rl/environments/flexcube/environment.py	/^    def normAct(self, s):$/;"	m	class:FlexCubeEnvironment
normVect	pybrain/rl/environments/flexcube/objects3d.py	/^    def normVect(self, vect, norm):$/;"	m	class:Objects3D
normVect	tools/pybrain/pybrain/rl/environments/flexcube/objects3d.py	/^    def normVect(self, vect, norm):$/;"	m	class:Objects3D
normale	pybrain/rl/environments/flexcube/objects3d.py	/^    def normale(self, vect, centerOfGrav):$/;"	m	class:Objects3D
normale	tools/pybrain/pybrain/rl/environments/flexcube/objects3d.py	/^    def normale(self, vect, centerOfGrav):$/;"	m	class:Objects3D
normalize	pybrain/rl/environments/task.py	/^    def normalize(self, sensors):$/;"	m	class:Task
normalize	pybrain/tools/datasettools.py	/^    def normalize(self, ds, field='input'):$/;"	m	class:DataSetNormalizer
normalize	tools/pybrain/pybrain/rl/environments/task.py	/^    def normalize(self, sensors):$/;"	m	class:Task
normalize	tools/pybrain/pybrain/tools/datasettools.py	/^    def normalize(self, ds, field='input'):$/;"	m	class:DataSetNormalizer
normalizePattern	pybrain/tools/datasettools.py	/^    def normalizePattern(self, y):$/;"	m	class:DataSetNormalizer
normalizePattern	tools/pybrain/pybrain/tools/datasettools.py	/^    def normalizePattern(self, y):$/;"	m	class:DataSetNormalizer
normalizedFitness	pybrain/tools/rankingfunctions.py	/^def normalizedFitness(R):$/;"	f
normalizedFitness	tools/pybrain/pybrain/tools/rankingfunctions.py	/^def normalizedFitness(R):$/;"	f
now	tools/pybrain/docs/html/_static/jquery.js	/^jQuery.globalEval(elem.text||elem.textContent||elem.innerHTML||"");if(elem.parentNode)elem.parentNode.removeChild(elem);}function now(){return+new Date;}jQuery.extend=jQuery.fn.extend=function(){var target=arguments[0]||{},i=1,length=arguments.length,deep=false,options;if(target.constructor==Boolean){deep=target;target=arguments[1]||{};i=2;}if(typeof target!="object"&&typeof target!="function")target={};if(length==i){target=this;--i;}for(;i<length;i++)if((options=arguments[i])!=null)for(var name in options){var src=target[name],copy=options[name];if(target===copy)continue;if(deep&&copy&&typeof copy=="object"&&!copy.nodeType)target[name]=jQuery.extend(deep,src||(copy.length!=null?[]:{}),copy);else if(copy!==undefined)target[name]=copy;}return target;};var expando="jQuery"+now(),uuid=0,windowData={},exclude=\/z-?index|font-?weight|opacity|zoom|line-?height\/i,defaultView=document.defaultView||{};jQuery.extend({noConflict:function(deep){window.$=_$;if(deep)window.jQuery=_jQuery;return jQuery;},isFunction:function(fn){return!!fn&&typeof fn!="string"&&!fn.nodeName&&fn.constructor!=Array&&\/^[\\s[]?function\/.test(fn+"");},isXMLDoc:function(elem){return elem.documentElement&&!elem.body||elem.tagName&&elem.ownerDocument&&!elem.ownerDocument.body;},globalEval:function(data){data=jQuery.trim(data);if(data){var head=document.getElementsByTagName("head")[0]||document.documentElement,script=document.createElement("script");script.type="text\/javascript";if(jQuery.browser.msie)script.text=data;else$/;"	f
nsenses	pybrain/rl/environments/classic/acrobot.py	/^    nsenses = 3$/;"	v	class:SingleArmSwinger
nsenses	pybrain/rl/environments/classic/acrobot.py	/^    nsenses = 5$/;"	v	class:AcrobotTask
nsenses	pybrain/rl/environments/classic/mountaincar.py	/^    nsenses = 3$/;"	v	class:MountainCar
nsenses	pybrain/rl/environments/classic/xor.py	/^    nsenses = 3$/;"	v	class:XORTask
nsenses	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    nsenses = 3$/;"	v	class:SingleArmSwinger
nsenses	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    nsenses = 5$/;"	v	class:AcrobotTask
nsenses	tools/pybrain/pybrain/rl/environments/classic/mountaincar.py	/^    nsenses = 3$/;"	v	class:MountainCar
nsenses	tools/pybrain/pybrain/rl/environments/classic/xor.py	/^    nsenses = 3$/;"	v	class:XORTask
nsga2select	pybrain/optimization/populationbased/multiobjective/nsga2.py	/^def nsga2select(population, fitnesses, survivors, allowequality = True):$/;"	f
nsga2select	tools/pybrain/pybrain/optimization/populationbased/multiobjective/nsga2.py	/^def nsga2select(population, fitnesses, survivors, allowequality = True):$/;"	f
num	tools/pybrain/docs/html/_static/jquery.js	/^while(elem=second[i++])first[pos++]=elem;return first;},unique:function(array){var ret=[],done={};try{for(var i=0,length=array.length;i<length;i++){var id=jQuery.data(array[i]);if(!done[id]){done[id]=true;ret.push(array[i]);}}}catch(e){ret=array;}return ret;},grep:function(elems,callback,inv){var ret=[];for(var i=0,length=elems.length;i<length;i++)if(!inv!=!callback(elems[i],i))ret.push(elems[i]);return ret;},map:function(elems,callback){var ret=[];for(var i=0,length=elems.length;i<length;i++){var value=callback(elems[i],i);if(value!=null)ret[ret.length]=value;}return ret.concat.apply([],ret);}});var userAgent=navigator.userAgent.toLowerCase();jQuery.browser={version:(userAgent.match(\/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/)||[])[1],safari:\/webkit\/.test(userAgent),opera:\/opera\/.test(userAgent),msie:\/msie\/.test(userAgent)&&!\/opera\/.test(userAgent),mozilla:\/mozilla\/.test(userAgent)&&!\/(compatible|webkit)\/.test(userAgent)};var styleFloat=jQuery.browser.msie?"styleFloat":"cssFloat";jQuery.extend({boxModel:!jQuery.browser.msie||document.compatMode=="CSS1Compat",props:{"for":"htmlFor","class":"className","float":styleFloat,cssFloat:styleFloat,styleFloat:styleFloat,readonly:"readOnly",maxlength:"maxLength",cellspacing:"cellSpacing"}});jQuery.each({parent:function(elem){return elem.parentNode;},parents:function(elem){return jQuery.dir(elem,"parentNode");},next:function(elem){return jQuery.nth(elem,2,"nextSibling");},prev:function(elem){return jQuery.nth(elem,2,"previousSibling");},nextAll:function(elem){return jQuery.dir(elem,"nextSibling");},prevAll:function(elem){return jQuery.dir(elem,"previousSibling");},siblings:function(elem){return jQuery.sibling(elem.parentNode.firstChild,elem);},children:function(elem){return jQuery.sibling(elem.firstChild);},contents:function(elem){return jQuery.nodeName(elem,"iframe")?elem.contentDocument||elem.contentWindow.document:jQuery.makeArray(elem.childNodes);}},function(name,fn){jQuery.fn[name]=function(selector){var ret=jQuery.map(this,fn);if(selector&&typeof selector=="string")ret=jQuery.multiFilter(selector,ret);return this.pushStack(jQuery.unique(ret));};});jQuery.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(name,original){jQuery.fn[name]=function(){var args=arguments;return this.each(function(){for(var i=0,length=args.length;i<length;i++)jQuery(args[i])[original](this);});};});jQuery.each({removeAttr:function(name){jQuery.attr(this,name,"");if(this.nodeType==1)this.removeAttribute(name);},addClass:function(classNames){jQuery.className.add(this,classNames);},removeClass:function(classNames){jQuery.className.remove(this,classNames);},toggleClass:function(classNames){jQuery.className[jQuery.className.has(this,classNames)?"remove":"add"](this,classNames);},remove:function(selector){if(!selector||jQuery.filter(selector,[this]).r.length){jQuery("*",this).add(this).each(function(){jQuery.event.remove(this);jQuery.removeData(this);});if(this.parentNode)this.parentNode.removeChild(this);}},empty:function(){jQuery(">*",this).remove();while(this.firstChild)this.removeChild(this.firstChild);}},function(name,fn){jQuery.fn[name]=function(){return this.each(fn,arguments);};});jQuery.each(["Height","Width"],function(i,name){var type=name.toLowerCase();jQuery.fn[type]=function(size){return this[0]==window?jQuery.browser.opera&&document.body["client"+name]||jQuery.browser.safari&&window["inner"+name]||document.compatMode=="CSS1Compat"&&document.documentElement["client"+name]||document.body["client"+name]:this[0]==document?Math.max(Math.max(document.body["scroll"+name],document.documentElement["scroll"+name]),Math.max(document.body["offset"+name],document.documentElement["offset"+name])):size==undefined?(this.length?jQuery.css(this[0],type):null):this.css(type,size.constructor==String?size:size+"px");};});function num(elem,prop){return elem[0]&&parseInt(jQuery.curCSS(elem[0],prop,true),10)||0;}var chars=jQuery.browser.safari&&parseInt(jQuery.browser.version)<417?"(?:[\\\\w*_-]|\\\\\\\\.)":"(?:[\\\\w\\u0128-\\uFFFF*_-]|\\\\\\\\.)",quickChild=new RegExp("^>\\\\s*("+chars+"+)"),quickID=new RegExp("^("+chars+"+)(#)("+chars+"+)"),quickClass=new RegExp("^([#.]?)("+chars+"*)");jQuery.extend({expr:{"":function(a,i,m){return m[2]=="*"||jQuery.nodeName(a,m[2]);},"#":function(a,i,m){return a.getAttribute("id")==m[2];},":":{lt:function(a,i,m){return i<m[3]-0;},gt:function(a,i,m){return i>m[3]-0;},nth:function(a,i,m){return m[3]-0==i;},eq:function(a,i,m){return m[3]-0==i;},first:function(a,i){return i==0;},last:function(a,i,m,r){return i==r.length-1;},even:function(a,i){return i%2==0;},odd:function(a,i){return i%2;},"first-child":function(a){return a.parentNode.getElementsByTagName("*")[0]==a;},"last-child":function(a){return jQuery.nth(a.parentNode.lastChild,1,"previousSibling")==a;},"only-child":function(a){return!jQuery.nth(a.parentNode.lastChild,2,"previousSibling");},parent:function(a){return a.firstChild;},empty:function(a){return!a.firstChild;},contains:function(a,i,m){return(a.textContent||a.innerText||jQuery(a).text()||"").indexOf(m[3])>=0;},visible:function(a){return"hidden"!=a.type&&jQuery.css(a,"display")!="none"&&jQuery.css(a,"visibility")!="hidden";},hidden:function(a){return"hidden"==a.type||jQuery.css(a,"display")=="none"||jQuery.css(a,"visibility")=="hidden";},enabled:function(a){return!a.disabled;},disabled:function(a){return a.disabled;},checked:function(a){return a.checked;},selected:function(a){return a.selected||jQuery.attr(a,"selected");},text:function(a){return"text"==a.type;},radio:function(a){return"radio"==a.type;},checkbox:function(a){return"checkbox"==a.type;},file:function(a){return"file"==a.type;},password:function(a){return"password"==a.type;},submit:function(a){return"submit"==a.type;},image:function(a){return"image"==a.type;},reset:function(a){return"reset"==a.type;},button:function(a){return"button"==a.type||jQuery.nodeName(a,"button");},input:function(a){return\/input|select|textarea|button\/i.test(a.nodeName);},has:function(a,i,m){return jQuery.find(m[3],a).length;},header:function(a){return\/h\\d\/i.test(a.nodeName);},animated:function(a){return jQuery.grep(jQuery.timers,function(fn){return a==fn.elem;}).length;}}},parse:[\/^(\\[) *@?([\\w-]+) *([!*$^~=]*) *('?"?)(.*?)\\4 *\\]\/,\/^(:)([\\w-]+)\\("?'?(.*?(\\(.*?\\))?[^(]*?)"?'?\\)\/,new RegExp("^([:.#]*)("+chars+"+)")],multiFilter:function(expr,elems,not){var old,cur=[];while(expr&&expr!=old){old=expr;var f=jQuery.filter(expr,elems,not);expr=f.t.replace(\/^\\s*,\\s*\/,"");cur=not?elems=f.r:jQuery.merge(cur,f.r);}return cur;},find:function(t,context){if(typeof t!="string")return[t];if(context&&context.nodeType!=1&&context.nodeType!=9)return[];context=context||document;var ret=[context],done=[],last,nodeName;while(t&&last!=t){var r=[];last=t;t=jQuery.trim(t);var foundToken=false,re=quickChild,m=re.exec(t);if(m){nodeName=m[1].toUpperCase();for(var i=0;ret[i];i++)for(var c=ret[i].firstChild;c;c=c.nextSibling)if(c.nodeType==1&&(nodeName=="*"||c.nodeName.toUpperCase()==nodeName))r.push(c);ret=r;t=t.replace(re,"");if(t.indexOf(" ")==0)continue;foundToken=true;}else{re=\/^([>+~])\\s*(\\w*)\/i;if((m=re.exec(t))!=null){r=[];var merge={};nodeName=m[2].toUpperCase();m=m[1];for(var j=0,rl=ret.length;j<rl;j++){var n=m=="~"||m=="+"?ret[j].nextSibling:ret[j].firstChild;for(;n;n=n.nextSibling)if(n.nodeType==1){var id=jQuery.data(n);if(m=="~"&&merge[id])break;if(!nodeName||n.nodeName.toUpperCase()==nodeName){if(m=="~")merge[id]=true;r.push(n);}if(m=="+")break;}}ret=r;t=jQuery.trim(t.replace(re,""));foundToken=true;}}if(t&&!foundToken){if(!t.indexOf(",")){if(context==ret[0])ret.shift();done=jQuery.merge(done,ret);r=ret=[context];t=" "+t.substr(1,t.length);}else{var re2=quickID;var m=re2.exec(t);if(m){m=[0,m[2],m[3],m[1]];}else{re2=quickClass;m=re2.exec(t);}m[2]=m[2].replace(\/\\\\\/g,"");var elem=ret[ret.length-1];if(m[1]=="#"&&elem&&elem.getElementById&&!jQuery.isXMLDoc(elem)){var oid=elem.getElementById(m[2]);if((jQuery.browser.msie||jQuery.browser.opera)&&oid&&typeof oid.id=="string"&&oid.id!=m[2])oid=jQuery('[@id="'+m[2]+'"]',elem)[0];ret=r=oid&&(!m[3]||jQuery.nodeName(oid,m[3]))?[oid]:[];}else{for(var i=0;ret[i];i++){var tag=m[1]=="#"&&m[3]?m[3]:m[1]!=""||m[0]==""?"*":m[2];if(tag=="*"&&ret[i].nodeName.toLowerCase()=="object")tag="param";r=jQuery.merge(r,ret[i].getElementsByTagName(tag));}if(m[1]==".")r=jQuery.classFilter(r,m[2]);if(m[1]=="#"){var tmp=[];for(var i=0;r[i];i++)if(r[i].getAttribute("id")==m[2]){tmp=[r[i]];break;}r=tmp;}ret=r;}t=t.replace(re2,"");}}if(t){var val=jQuery.filter(t,r);ret=r=val.r;t=jQuery.trim(val.t);}}if(t)ret=[];if(ret&&context==ret[0])ret.shift();done=jQuery.merge(done,ret);return done;},classFilter:function(r,m,not){m=" "+m+" ";var tmp=[];for(var i=0;r[i];i++){var pass=(" "+r[i].className+" ").indexOf(m)>=0;if(!not&&pass||not&&!pass)tmp.push(r[i]);}return tmp;},filter:function(t,r,not){var last;while(t&&t!=last){last=t;var p=jQuery.parse,m;for(var i=0;p[i];i++){m=p[i].exec(t);if(m){t=t.substring(m[0].length);m[2]=m[2].replace(\/\\\\\/g,"");break;}}if(!m)break;if(m[1]==":"&&m[2]=="not")r=isSimple.test(m[3])?jQuery.filter(m[3],r,true).r:jQuery(r).not(m[3]);else if(m[1]==".")r=jQuery.classFilter(r,m[2],not);else if(m[1]=="["){var tmp=[],type=m[3];for(var i=0,rl=r.length;i<rl;i++){var a=r[i],z=a[jQuery.props[m[2]]||m[2]];if(z==null||\/href|src|selected\/.test(m[2]))z=jQuery.attr(a,m[2])||'';if((type==""&&!!z||type=="="&&z==m[5]||type=="!="&&z!=m[5]||type=="^="&&z&&!z.indexOf(m[5])||type=="$="&&z.substr(z.length-m[5].length)==m[5]||(type=="*="||type=="~=")&&z.indexOf(m[5])>=0)^not)tmp.push(a);}r=tmp;}else if(m[1]==":"&&m[2]=="nth-child"){var merge={},tmp=[],test=\/(-?)(\\d*)n((?:\\+|-)?\\d*)\/.exec(m[3]=="even"&&"2n"||m[3]=="odd"&&"2n+1"||!\/\\D\/.test(m[3])&&"0n+"+m[3]||m[3]),first=(test[1]+(test[2]||1))-0,last=test[3]-0;for(var i=0,rl=r.length;i<rl;i++){var node=r[i],parentNode=node.parentNode,id=jQuery.data(parentNode);if(!merge[id]){var c=1;for(var n=parentNode.firstChild;n;n=n.nextSibling)if(n.nodeType==1)n.nodeIndex=c++;merge[id]=true;}var add=false;if(first==0){if(node.nodeIndex==last)add=true;}else if((node.nodeIndex-last)%first==0&&(node.nodeIndex-last)\/first>=0)add=true;if(add^not)tmp.push(node);}r=tmp;}else{var fn=jQuery.expr[m[1]];if(typeof fn=="object")fn=fn[m[2]];if(typeof fn=="string")fn=eval("false||function(a,i){return "+fn+";}");r=jQuery.grep(r,function(elem,i){return fn(elem,i,m,r);},not);}}return{r:r,t:t};},dir:function(elem,dir){var matched=[],cur=elem[dir];while(cur&&cur!=document){if(cur.nodeType==1)matched.push(cur);cur=cur[dir];}return matched;},nth:function(cur,result,dir,elem){result=result||1;var num=0;for(;cur;cur=cur[dir])if(cur.nodeType==1&&++num==result)break;return cur;},sibling:function(n,elem){var r=[];for(;n;n=n.nextSibling){if(n.nodeType==1&&n!=elem)r.push(n);}return r;}});jQuery.event={add:function(elem,types,handler,data){if(elem.nodeType==3||elem.nodeType==8)return;if(jQuery.browser.msie&&elem.setInterval)elem=window;if(!handler.guid)handler.guid=this.guid++;if(data!=undefined){var fn=handler;handler=this.proxy(fn,function(){return fn.apply(this,arguments);});handler.data=data;}var events=jQuery.data(elem,"events")||jQuery.data(elem,"events",{}),handle=jQuery.data(elem,"handle")||jQuery.data(elem,"handle",function(){if(typeof jQuery!="undefined"&&!jQuery.event.triggered)return jQuery.event.handle.apply(arguments.callee.elem,arguments);});handle.elem=elem;jQuery.each(types.split(\/\\s+\/),function(index,type){var parts=type.split(".");type=parts[0];handler.type=parts[1];var handlers=events[type];if(!handlers){handlers=events[type]={};if(!jQuery.event.special[type]||jQuery.event.special[type].setup.call(elem)===false){if(elem.addEventListener)elem.addEventListener(type,handle,false);else if(elem.attachEvent)elem.attachEvent("on"+type,handle);}}handlers[handler.guid]=handler;jQuery.event.global[type]=true;});elem=null;},guid:1,global:{},remove:function(elem,types,handler){if(elem.nodeType==3||elem.nodeType==8)return;var events=jQuery.data(elem,"events"),ret,index;if(events){if(types==undefined||(typeof types=="string"&&types.charAt(0)=="."))for(var type in events)this.remove(elem,type+(types||""));else{if(types.type){handler=types.handler;types=types.type;}jQuery.each(types.split(\/\\s+\/),function(index,type){var parts=type.split(".");type=parts[0];if(events[type]){if(handler)delete events[type][handler.guid];else$/;"	f
numActions	pybrain/rl/environments/cartpole/balancetask.py	/^    numActions = 3$/;"	v	class:DiscreteBalanceTask
numActions	pybrain/rl/environments/environment.py	/^    numActions = None$/;"	v	class:Environment
numActions	pybrain/rl/learners/valuebased/interface.py	/^    def numActions(self):$/;"	m	class:ActionValueTable
numActions	pybrain/rl/learners/valuebased/interface.py	/^    numActions = None$/;"	v	class:ActionValueInterface
numActions	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    numActions = 3$/;"	v	class:DiscreteBalanceTask
numActions	tools/pybrain/pybrain/rl/environments/environment.py	/^    numActions = None$/;"	v	class:Environment
numActions	tools/pybrain/pybrain/rl/learners/valuebased/interface.py	/^    def numActions(self):$/;"	m	class:ActionValueTable
numActions	tools/pybrain/pybrain/rl/learners/valuebased/interface.py	/^    numActions = None$/;"	v	class:ActionValueInterface
numMovesCoeff	pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^    numMovesCoeff = 0.$/;"	v	class:CaptureGameTask
numMovesCoeff	pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^    numMovesCoeff = 0.$/;"	v	class:GomokuTask
numMovesCoeff	pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    numMovesCoeff = 0.5$/;"	v	class:RelativeGomokuTask
numMovesCoeff	pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    numMovesCoeff = 0.5$/;"	v	class:RelativeCaptureTask
numMovesCoeff	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^    numMovesCoeff = 0.$/;"	v	class:CaptureGameTask
numMovesCoeff	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^    numMovesCoeff = 0.$/;"	v	class:GomokuTask
numMovesCoeff	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    numMovesCoeff = 0.5$/;"	v	class:RelativeGomokuTask
numMovesCoeff	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    numMovesCoeff = 0.5$/;"	v	class:RelativeCaptureTask
numParameters	pybrain/optimization/optimizer.py	/^    numParameters = None$/;"	v	class:BlackBoxOptimizer
numParameters	tools/pybrain/pybrain/optimization/optimizer.py	/^    numParameters = None$/;"	v	class:BlackBoxOptimizer
numPeaks	pybrain/rl/environments/functions/multimodal.py	/^    numPeaks = 101$/;"	v	class:GallagherGauss101MeFunction
numPeaks	pybrain/rl/environments/functions/multimodal.py	/^    numPeaks = 21$/;"	v	class:GallagherGauss21HiFunction
numPeaks	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    numPeaks = 101$/;"	v	class:GallagherGauss101MeFunction
numPeaks	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    numPeaks = 21$/;"	v	class:GallagherGauss21HiFunction
numPoles	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^int numPoles;$/;"	v
numPoles	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^int numPoles;$/;"	v
numPops	pybrain/optimization/populationbased/coevolution/multipopulationcoevolution.py	/^    numPops = 10$/;"	v	class:MultiPopulationCoevolution
numPops	tools/pybrain/pybrain/optimization/populationbased/coevolution/multipopulationcoevolution.py	/^    numPops = 10$/;"	v	class:MultiPopulationCoevolution
numbExp	tools/pybrain/examples/rl/environments/cartpole/cart_all.py	/^numbExp=40 #number of experiments$/;"	v
numbExp	tools/pybrain/examples/rl/environments/cartpole/cart_cma.py	/^numbExp=10 #number of experiments$/;"	v
numbExp	tools/pybrain/examples/rl/environments/cartpole/cart_enac.py	/^numbExp=10 #number of experiments$/;"	v
numbExp	tools/pybrain/examples/rl/environments/cartpole/cart_fem.py	/^numbExp=10 #number of experiments$/;"	v
numbExp	tools/pybrain/examples/rl/environments/cartpole/cart_nes.py	/^numbExp=10 #number of experiments$/;"	v
numbExp	tools/pybrain/examples/rl/environments/cartpole/cart_pgpe.py	/^numbExp=10 #number of experiments$/;"	v
numbExp	tools/pybrain/examples/rl/environments/cartpole/cart_reinf.py	/^numbExp=10 #number of experiments$/;"	v
numbExp	tools/pybrain/examples/rl/environments/flexcube/flexcube_pgpe.py	/^numbExp=10 #number of experiments$/;"	v
numbExp	tools/pybrain/examples/rl/environments/flexcube/flexcube_spsa.py	/^numbExp=10 #number of experiments$/;"	v
numbExp	tools/pybrain/examples/rl/environments/ode/acrobot_fd.py	/^numbExp=10 #number of experiments$/;"	v
numbExp	tools/pybrain/examples/rl/environments/ode/acrobot_pgpe.py	/^numbExp=40 #number of experiments$/;"	v
numbExp	tools/pybrain/examples/rl/environments/ode/ccrl_glass_pgpe.py	/^numbExp=10 #number of experiments$/;"	v
numbExp	tools/pybrain/examples/rl/environments/ode/ccrl_plate_pgpe.py	/^numbExp=10 #number of experiments$/;"	v
numbExp	tools/pybrain/examples/rl/environments/ode/johnnie_pgpe.py	/^numbExp=10 #number of experiments$/;"	v
numbExp	tools/pybrain/examples/rl/environments/ode/johnnie_reinforce.py	/^numbExp=10 #number of experiments$/;"	v
numbExp	tools/pybrain/examples/rl/environments/shipsteer/shipbench_pgpe.py	/^numbExp=10 #number of experiments$/;"	v
numberOfCenters	pybrain/optimization/distributionbased/fem.py	/^    numberOfCenters = 1$/;"	v	class:FEM
numberOfCenters	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^    numberOfCenters = 1$/;"	v	class:FEM
objectResults	tools/pybrain/docs/html/_static/searchtools.js	/^    var objectResults = [];$/;"	v
observations	pybrain/rl/environments/mazes/tasks/cheesemaze.py	/^    observations = 7$/;"	v	class:CheeseMaze
observations	pybrain/rl/environments/mazes/tasks/pomdp.py	/^    observations = 4$/;"	v	class:POMDPTask
observations	pybrain/rl/environments/mazes/tasks/shuttle.py	/^    observations = 5$/;"	v	class:ShuttleDocking
observations	pybrain/rl/environments/mazes/tasks/tiger.py	/^    observations = 2$/;"	v	class:TigerTask
observations	pybrain/rl/environments/mazes/tasks/tmaze.py	/^    observations = 4$/;"	v	class:TMaze
observations	tools/pybrain/pybrain/rl/environments/mazes/tasks/cheesemaze.py	/^    observations = 7$/;"	v	class:CheeseMaze
observations	tools/pybrain/pybrain/rl/environments/mazes/tasks/pomdp.py	/^    observations = 4$/;"	v	class:POMDPTask
observations	tools/pybrain/pybrain/rl/environments/mazes/tasks/shuttle.py	/^    observations = 5$/;"	v	class:ShuttleDocking
observations	tools/pybrain/pybrain/rl/environments/mazes/tasks/tiger.py	/^    observations = 2$/;"	v	class:TigerTask
observations	tools/pybrain/pybrain/rl/environments/mazes/tasks/tmaze.py	/^    observations = 4$/;"	v	class:TMaze
odeview	pybrain/rl/environments/ode/viewer.py	/^    odeview = ODEViewer(*s)$/;"	v	class:ODEViewer
odeview	tools/pybrain/pybrain/rl/environments/ode/viewer.py	/^    odeview = ODEViewer(*s)$/;"	v	class:ODEViewer
offPolicy	pybrain/rl/learners/valuebased/q.py	/^    offPolicy = True$/;"	v	class:Q
offPolicy	pybrain/rl/learners/valuebased/qlambda.py	/^    offPolicy = True$/;"	v	class:QLambda
offPolicy	pybrain/rl/learners/valuebased/sarsa.py	/^    offPolicy = False$/;"	v	class:SARSA
offPolicy	pybrain/rl/learners/valuebased/valuebased.py	/^    offPolicy = False$/;"	v	class:ValueBasedLearner
offPolicy	tools/pybrain/pybrain/rl/learners/valuebased/q.py	/^    offPolicy = True$/;"	v	class:Q
offPolicy	tools/pybrain/pybrain/rl/learners/valuebased/qlambda.py	/^    offPolicy = True$/;"	v	class:QLambda
offPolicy	tools/pybrain/pybrain/rl/learners/valuebased/sarsa.py	/^    offPolicy = False$/;"	v	class:SARSA
offPolicy	tools/pybrain/pybrain/rl/learners/valuebased/valuebased.py	/^    offPolicy = False$/;"	v	class:ValueBasedLearner
offset	pybrain/structure/modules/module.py	/^    offset = 0$/;"	v	class:Module
offset	pybrain/structure/networks/network.py	/^    offset = property(__getOffset, __setOffset)$/;"	v	class:Network
offset	tools/pybrain/pybrain/structure/modules/module.py	/^    offset = 0$/;"	v	class:Module
offset	tools/pybrain/pybrain/structure/networks/network.py	/^    offset = property(__getOffset, __setOffset)$/;"	v	class:Network
oldpdf	pybrain/optimization/distributionbased/ves.py	/^            def oldpdf(s):$/;"	f	function:VanillaGradientEvolutionStrategies._produceSamples
oldpdf	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^            def oldpdf(s):$/;"	f	function:VanillaGradientEvolutionStrategies._produceSamples
oneFifthRule	pybrain/optimization/distributionbased/fem.py	/^    oneFifthRule = False$/;"	v	class:FEM
oneFifthRule	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^    oneFifthRule = False$/;"	v	class:FEM
oneOfManyToClasses	pybrain/tools/validation.py	/^    def oneOfManyToClasses(cls, data):$/;"	m	class:ClassificationHelper
oneOfManyToClasses	tools/pybrain/pybrain/tools/validation.py	/^    def oneOfManyToClasses(cls, data):$/;"	m	class:ClassificationHelper
one_degree	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	42;"	d	file:
one_degree	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	42;"	d	file:
one_over_256	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	139;"	d	file:
one_over_256	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	139;"	d	file:
one_to_n	pybrain/utilities.py	/^def one_to_n(val, maxval):$/;"	f
one_to_n	tools/pybrain/pybrain/utilities.py	/^def one_to_n(val, maxval):$/;"	f
online	pybrain/optimization/distributionbased/distributionbased.py	/^    online = False$/;"	v	class:DistributionBasedOptimizer
online	pybrain/optimization/distributionbased/ves.py	/^    online = False$/;"	v	class:VanillaGradientEvolutionStrategies
online	tools/pybrain/pybrain/optimization/distributionbased/distributionbased.py	/^    online = False$/;"	v	class:DistributionBasedOptimizer
online	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    online = False$/;"	v	class:VanillaGradientEvolutionStrategies
ooutdim	pybrain/rl/environments/cartpole/doublepole.py	/^    ooutdim = 6$/;"	v	class:DoublePoleEnvironment
ooutdim	tools/pybrain/pybrain/rl/environments/cartpole/doublepole.py	/^    ooutdim = 6$/;"	v	class:DoublePoleEnvironment
opponentStart	pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^    opponentStart = True$/;"	v	class:CaptureGameTask
opponentStart	pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^    opponentStart = True$/;"	v	class:GomokuTask
opponentStart	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^    opponentStart = True$/;"	v	class:CaptureGameTask
opponentStart	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^    opponentStart = True$/;"	v	class:GomokuTask
oppositeFunction	pybrain/rl/environments/functions/transformations.py	/^def oppositeFunction(basef):$/;"	f
oppositeFunction	tools/pybrain/pybrain/rl/environments/functions/transformations.py	/^def oppositeFunction(basef):$/;"	f
optCond	pybrain/rl/environments/functions/multimodal.py	/^    optCond = 1000.$/;"	v	class:GallagherGauss21HiFunction
optCond	pybrain/rl/environments/functions/multimodal.py	/^    optCond = sqrt(1000)$/;"	v	class:GallagherGauss101MeFunction
optCond	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    optCond = 1000.$/;"	v	class:GallagherGauss21HiFunction
optCond	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    optCond = sqrt(1000)$/;"	v	class:GallagherGauss101MeFunction
organize	pybrain/rl/experiments/tournament.py	/^    def organize(self, repeat=1):$/;"	m	class:Tournament
organize	tools/pybrain/pybrain/rl/experiments/tournament.py	/^    def organize(self, repeat=1):$/;"	m	class:Tournament
oscillatify	pybrain/rl/environments/functions/transformations.py	/^    def oscillatify(x):$/;"	m	class:BBOBTransformationFunction
oscillatify	tools/pybrain/pybrain/rl/environments/functions/transformations.py	/^    def oscillatify(x):$/;"	m	class:BBOBTransformationFunction
out	tools/pybrain/docs/tutorials/fnn.py	/^    out = fnn.activateOnDataset(griddata)$/;"	v
out	tools/pybrain/docs/tutorials/fnn.py	/^    out = out.argmax(axis=1)  # the highest output activation gives the class$/;"	v
out	tools/pybrain/docs/tutorials/fnn.py	/^    out = out.reshape(X.shape)$/;"	v
out	tools/pybrain/examples/supervised/neuralnets+svm/example_fnn.py	/^    out = fnn.activateOnDataset(griddata)$/;"	v
out	tools/pybrain/examples/supervised/neuralnets+svm/example_fnn.py	/^    out = out.argmax(axis=1)$/;"	v
out	tools/pybrain/examples/supervised/neuralnets+svm/example_fnn.py	/^    out = out.reshape(X.shape)$/;"	v
outLayer	tools/pybrain/docs/tutorials/networks.py	/^outLayer = LinearLayer(1)$/;"	v
outParams	pybrain/structure/modules/mdrnnlayer.py	/^    def outParams(self):$/;"	m	class:MdrnnLayer
outParams	tools/pybrain/pybrain/structure/modules/mdrnnlayer.py	/^    def outParams(self):$/;"	m	class:MdrnnLayer
outcomponentclass	pybrain/structure/networks/bidirectional.py	/^    outcomponentclass = SigmoidLayer$/;"	v	class:BidirectionalNetwork
outcomponentclass	pybrain/structure/networks/custom/capturegame.py	/^    outcomponentclass = SigmoidLayer$/;"	v	class:CaptureGameNetwork
outcomponentclass	pybrain/structure/networks/multidimensional.py	/^    outcomponentclass = SigmoidLayer$/;"	v	class:MultiDimensionalRNN
outcomponentclass	tools/pybrain/pybrain/structure/networks/bidirectional.py	/^    outcomponentclass = SigmoidLayer$/;"	v	class:BidirectionalNetwork
outcomponentclass	tools/pybrain/pybrain/structure/networks/custom/capturegame.py	/^    outcomponentclass = SigmoidLayer$/;"	v	class:CaptureGameNetwork
outcomponentclass	tools/pybrain/pybrain/structure/networks/multidimensional.py	/^    outcomponentclass = SigmoidLayer$/;"	v	class:MultiDimensionalRNN
outdim	pybrain/rl/environments/cartpole/balancetask.py	/^    def outdim(self):$/;"	m	class:DiscreteBalanceTaskRBF
outdim	pybrain/rl/environments/cartpole/balancetask.py	/^    def outdim(self):$/;"	m	class:DiscretePOMDPTask
outdim	pybrain/rl/environments/cartpole/cartpole.py	/^    outdim = 4$/;"	v	class:CartPoleEnvironment
outdim	pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^    def outdim(self):$/;"	m	class:FastCartPoleTask
outdim	pybrain/rl/environments/cartpole/nonmarkovdoublepole.py	/^    outdim = 3$/;"	v	class:NonMarkovDoublePoleEnvironment
outdim	pybrain/rl/environments/cartpole/nonmarkovpole.py	/^    outdim = 2$/;"	v	class:NonMarkovPoleEnvironment
outdim	pybrain/rl/environments/environment.py	/^    outdim = 0$/;"	v	class:Environment
outdim	pybrain/rl/environments/functions/function.py	/^    outdim = 0$/;"	v	class:FunctionEnvironment
outdim	pybrain/rl/environments/functions/multiobjective.py	/^    def outdim(self):$/;"	m	class:MultiObjectiveFunction
outdim	pybrain/rl/environments/mazes/tasks/pomdp.py	/^    def outdim(self):$/;"	m	class:POMDPTask
outdim	pybrain/rl/environments/ode/environment.py	/^    def outdim(self):$/;"	m	class:ODEEnvironment
outdim	pybrain/rl/environments/shipsteer/shipsteer.py	/^    def outdim(self):$/;"	m	class:ShipSteeringEnvironment
outdim	pybrain/rl/environments/simplerace/simpleracetcp.py	/^    outdim = 7$/;"	v	class:SimpleraceEnvironment
outdim	pybrain/rl/environments/task.py	/^    def outdim(self):$/;"	m	class:Task
outdim	pybrain/rl/environments/twoplayergames/capturegame.py	/^    def outdim(self):$/;"	m	class:CaptureGame
outdim	pybrain/rl/environments/twoplayergames/gomoku.py	/^    def outdim(self):$/;"	m	class:GomokuGame
outdim	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    def outdim(self):$/;"	m	class:DiscreteBalanceTaskRBF
outdim	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    def outdim(self):$/;"	m	class:DiscretePOMDPTask
outdim	tools/pybrain/pybrain/rl/environments/cartpole/cartpole.py	/^    outdim = 4$/;"	v	class:CartPoleEnvironment
outdim	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^    def outdim(self):$/;"	m	class:FastCartPoleTask
outdim	tools/pybrain/pybrain/rl/environments/cartpole/nonmarkovdoublepole.py	/^    outdim = 3$/;"	v	class:NonMarkovDoublePoleEnvironment
outdim	tools/pybrain/pybrain/rl/environments/cartpole/nonmarkovpole.py	/^    outdim = 2$/;"	v	class:NonMarkovPoleEnvironment
outdim	tools/pybrain/pybrain/rl/environments/environment.py	/^    outdim = 0$/;"	v	class:Environment
outdim	tools/pybrain/pybrain/rl/environments/functions/function.py	/^    outdim = 0$/;"	v	class:FunctionEnvironment
outdim	tools/pybrain/pybrain/rl/environments/functions/multiobjective.py	/^    def outdim(self):$/;"	m	class:MultiObjectiveFunction
outdim	tools/pybrain/pybrain/rl/environments/mazes/tasks/pomdp.py	/^    def outdim(self):$/;"	m	class:POMDPTask
outdim	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def outdim(self):$/;"	m	class:ODEEnvironment
outdim	tools/pybrain/pybrain/rl/environments/shipsteer/shipsteer.py	/^    def outdim(self):$/;"	m	class:ShipSteeringEnvironment
outdim	tools/pybrain/pybrain/rl/environments/simplerace/simpleracetcp.py	/^    outdim = 7$/;"	v	class:SimpleraceEnvironment
outdim	tools/pybrain/pybrain/rl/environments/task.py	/^    def outdim(self):$/;"	m	class:Task
outdim	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    def outdim(self):$/;"	m	class:CaptureGame
outdim	tools/pybrain/pybrain/rl/environments/twoplayergames/gomoku.py	/^    def outdim(self):$/;"	m	class:GomokuGame
outmod	pybrain/structure/connections/connection.py	/^    outmod = None$/;"	v	class:Connection
outmod	tools/pybrain/pybrain/structure/connections/connection.py	/^    outmod = None$/;"	v	class:Connection
outputbuffer	pybrain/structure/evolvables/cheaplycopiable.py	/^    def outputbuffer(self):$/;"	m	class:CheaplyCopiable
outputbuffer	tools/pybrain/pybrain/structure/evolvables/cheaplycopiable.py	/^    def outputbuffer(self):$/;"	m	class:CheaplyCopiable
outputline	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^    outputline = plot(trnSequenceOutput,"b-") # plot the actual output$/;"	v
outputs	pybrain/structure/networks/custom/capturegame.py	/^    outputs = 1$/;"	v	class:CaptureGameNetwork
outputs	pybrain/structure/networks/multidimensional.py	/^    outputs = 1$/;"	v	class:MultiDimensionalRNN
outputs	tools/pybrain/pybrain/structure/networks/custom/capturegame.py	/^    outputs = 1$/;"	v	class:CaptureGameNetwork
outputs	tools/pybrain/pybrain/structure/networks/multidimensional.py	/^    outputs = 1$/;"	v	class:MultiDimensionalRNN
outputsize	pybrain/structure/networks/bidirectional.py	/^    outputsize = 1$/;"	v	class:BidirectionalNetwork
outputsize	tools/pybrain/pybrain/structure/networks/bidirectional.py	/^    outputsize = 1$/;"	v	class:BidirectionalNetwork
outsideBounds	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^bool outsideBounds()$/;"	f
outsideBounds	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^bool outsideBounds()$/;"	f
overwrite	pybrain/tools/rlgluebridge.py	/^    overwrite = False$/;"	v	class:RlCompBenchmark
overwrite	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    overwrite = False$/;"	v	class:RlCompBenchmark
owner	pybrain/structure/parametercontainer.py	/^    owner = None$/;"	v	class:ParameterContainer
owner	tools/pybrain/pybrain/structure/parametercontainer.py	/^    owner = None$/;"	v	class:ParameterContainer
p	pybrain/tools/plotting/ciaoplot.py	/^    p = CiaoPlot(evo, h1, h2, cmap=cm.hot).show()$/;"	v	class:CiaoPlot
p	tools/pybrain/examples/unsupervised/kohonen.py	/^p = pylab.plot(som.neurons[:,:,0].flatten(), som.neurons[:,:,1].flatten(), 's')$/;"	v
p	tools/pybrain/pybrain/tools/plotting/ciaoplot.py	/^    p = CiaoPlot(evo, h1, h2, cmap=cm.hot).show()$/;"	v	class:CiaoPlot
p1	pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    p1 = KillingPlayer(h.env)$/;"	v	class:HandicapCaptureTask
p1	pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    p1 = RandomCapturePlayer(h.env)$/;"	v	class:HandicapCaptureTask
p1	tools/pybrain/examples/rl/environments/capturegame/pente.py	/^p1 = ModuleDecidingPlayer(n, g)$/;"	v
p1	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    p1 = KillingPlayer(h.env)$/;"	v	class:HandicapCaptureTask
p1	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    p1 = RandomCapturePlayer(h.env)$/;"	v	class:HandicapCaptureTask
p2	tools/pybrain/examples/rl/environments/capturegame/pente.py	/^p2 = RandomGomokuPlayer(g)$/;"	v
pPca	pybrain/auxiliary/pca.py	/^def pPca(data, dim):$/;"	f
pPca	tools/pybrain/pybrain/auxiliary/pca.py	/^def pPca(data, dim):$/;"	f
package_data	tools/pybrain/setup.py	/^    package_data={'pybrain': ['rl\/environments\/ode\/models\/*.xode']},$/;"	v
packages	tools/pybrain/setup.py	/^    packages=find_packages(exclude=['examples', 'docs']),$/;"	v
paddedClipped	pybrain/tools/plotting/fitnessprogression.py	/^    def paddedClipped(l, maxLen):$/;"	f	function:plotFitnessProgession
paddedClipped	tools/pybrain/pybrain/tools/plotting/fitnessprogression.py	/^    def paddedClipped(l, maxLen):$/;"	f	function:plotFitnessProgession
para	examples/LSTDAC.py	/^para = dict($/;"	v
paramdim	pybrain/structure/connections/connection.py	/^    paramdim = 0$/;"	v	class:Connection
paramdim	pybrain/structure/evolvables/maskedparameters.py	/^    def paramdim(self):$/;"	m	class:MaskedParameters
paramdim	pybrain/structure/modules/module.py	/^    paramdim = 0$/;"	v	class:Module
paramdim	tools/pybrain/pybrain/structure/connections/connection.py	/^    paramdim = 0$/;"	v	class:Connection
paramdim	tools/pybrain/pybrain/structure/evolvables/maskedparameters.py	/^    def paramdim(self):$/;"	m	class:MaskedParameters
paramdim	tools/pybrain/pybrain/structure/modules/module.py	/^    paramdim = 0$/;"	v	class:Module
params	pybrain/structure/connections/shared.py	/^    def params(self): return self.mother.params$/;"	m	class:SharedConnection
params	pybrain/structure/evolvables/maskedparameters.py	/^    def params(self):$/;"	m	class:MaskedParameters
params	pybrain/structure/evolvables/topology.py	/^    def params(self):$/;"	m	class:TopologyEvolvable
params	pybrain/structure/networks/rbm.py	/^    def params(self):$/;"	m	class:Rbm
params	pybrain/structure/parametercontainer.py	/^    def params(self):$/;"	m	class:ParameterContainer
params	tools/pybrain/pybrain/structure/connections/shared.py	/^    def params(self): return self.mother.params$/;"	m	class:SharedConnection
params	tools/pybrain/pybrain/structure/evolvables/maskedparameters.py	/^    def params(self):$/;"	m	class:MaskedParameters
params	tools/pybrain/pybrain/structure/evolvables/topology.py	/^    def params(self):$/;"	m	class:TopologyEvolvable
params	tools/pybrain/pybrain/structure/networks/rbm.py	/^    def params(self):$/;"	m	class:Rbm
params	tools/pybrain/pybrain/structure/parametercontainer.py	/^    def params(self):$/;"	m	class:ParameterContainer
parentChildAverage	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    parentChildAverage = 1. # proportion of the child$/;"	v	class:Coevolution
parentChildAverage	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    parentChildAverage = 1. # proportion of the child$/;"	v	class:Coevolution
passNextAction	pybrain/rl/learners/valuebased/linearfa.py	/^    passNextAction = False # for the _updateWeights method    $/;"	v	class:LinearFALearner
passNextAction	pybrain/rl/learners/valuebased/linearfa.py	/^    passNextAction = True    $/;"	v	class:LSPI
passNextAction	pybrain/rl/learners/valuebased/linearfa.py	/^    passNextAction = True$/;"	v	class:SARSALambda_LinFA
passNextAction	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    passNextAction = False # for the _updateWeights method    $/;"	v	class:LinearFALearner
passNextAction	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    passNextAction = True    $/;"	v	class:LSPI
passNextAction	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    passNextAction = True$/;"	v	class:SARSALambda_LinFA
passiveMouse	pybrain/rl/environments/flexcube/viewer.py	/^    def passiveMouse(self, x, y):$/;"	m	class:FlexCubeRenderer
passiveMouse	pybrain/rl/environments/shipsteer/viewer.py	/^    def passiveMouse(self, x, y):$/;"	m	class:FlexCubeRenderer
passiveMouse	tools/pybrain/pybrain/rl/environments/flexcube/viewer.py	/^    def passiveMouse(self, x, y):$/;"	m	class:FlexCubeRenderer
passiveMouse	tools/pybrain/pybrain/rl/environments/shipsteer/viewer.py	/^    def passiveMouse(self, x, y):$/;"	m	class:FlexCubeRenderer
passpairs	pybrain/rl/environments/ode/environment.py	/^    passpairs = []$/;"	v	class:ODEEnvironment
passpairs	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    passpairs = []$/;"	v	class:ODEEnvironment
pbplot	pybrain/tools/plotting/multiline.py	/^    pbplot = MultilinePlotter(7)$/;"	v	class:MultilinePlotter
pbplot	tools/pybrain/pybrain/tools/plotting/multiline.py	/^    pbplot = MultilinePlotter(7)$/;"	v	class:MultilinePlotter
pc1	pybrain/tests/optimizationtest.py	/^pc1 = ParameterContainer(1)$/;"	v
pc1	tools/pybrain/pybrain/tests/optimizationtest.py	/^pc1 = ParameterContainer(1)$/;"	v
pc100	pybrain/tests/optimizationtest.py	/^pc100 = ParameterContainer(100)$/;"	v
pc100	tools/pybrain/pybrain/tests/optimizationtest.py	/^pc100 = ParameterContainer(100)$/;"	v
pc2	pybrain/tests/optimizationtest.py	/^pc2 = ParameterContainer(2)$/;"	v
pc2	tools/pybrain/pybrain/tests/optimizationtest.py	/^pc2 = ParameterContainer(2)$/;"	v
pca	pybrain/auxiliary/pca.py	/^def pca(data, dim):$/;"	f
pca	tools/pybrain/pybrain/auxiliary/pca.py	/^def pca(data, dim):$/;"	f
pcontainer	pybrain/structure/evolvables/topology.py	/^    pcontainer = None$/;"	v	class:TopologyEvolvable
pcontainer	tools/pybrain/examples/optimization/optimizerinterface.py	/^pcontainer = ParameterContainer(2)$/;"	v
pcontainer	tools/pybrain/pybrain/structure/evolvables/topology.py	/^    pcontainer = None$/;"	v	class:TopologyEvolvable
peepholes	pybrain/structure/modules/lstm.py	/^    peepholes = False$/;"	v	class:LSTMLayer
peepholes	pybrain/structure/modules/mdlstm.py	/^    peepholes = False$/;"	v	class:MDLSTMLayer
peepholes	pybrain/structure/networks/custom/capturegame.py	/^    peepholes = False$/;"	v	class:CaptureGameNetwork
peepholes	pybrain/structure/networks/multidimensional.py	/^    peepholes = False$/;"	v	class:MultiDimensionalLSTM
peepholes	tools/pybrain/pybrain/structure/modules/lstm.py	/^    peepholes = False$/;"	v	class:LSTMLayer
peepholes	tools/pybrain/pybrain/structure/modules/mdlstm.py	/^    peepholes = False$/;"	v	class:MDLSTMLayer
peepholes	tools/pybrain/pybrain/structure/networks/custom/capturegame.py	/^    peepholes = False$/;"	v	class:CaptureGameNetwork
peepholes	tools/pybrain/pybrain/structure/networks/multidimensional.py	/^    peepholes = False$/;"	v	class:MultiDimensionalLSTM
penalize	pybrain/rl/environments/functions/transformations.py	/^def penalize(x, distance=5):$/;"	f
penalize	tools/pybrain/pybrain/rl/environments/functions/transformations.py	/^def penalize(x, distance=5):$/;"	f
penalized	pybrain/rl/environments/functions/function.py	/^    penalized = False$/;"	v	class:FunctionEnvironment
penalized	pybrain/rl/environments/functions/multimodal.py	/^    penalized = True$/;"	v	class:Schwefel20Function
penalized	pybrain/rl/environments/functions/transformations.py	/^    penalized = True$/;"	v	class:SoftConstrainedFunction
penalized	tools/pybrain/pybrain/rl/environments/functions/function.py	/^    penalized = False$/;"	v	class:FunctionEnvironment
penalized	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    penalized = True$/;"	v	class:Schwefel20Function
penalized	tools/pybrain/pybrain/rl/environments/functions/transformations.py	/^    penalized = True$/;"	v	class:SoftConstrainedFunction
percentError	pybrain/utilities.py	/^def percentError(out, true):$/;"	f
percentError	tools/pybrain/pybrain/utilities.py	/^def percentError(out, true):$/;"	f
performAction	environments/TrapMaze.py	/^    def performAction(self, action):$/;"	m	class:TrapMaze
performAction	pybrain/rl/environments/cartpole/balancetask.py	/^    def performAction(self, action):$/;"	m	class:BalanceTask
performAction	pybrain/rl/environments/cartpole/balancetask.py	/^    def performAction(self, action):$/;"	m	class:DiscreteBalanceTask
performAction	pybrain/rl/environments/cartpole/cartpole.py	/^    def performAction(self, action):$/;"	m	class:CartPoleEnvironment
performAction	pybrain/rl/environments/cartpole/doublepole.py	/^    def performAction(self, action):$/;"	m	class:DoublePoleEnvironment
performAction	pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^    def performAction(self, action):$/;"	m	class:FastCartPoleTask
performAction	pybrain/rl/environments/cartpole/fast_version/cartpolewrap.pyx	/^def performAction(double action):$/;"	f
performAction	pybrain/rl/environments/classic/acrobot.py	/^    def performAction(self, action):$/;"	m	class:AcrobotTask
performAction	pybrain/rl/environments/classic/acrobot.py	/^    def performAction(self, action):$/;"	m	class:SingleArmSwinger
performAction	pybrain/rl/environments/classic/mountaincar.py	/^    def performAction(self, action):$/;"	m	class:MountainCar
performAction	pybrain/rl/environments/classic/xor.py	/^    def performAction(self, action):$/;"	m	class:XORChainTask
performAction	pybrain/rl/environments/classic/xor.py	/^    def performAction(self, action):$/;"	m	class:XORTask
performAction	pybrain/rl/environments/environment.py	/^    def performAction(self, action):$/;"	m	class:Environment
performAction	pybrain/rl/environments/episodic.py	/^    def performAction(self, action):$/;"	m	class:EpisodicTask
performAction	pybrain/rl/environments/flexcube/environment.py	/^    def performAction(self, action):$/;"	m	class:FlexCubeEnvironment
performAction	pybrain/rl/environments/flexcube/tasks.py	/^    def performAction(self, action):$/;"	m	class:NoRewardTask
performAction	pybrain/rl/environments/functions/function.py	/^    def performAction(self, action):$/;"	m	class:FunctionEnvironment
performAction	pybrain/rl/environments/mazes/maze.py	/^    def performAction(self, action):$/;"	m	class:Maze
performAction	pybrain/rl/environments/mazes/polarmaze.py	/^    def performAction(self, action):$/;"	m	class:PolarMaze
performAction	pybrain/rl/environments/mazes/tasks/maze4x3.py	/^    def performAction(self, action):$/;"	m	class:FourByThreeMaze
performAction	pybrain/rl/environments/mazes/tasks/mdp.py	/^    def performAction(self, action):$/;"	m	class:MDPMazeTask
performAction	pybrain/rl/environments/mazes/tasks/pomdp.py	/^    def performAction(self, action):$/;"	m	class:POMDPTask
performAction	pybrain/rl/environments/mazes/tasks/shuttle.py	/^    def performAction(self, action):$/;"	m	class:ShuttleDocking
performAction	pybrain/rl/environments/mazes/tasks/tiger.py	/^    def performAction(self, action):$/;"	m	class:TigerTask
performAction	pybrain/rl/environments/ode/environment.py	/^    def performAction(self, action):$/;"	m	class:ODEEnvironment
performAction	pybrain/rl/environments/ode/tasks/acrobot.py	/^    def performAction(self, action):$/;"	m	class:GradualRewardTask
performAction	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def performAction(self, action):$/;"	m	class:CCRLTask
performAction	pybrain/rl/environments/ode/tasks/johnnie.py	/^    def performAction(self, action):$/;"	m	class:JohnnieTask
performAction	pybrain/rl/environments/ode/tasks/johnnie.py	/^    def performAction(self, action):$/;"	m	class:StandingUpTask
performAction	pybrain/rl/environments/shipsteer/northwardtask.py	/^    def performAction(self, action):$/;"	m	class:GoNorthwardTask
performAction	pybrain/rl/environments/shipsteer/shipsteer.py	/^    def performAction(self, action):$/;"	m	class:ShipSteeringEnvironment
performAction	pybrain/rl/environments/simple/environment.py	/^    def performAction(self, action):$/;"	m	class:SimpleEnvironment
performAction	pybrain/rl/environments/simple/tasks.py	/^    def performAction(self, action):$/;"	m	class:MinimizeTask
performAction	pybrain/rl/environments/simplerace/simpleracetask.py	/^    def performAction(self, action):$/;"	m	class:SimpleraceTask
performAction	pybrain/rl/environments/simplerace/simpleracetcp.py	/^    def performAction(self, action):$/;"	m	class:SimpleraceEnvironment
performAction	pybrain/rl/environments/task.py	/^    def performAction(self, action):$/;"	m	class:Task
performAction	pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^    def performAction(self, action):$/;"	m	class:CaptureGameTask
performAction	pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^    def performAction(self, action):$/;"	m	class:GomokuTask
performAction	pybrain/rl/environments/twoplayergames/twoplayergame.py	/^    def performAction(self, action):$/;"	m	class:CompetitiveEnvironment
performAction	pybrain/rl/environments/twoplayergames/twoplayergame.py	/^    def performAction(self, action):$/;"	m	class:TwoPlayerGame
performAction	task/RobotMotionTask.py	/^    def performAction(self, action):$/;"	m	class:RobotMotionTask
performAction	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    def performAction(self, action):$/;"	m	class:BalanceTask
performAction	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    def performAction(self, action):$/;"	m	class:DiscreteBalanceTask
performAction	tools/pybrain/pybrain/rl/environments/cartpole/cartpole.py	/^    def performAction(self, action):$/;"	m	class:CartPoleEnvironment
performAction	tools/pybrain/pybrain/rl/environments/cartpole/doublepole.py	/^    def performAction(self, action):$/;"	m	class:DoublePoleEnvironment
performAction	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^    def performAction(self, action):$/;"	m	class:FastCartPoleTask
performAction	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpolewrap.pyx	/^def performAction(double action):$/;"	f
performAction	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    def performAction(self, action):$/;"	m	class:AcrobotTask
performAction	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    def performAction(self, action):$/;"	m	class:SingleArmSwinger
performAction	tools/pybrain/pybrain/rl/environments/classic/mountaincar.py	/^    def performAction(self, action):$/;"	m	class:MountainCar
performAction	tools/pybrain/pybrain/rl/environments/classic/xor.py	/^    def performAction(self, action):$/;"	m	class:XORChainTask
performAction	tools/pybrain/pybrain/rl/environments/classic/xor.py	/^    def performAction(self, action):$/;"	m	class:XORTask
performAction	tools/pybrain/pybrain/rl/environments/environment.py	/^    def performAction(self, action):$/;"	m	class:Environment
performAction	tools/pybrain/pybrain/rl/environments/episodic.py	/^    def performAction(self, action):$/;"	m	class:EpisodicTask
performAction	tools/pybrain/pybrain/rl/environments/flexcube/environment.py	/^    def performAction(self, action):$/;"	m	class:FlexCubeEnvironment
performAction	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^    def performAction(self, action):$/;"	m	class:NoRewardTask
performAction	tools/pybrain/pybrain/rl/environments/functions/function.py	/^    def performAction(self, action):$/;"	m	class:FunctionEnvironment
performAction	tools/pybrain/pybrain/rl/environments/mazes/maze.py	/^    def performAction(self, action):$/;"	m	class:Maze
performAction	tools/pybrain/pybrain/rl/environments/mazes/polarmaze.py	/^    def performAction(self, action):$/;"	m	class:PolarMaze
performAction	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze4x3.py	/^    def performAction(self, action):$/;"	m	class:FourByThreeMaze
performAction	tools/pybrain/pybrain/rl/environments/mazes/tasks/mdp.py	/^    def performAction(self, action):$/;"	m	class:MDPMazeTask
performAction	tools/pybrain/pybrain/rl/environments/mazes/tasks/pomdp.py	/^    def performAction(self, action):$/;"	m	class:POMDPTask
performAction	tools/pybrain/pybrain/rl/environments/mazes/tasks/shuttle.py	/^    def performAction(self, action):$/;"	m	class:ShuttleDocking
performAction	tools/pybrain/pybrain/rl/environments/mazes/tasks/tiger.py	/^    def performAction(self, action):$/;"	m	class:TigerTask
performAction	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def performAction(self, action):$/;"	m	class:ODEEnvironment
performAction	tools/pybrain/pybrain/rl/environments/ode/tasks/acrobot.py	/^    def performAction(self, action):$/;"	m	class:GradualRewardTask
performAction	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def performAction(self, action):$/;"	m	class:CCRLTask
performAction	tools/pybrain/pybrain/rl/environments/ode/tasks/johnnie.py	/^    def performAction(self, action):$/;"	m	class:JohnnieTask
performAction	tools/pybrain/pybrain/rl/environments/ode/tasks/johnnie.py	/^    def performAction(self, action):$/;"	m	class:StandingUpTask
performAction	tools/pybrain/pybrain/rl/environments/shipsteer/northwardtask.py	/^    def performAction(self, action):$/;"	m	class:GoNorthwardTask
performAction	tools/pybrain/pybrain/rl/environments/shipsteer/shipsteer.py	/^    def performAction(self, action):$/;"	m	class:ShipSteeringEnvironment
performAction	tools/pybrain/pybrain/rl/environments/simple/environment.py	/^    def performAction(self, action):$/;"	m	class:SimpleEnvironment
performAction	tools/pybrain/pybrain/rl/environments/simple/tasks.py	/^    def performAction(self, action):$/;"	m	class:MinimizeTask
performAction	tools/pybrain/pybrain/rl/environments/simplerace/simpleracetask.py	/^    def performAction(self, action):$/;"	m	class:SimpleraceTask
performAction	tools/pybrain/pybrain/rl/environments/simplerace/simpleracetcp.py	/^    def performAction(self, action):$/;"	m	class:SimpleraceEnvironment
performAction	tools/pybrain/pybrain/rl/environments/task.py	/^    def performAction(self, action):$/;"	m	class:Task
performAction	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^    def performAction(self, action):$/;"	m	class:CaptureGameTask
performAction	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^    def performAction(self, action):$/;"	m	class:GomokuTask
performAction	tools/pybrain/pybrain/rl/environments/twoplayergames/twoplayergame.py	/^    def performAction(self, action):$/;"	m	class:CompetitiveEnvironment
performAction	tools/pybrain/pybrain/rl/environments/twoplayergames/twoplayergame.py	/^    def performAction(self, action):$/;"	m	class:TwoPlayerGame
performance	tools/pybrain/examples/rl/valuebased/nfq.py	/^performance = []$/;"	v
permutations	pybrain/supervised/knn/lsh/minhash.py	/^    permutations = property(__getPermutations,$/;"	v	class:MinHash
permutations	tools/pybrain/pybrain/supervised/knn/lsh/minhash.py	/^    permutations = property(__getPermutations,$/;"	v	class:MinHash
permute	pybrain/supervised/knn/lsh/minhash.py	/^    def permute(arr):$/;"	f	function:arrayPermutation
permute	pybrain/utilities.py	/^def permute(arr, permutation):$/;"	f
permute	tools/pybrain/pybrain/supervised/knn/lsh/minhash.py	/^    def permute(arr):$/;"	f	function:arrayPermutation
permute	tools/pybrain/pybrain/utilities.py	/^def permute(arr, permutation):$/;"	f
permuteToBlocks	pybrain/utilities.py	/^def permuteToBlocks(arr, blockshape):$/;"	f
permuteToBlocks	tools/pybrain/pybrain/utilities.py	/^def permuteToBlocks(arr, blockshape):$/;"	f
permuteToBlocks2d	pybrain/utilities.py	/^def permuteToBlocks2d(arr, blockheight, blockwidth):$/;"	f
permuteToBlocks2d	tools/pybrain/pybrain/utilities.py	/^def permuteToBlocks2d(arr, blockheight, blockwidth):$/;"	f
permuteToBlocks3d	pybrain/utilities.py	/^def permuteToBlocks3d(arr, blockdepth, blockheight, blockwidth):$/;"	f
permuteToBlocks3d	tools/pybrain/pybrain/utilities.py	/^def permuteToBlocks3d(arr, blockdepth, blockheight, blockwidth):$/;"	f
perseus	pybrain/rl/environments/mazes/maze.py	/^    perseus = None$/;"	v	class:Maze
perseus	tools/pybrain/pybrain/rl/environments/mazes/maze.py	/^    perseus = None$/;"	v	class:Maze
pertGlasPos	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def pertGlasPos(self, num):$/;"	m	class:CCRLGlasVarRandTask
pertGlasPos	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def pertGlasPos(self, num):$/;"	m	class:CCRLGlasVarTask
pertGlasPos	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def pertGlasPos(self, num):$/;"	m	class:CCRLPlateTask
pertGlasPos	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def pertGlasPos(self, num):$/;"	m	class:CCRLPointTask
pertGlasPos	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def pertGlasPos(self, num):$/;"	m	class:CCRLPointVarTask
pertGlasPos	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def pertGlasPos(self, num):$/;"	m	class:CCRLGlasVarRandTask
pertGlasPos	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def pertGlasPos(self, num):$/;"	m	class:CCRLGlasVarTask
pertGlasPos	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def pertGlasPos(self, num):$/;"	m	class:CCRLPlateTask
pertGlasPos	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def pertGlasPos(self, num):$/;"	m	class:CCRLPointTask
pertGlasPos	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def pertGlasPos(self, num):$/;"	m	class:CCRLPointVarTask
perturbation	pybrain/optimization/finitedifference/fd.py	/^    def perturbation(self):$/;"	m	class:FiniteDifferences
perturbation	pybrain/optimization/finitedifference/pgpe.py	/^    def perturbation(self):$/;"	m	class:PGPE
perturbation	pybrain/optimization/finitedifference/spsa.py	/^    def perturbation(self):$/;"	m	class:SimpleSPSA
perturbation	tools/pybrain/pybrain/optimization/finitedifference/fd.py	/^    def perturbation(self):$/;"	m	class:FiniteDifferences
perturbation	tools/pybrain/pybrain/optimization/finitedifference/pgpe.py	/^    def perturbation(self):$/;"	m	class:PGPE
perturbation	tools/pybrain/pybrain/optimization/finitedifference/spsa.py	/^    def perturbation(self):$/;"	m	class:SimpleSPSA
pickleDumpDict	pybrain/tools/filehandling.py	/^def pickleDumpDict(name, d):$/;"	f
pickleDumpDict	tools/pybrain/pybrain/tools/filehandling.py	/^def pickleDumpDict(name, d):$/;"	f
pickleReadDict	pybrain/tools/filehandling.py	/^def pickleReadDict(name):$/;"	f
pickleReadDict	tools/pybrain/pybrain/tools/filehandling.py	/^def pickleReadDict(name):$/;"	f
pl	tools/pybrain/examples/rl/environments/shipsteer/shipbench_sde.py	/^    pl = MultilinePlotter(autoscale=1.2, xlim=[0, 50], ylim=[0, 1])$/;"	v
playToTheEnd	pybrain/rl/environments/twoplayergames/capturegame.py	/^    def playToTheEnd(self, p1, p2):$/;"	m	class:CaptureGame
playToTheEnd	pybrain/rl/environments/twoplayergames/gomoku.py	/^    def playToTheEnd(self, p1, p2):$/;"	m	class:GomokuGame
playToTheEnd	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    def playToTheEnd(self, p1, p2):$/;"	m	class:CaptureGame
playToTheEnd	tools/pybrain/pybrain/rl/environments/twoplayergames/gomoku.py	/^    def playToTheEnd(self, p1, p2):$/;"	m	class:GomokuGame
plotAll	pybrain/tools/plotting/fitnesslandscapes.py	/^    def plotAll(self, levels=50, popup=True):$/;"	m	class:FitnessPlotter
plotAll	tools/pybrain/pybrain/tools/plotting/fitnesslandscapes.py	/^    def plotAll(self, levels=50, popup=True):$/;"	m	class:FitnessPlotter
plotCovEllipse	pybrain/tools/plotting/fitnesslandscapes.py	/^def plotCovEllipse(emat, center, segments=50, color='y', transp=1.):$/;"	f
plotCovEllipse	tools/pybrain/pybrain/tools/plotting/fitnesslandscapes.py	/^def plotCovEllipse(emat, center, segments=50, color='y', transp=1.):$/;"	f
plotCurves	pybrain/auxiliary/gaussprocess.py	/^    def plotCurves(self, showSamples=False, force2D=True):$/;"	m	class:GaussianProcess
plotCurves	tools/pybrain/pybrain/auxiliary/gaussprocess.py	/^    def plotCurves(self, showSamples=False, force2D=True):$/;"	m	class:GaussianProcess
plotData	tools/pybrain/examples/supervised/neuralnets+svm/datasets/datagenerator.py	/^def plotData(ds):$/;"	f
plotFitnessProgession	pybrain/tools/plotting/fitnessprogression.py	/^def plotFitnessProgession(fitdict, batchsize=1, semilog=True,$/;"	f
plotFitnessProgession	tools/pybrain/pybrain/tools/plotting/fitnessprogression.py	/^def plotFitnessProgession(fitdict, batchsize=1, semilog=True,$/;"	f
plotGaussian	pybrain/tools/mixtures/mixtureofgaussian.py	/^    def plotGaussian(self, col, dm):$/;"	m	class:MixtureOfGaussians
plotGaussian	tools/pybrain/pybrain/tools/mixtures/mixtureofgaussian.py	/^    def plotGaussian(self, col, dm):$/;"	m	class:MixtureOfGaussians
plotPerformance	tools/pybrain/examples/rl/valuebased/nfq.py	/^def plotPerformance(values, fig):$/;"	f
plotReward	pybrain/tools/mixtures/mixtureofgaussian.py	/^    def plotReward(self, col):$/;"	m	class:MixtureOfGaussians
plotReward	tools/pybrain/pybrain/tools/mixtures/mixtureofgaussian.py	/^    def plotReward(self, col):$/;"	m	class:MixtureOfGaussians
plotVariations	pybrain/tools/plotting/quickvariations.py	/^def plotVariations(datalist, titles, genFun, varyperplot=None, prePlotFun=None, postPlotFun=None,$/;"	f
plotVariations	tools/pybrain/pybrain/tools/plotting/quickvariations.py	/^def plotVariations(datalist, titles, genFun, varyperplot=None, prePlotFun=None, postPlotFun=None,$/;"	f
plot_reward	examples/plot_reward.py	/^def plot_reward(FILE):$/;"	f
plotsymbols	pybrain/tools/plotting/fitnessprogression.py	/^plotsymbols = ['-', ':', '-.']$/;"	v
plotsymbols	tools/pybrain/pybrain/tools/plotting/fitnessprogression.py	/^plotsymbols = ['-', ':', '-.']$/;"	v
points2Vector	pybrain/rl/environments/flexcube/objects3d.py	/^    def points2Vector(self, startPoint, endPoint):$/;"	m	class:Objects3D
points2Vector	pybrain/rl/environments/shipsteer/viewer.py	/^    def points2Vector(self, startPoint, endPoint):$/;"	m	class:FlexCubeRenderer
points2Vector	tools/pybrain/pybrain/rl/environments/flexcube/objects3d.py	/^    def points2Vector(self, startPoint, endPoint):$/;"	m	class:Objects3D
points2Vector	tools/pybrain/pybrain/rl/environments/shipsteer/viewer.py	/^    def points2Vector(self, startPoint, endPoint):$/;"	m	class:FlexCubeRenderer
poleangle	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^double poleangle;$/;"	v
poleangle	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^double poleangle;$/;"	v
polelength	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^double polelength;$/;"	v
polelength	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^double polelength;$/;"	v
policy	enac.py	/^policy = BoltzmanPolicy(T)$/;"	v
policy	examples/ENAC.py	/^policy = BoltzmanPolicy(feaDim = 2, numActions = 4, T = 100)$/;"	v
policy	examples/LSTDAC.py	/^policy = BoltzmanPolicy(feaDim = 2, numActions = 4, T = 100)$/;"	v
policy	main.py	/^policy = BoltzmanPolicy(T)$/;"	v
populationSize	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    populationSize = 50$/;"	v	class:Coevolution
populationSize	pybrain/optimization/populationbased/evolution.py	/^    populationSize = 10$/;"	v	class:Evolution
populationSize	pybrain/optimization/populationbased/multiobjective/nsga2.py	/^    populationSize = 100$/;"	v	class:MultiObjectiveGA
populationSize	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    populationSize = 50$/;"	v	class:Coevolution
populationSize	tools/pybrain/pybrain/optimization/populationbased/evolution.py	/^    populationSize = 10$/;"	v	class:Evolution
populationSize	tools/pybrain/pybrain/optimization/populationbased/multiobjective/nsga2.py	/^    populationSize = 100$/;"	v	class:MultiObjectiveGA
port	pybrain/tools/rlgluebridge.py	/^    port = DEFAULT_PORT$/;"	v	class:RlCompBenchmark
port	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    port = DEFAULT_PORT$/;"	v	class:RlCompBenchmark
predParams	pybrain/structure/modules/mdrnnlayer.py	/^    def predParams(self):$/;"	m	class:MdrnnLayer
predParams	tools/pybrain/pybrain/structure/modules/mdrnnlayer.py	/^    def predParams(self):$/;"	m	class:MdrnnLayer
predefined	pybrain/structure/networks/custom/capturegame.py	/^    predefined = None$/;"	v	class:CaptureGameNetwork
predefined	tools/pybrain/pybrain/structure/networks/custom/capturegame.py	/^    predefined = None$/;"	v	class:CaptureGameNetwork
predictOutcome	pybrain/tests/unittests/structure/modules/test_peephole_lstm.py	/^def predictOutcome(net, input, output):$/;"	f
predictOutcome	tools/pybrain/pybrain/tests/unittests/structure/modules/test_peephole_lstm.py	/^def predictOutcome(net, input, output):$/;"	f
prepare_GL	pybrain/rl/environments/ode/viewer.py	/^    def prepare_GL(self):$/;"	m	class:ODEViewer
prepare_GL	tools/pybrain/pybrain/rl/environments/ode/viewer.py	/^    def prepare_GL(self):$/;"	m	class:ODEViewer
prepare_docstring	tools/pybrain/docs/sphinx/autodoc_hack.py	/^def prepare_docstring(s):$/;"	f
presetGamesProportion	pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    presetGamesProportion = 0.5$/;"	v	class:RelativeCaptureTask
presetGamesProportion	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    presetGamesProportion = 0.5$/;"	v	class:RelativeCaptureTask
printResults	pybrain/tools/example_tools.py	/^    def printResults(self,resList, runs, updates):$/;"	m	class:ExTools
printResults	tools/pybrain/pybrain/tools/example_tools.py	/^    def printResults(self,resList, runs, updates):$/;"	m	class:ExTools
prnts	tools/pybrain/examples/rl/environments/cartpole/cart_all.py	/^prnts=100 #number of learning steps after results are printed$/;"	v
prnts	tools/pybrain/examples/rl/environments/cartpole/cart_cma.py	/^prnts=100 #number of learning steps after results are printed$/;"	v
prnts	tools/pybrain/examples/rl/environments/cartpole/cart_enac.py	/^prnts=4 #number of learning steps after results are printed$/;"	v
prnts	tools/pybrain/examples/rl/environments/cartpole/cart_fem.py	/^prnts=100 #number of learning steps after results are printed$/;"	v
prnts	tools/pybrain/examples/rl/environments/cartpole/cart_nes.py	/^prnts=100 #number of learning steps after results are printed$/;"	v
prnts	tools/pybrain/examples/rl/environments/cartpole/cart_pgpe.py	/^prnts=100 #number of learning steps after results are printed$/;"	v
prnts	tools/pybrain/examples/rl/environments/cartpole/cart_reinf.py	/^prnts=4 #number of learning steps after results are printed$/;"	v
prnts	tools/pybrain/examples/rl/environments/flexcube/flexcube_pgpe.py	/^prnts=1 #number of learning steps after results are printed$/;"	v
prnts	tools/pybrain/examples/rl/environments/flexcube/flexcube_spsa.py	/^prnts=1 #number of learning steps after results are printed$/;"	v
prnts	tools/pybrain/examples/rl/environments/ode/acrobot_fd.py	/^prnts=1 #number of learning steps after results are printed$/;"	v
prnts	tools/pybrain/examples/rl/environments/ode/acrobot_pgpe.py	/^prnts=1 #number of learning steps after results are printed$/;"	v
prnts	tools/pybrain/examples/rl/environments/ode/ccrl_glass_pgpe.py	/^prnts=1 #number of learning steps after results are printed$/;"	v
prnts	tools/pybrain/examples/rl/environments/ode/ccrl_plate_pgpe.py	/^prnts=1 #number of learning steps after results are printed$/;"	v
prnts	tools/pybrain/examples/rl/environments/ode/johnnie_pgpe.py	/^prnts=1 #number of learning steps after results are printed$/;"	v
prnts	tools/pybrain/examples/rl/environments/ode/johnnie_reinforce.py	/^prnts=1 #number of learning steps after results are printed$/;"	v
prnts	tools/pybrain/examples/rl/environments/shipsteer/shipbench_pgpe.py	/^prnts=50 #number of learning steps after results are printed$/;"	v
produceOffspring	pybrain/optimization/populationbased/evolution.py	/^    def produceOffspring(self):$/;"	m	class:Evolution
produceOffspring	pybrain/optimization/populationbased/ga.py	/^    def produceOffspring(self):$/;"	m	class:GA
produceOffspring	tools/pybrain/pybrain/optimization/populationbased/evolution.py	/^    def produceOffspring(self):$/;"	m	class:Evolution
produceOffspring	tools/pybrain/pybrain/optimization/populationbased/ga.py	/^    def produceOffspring(self):$/;"	m	class:GA
project	tools/pybrain/docs/sphinx/conf.py	/^project = 'PyBrain'$/;"	v
psymbol	pybrain/tools/plotting/fitnessprogression.py	/^psymbol = '-'$/;"	v
psymbol	tools/pybrain/pybrain/tools/plotting/fitnessprogression.py	/^psymbol = '-'$/;"	v
pulse	tools/pybrain/docs/html/_static/searchtools.js	/^    function pulse() {$/;"	f
put	pybrain/supervised/knn/lsh/minhash.py	/^    def put(self, item, satellite):$/;"	m	class:MinHash
put	tools/pybrain/pybrain/supervised/knn/lsh/minhash.py	/^    def put(self, item, satellite):$/;"	m	class:MinHash
pygments_style	tools/pybrain/docs/sphinx/conf.py	/^pygments_style = 'sphinx'$/;"	v
pyrex_cplus	pybrain/rl/environments/cartpole/fast_version/cartpolecompile.py	/^                                pyrex_cplus=[True],$/;"	v
pyrex_cplus	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpolecompile.py	/^                                pyrex_cplus=[True],$/;"	v
quickExpr	tools/pybrain/docs/html/_static/jquery.js	/^(function(){var _jQuery=window.jQuery,_$=window.$;var jQuery=window.jQuery=window.$=function(selector,context){return new jQuery.fn.init(selector,context);};var quickExpr=\/^[^<]*(<(.|\\s)+>)[^>]*$|^#(\\w+)$\/,isSimple=\/^.[^:#\\[\\.]*$\/,undefined;jQuery.fn=jQuery.prototype={init:function(selector,context){selector=selector||document;if(selector.nodeType){this[0]=selector;this.length=1;return this;}if(typeof selector=="string"){var match=quickExpr.exec(selector);if(match&&(match[1]||!context)){if(match[1])selector=jQuery.clean([match[1]],context);else{var elem=document.getElementById(match[3]);if(elem){if(elem.id!=match[3])return jQuery().find(selector);return jQuery(elem);}selector=[];}}else$/;"	v
r	examples/ENAC.py	/^        r = 0$/;"	v
r	examples/ENAC.py	/^r = 0$/;"	v
r	examples/LSTDAC.py	/^        r = 0$/;"	v
r	examples/LSTDAC.py	/^r = 0$/;"	v
r	examples/QLambda_LinFA.py	/^            r = 0$/;"	v
r	examples/QLambda_LinFA.py	/^r = 0$/;"	v
r	examples/Q_LinFA.py	/^            r = 0$/;"	v
r	examples/Q_LinFA.py	/^r = 0$/;"	v
r	examples/SARSA_TL.py	/^        r = 0$/;"	v
r	examples/SARSA_TL.py	/^r = 0$/;"	v
r	pybrain/rl/environments/flexcube/viewer.py	/^    r = FlexCubeRenderer(*s)$/;"	v
r	pybrain/rl/environments/shipsteer/viewer.py	/^    r = FlexCubeRenderer(*s)$/;"	v
r	pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    r = RelativeGomokuTask(7, maxGames = 10, useNetworks = True)$/;"	v	class:RelativeGomokuTask
r	pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    r = RelativeCaptureTask(5, maxGames=40, useNetworks=True,$/;"	v	class:RelativeCaptureTask
r	tools/pybrain/examples/rl/valuebased/nfq.py	/^    r = mean([sum(x) for x in experiment.doEpisodes(5)])$/;"	v
r	tools/pybrain/pybrain/rl/environments/flexcube/viewer.py	/^    r = FlexCubeRenderer(*s)$/;"	v
r	tools/pybrain/pybrain/rl/environments/shipsteer/viewer.py	/^    r = FlexCubeRenderer(*s)$/;"	v
r	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    r = RelativeGomokuTask(7, maxGames = 10, useNetworks = True)$/;"	v	class:RelativeGomokuTask
r	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    r = RelativeCaptureTask(5, maxGames=40, useNetworks=True,$/;"	v	class:RelativeCaptureTask
r_argmax	pybrain/utilities.py	/^def r_argmax(v):$/;"	f
r_argmax	tools/pybrain/pybrain/utilities.py	/^def r_argmax(v):$/;"	f
radius	pybrain/supervised/knn/lsh/nearoptimal.py	/^    radius = property(_getRadius, _setRadius)$/;"	v	class:MultiDimHash
radius	tools/pybrain/pybrain/supervised/knn/lsh/nearoptimal.py	/^    radius = property(_getRadius, _setRadius)$/;"	v	class:MultiDimHash
randAgent	tools/pybrain/examples/rl/environments/capturegame/minitournament.py	/^randAgent = RandomCapturePlayer(game, name = 'rand')$/;"	v
randomBatches	pybrain/datasets/dataset.py	/^    def randomBatches(self, label, n):$/;"	m	class:DataSet
randomBatches	tools/pybrain/pybrain/datasets/dataset.py	/^    def randomBatches(self, label, n):$/;"	m	class:DataSet
randomBoard	pybrain/rl/environments/twoplayergames/capturegame.py	/^    def randomBoard(self, nbmoves):$/;"	m	class:CaptureGame
randomBoard	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    def randomBoard(self, nbmoves):$/;"	m	class:CaptureGame
randomInit	pybrain/rl/learners/valuebased/linearfa.py	/^    randomInit = True$/;"	v	class:LinearFALearner
randomInit	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    randomInit = True$/;"	v	class:LinearFALearner
randomInitialization	pybrain/rl/environments/cartpole/cartpole.py	/^    randomInitialization = True$/;"	v	class:CartPoleEnvironment
randomInitialization	tools/pybrain/pybrain/rl/environments/cartpole/cartpole.py	/^    randomInitialization = True$/;"	v	class:CartPoleEnvironment
randomRotation	tools/pybrain/examples/unsupervised/lsh.py	/^def randomRotation(dim):$/;"	f
randomize	pybrain/structure/evolvables/cheaplycopiable.py	/^    def randomize(self, *args, **kwargs):$/;"	m	class:CheaplyCopiable
randomize	pybrain/structure/evolvables/evolvable.py	/^    def randomize(self):$/;"	m	class:Evolvable
randomize	pybrain/structure/evolvables/maskedparameters.py	/^    def randomize(self, **args):$/;"	m	class:MaskedParameters
randomize	pybrain/structure/parametercontainer.py	/^    def randomize(self):$/;"	m	class:ParameterContainer
randomize	pybrain/tests/optimizationtest.py	/^    def randomize(self):   self.x = 10 * random() - 2$/;"	m	class:SimpleEvo
randomize	tools/pybrain/pybrain/structure/evolvables/cheaplycopiable.py	/^    def randomize(self, *args, **kwargs):$/;"	m	class:CheaplyCopiable
randomize	tools/pybrain/pybrain/structure/evolvables/evolvable.py	/^    def randomize(self):$/;"	m	class:Evolvable
randomize	tools/pybrain/pybrain/structure/evolvables/maskedparameters.py	/^    def randomize(self, **args):$/;"	m	class:MaskedParameters
randomize	tools/pybrain/pybrain/structure/parametercontainer.py	/^    def randomize(self):$/;"	m	class:ParameterContainer
randomize	tools/pybrain/pybrain/tests/optimizationtest.py	/^    def randomize(self):   self.x = 10 * random() - 2$/;"	m	class:SimpleEvo
randomorder	pybrain/rl/environments/classic/xor.py	/^    randomorder = False$/;"	v	class:XORTask
randomorder	tools/pybrain/pybrain/rl/environments/classic/xor.py	/^    randomorder = False$/;"	v	class:XORTask
rangemaxs	pybrain/optimization/distributionbased/fem.py	/^    rangemaxs = None$/;"	v	class:FEM
rangemaxs	pybrain/optimization/distributionbased/ves.py	/^    rangemaxs = None$/;"	v	class:VanillaGradientEvolutionStrategies
rangemaxs	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^    rangemaxs = None$/;"	v	class:FEM
rangemaxs	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    rangemaxs = None$/;"	v	class:VanillaGradientEvolutionStrategies
rangemins	pybrain/optimization/distributionbased/fem.py	/^    rangemins = None$/;"	v	class:FEM
rangemins	pybrain/optimization/distributionbased/ves.py	/^    rangemins = None$/;"	v	class:VanillaGradientEvolutionStrategies
rangemins	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^    rangemins = None$/;"	v	class:FEM
rangemins	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    rangemins = None$/;"	v	class:VanillaGradientEvolutionStrategies
rankedFitness	pybrain/tools/rankingfunctions.py	/^def rankedFitness(R):$/;"	f
rankedFitness	tools/pybrain/pybrain/tools/rankingfunctions.py	/^def rankedFitness(R):$/;"	f
ranking	pybrain/tools/functions.py	/^def ranking(R):$/;"	f
ranking	tools/pybrain/pybrain/tools/functions.py	/^def ranking(R):$/;"	f
ratioTh	examples/problem_settings.py	/^ratioTh = 4$/;"	v
ratioTh	settings.py	/^ratioTh = 4$/;"	v
rbm	tools/pybrain/examples/unsupervised/rbm.py	/^rbm = Rbm.fromDims(6, 1)$/;"	v
reachProb	enac.py	/^reachProb = ReachProbCalculator(env, task, agent)$/;"	v
reachProb	main.py	/^reachProb = ReachProbCalculator(env, task, agent)$/;"	v
reachProbInterval	examples/problem_settings.py	/^reachProbInterval = 100$/;"	v
reachProbInterval	settings.py	/^reachProbInterval = 100$/;"	v
reachable	pybrain/utilities.py	/^def reachable(stepFunction, start, destinations, _alreadyseen=None):$/;"	f
reachable	tools/pybrain/pybrain/utilities.py	/^def reachable(stepFunction, start, destinations, _alreadyseen=None):$/;"	f
readArgs	pybrain/tools/customxml/networkreader.py	/^    def readArgs(self, node):$/;"	m	class:NetworkReader
readArgs	tools/pybrain/pybrain/tools/customxml/networkreader.py	/^    def readArgs(self, node):$/;"	m	class:NetworkReader
readAttrDict	pybrain/tools/customxml/handling.py	/^    def readAttrDict(self, node, transform = None):$/;"	m	class:XMLHandling
readAttrDict	tools/pybrain/pybrain/tools/customxml/handling.py	/^    def readAttrDict(self, node, transform = None):$/;"	m	class:XMLHandling
readBuildable	pybrain/tools/customxml/networkreader.py	/^    def readBuildable(self, node):$/;"	m	class:NetworkReader
readBuildable	tools/pybrain/pybrain/tools/customxml/networkreader.py	/^    def readBuildable(self, node):$/;"	m	class:NetworkReader
readConnection	pybrain/tools/customxml/networkreader.py	/^    def readConnection(self, cnode):$/;"	m	class:NetworkReader
readConnection	tools/pybrain/pybrain/tools/customxml/networkreader.py	/^    def readConnection(self, cnode):$/;"	m	class:NetworkReader
readDoubles	pybrain/tools/customxml/handling.py	/^    def readDoubles(self, node):$/;"	m	class:XMLHandling
readDoubles	tools/pybrain/pybrain/tools/customxml/handling.py	/^    def readDoubles(self, node):$/;"	m	class:XMLHandling
readFrom	pybrain/tools/customxml/networkreader.py	/^    def readFrom(filename, name = None, index = 0):$/;"	m	class:NetworkReader
readFrom	tools/pybrain/pybrain/tools/customxml/networkreader.py	/^    def readFrom(filename, name = None, index = 0):$/;"	m	class:NetworkReader
readMatrix	pybrain/tools/customxml/handling.py	/^    def readMatrix(self, node):$/;"	m	class:XMLHandling
readMatrix	tools/pybrain/pybrain/tools/customxml/handling.py	/^    def readMatrix(self, node):$/;"	m	class:XMLHandling
readModule	pybrain/tools/customxml/networkreader.py	/^    def readModule(self, mnode):$/;"	m	class:NetworkReader
readModule	tools/pybrain/pybrain/tools/customxml/networkreader.py	/^    def readModule(self, mnode):$/;"	m	class:NetworkReader
readNetwork	pybrain/tools/customxml/networkreader.py	/^    def readNetwork(self, node):$/;"	m	class:NetworkReader
readNetwork	tools/pybrain/pybrain/tools/customxml/networkreader.py	/^    def readNetwork(self, node):$/;"	m	class:NetworkReader
readParams	pybrain/tools/customxml/networkreader.py	/^    def readParams(self, node, m):$/;"	m	class:NetworkReader
readParams	tools/pybrain/pybrain/tools/customxml/networkreader.py	/^    def readParams(self, node, m):$/;"	m	class:NetworkReader
rebuilt	pybrain/structure/networks/custom/capturegame.py	/^    rebuilt = False$/;"	v	class:CaptureGameNetwork
rebuilt	tools/pybrain/pybrain/structure/networks/custom/capturegame.py	/^    rebuilt = False$/;"	v	class:CaptureGameNetwork
reconstruct	pybrain/datasets/dataset.py	/^    def reconstruct(cls, filename):$/;"	m	class:DataSet
reconstruct	tools/pybrain/pybrain/datasets/dataset.py	/^    def reconstruct(cls, filename):$/;"	m	class:DataSet
reduceDim	pybrain/auxiliary/pca.py	/^def reduceDim(data, dim, func='pca'):$/;"	f
reduceDim	tools/pybrain/pybrain/auxiliary/pca.py	/^def reduceDim(data, dim, func='pca'):$/;"	f
refineGrid	pybrain/supervised/trainers/svmtrainer.py	/^    def refineGrid(self, cmin, cmax):$/;"	m	class:GridSearchDOE
refineGrid	tools/pybrain/pybrain/supervised/trainers/svmtrainer.py	/^    def refineGrid(self, cmin, cmax):$/;"	m	class:GridSearchDOE
regularResults	tools/pybrain/docs/html/_static/searchtools.js	/^    var regularResults = [];$/;"	v
release	tools/pybrain/docs/sphinx/conf.py	/^release = '0.3'$/;"	v
relevantPart	pybrain/tools/plotting/fitnessprogression.py	/^    def relevantPart(l):$/;"	f	function:plotFitnessProgession
relevantPart	tools/pybrain/pybrain/tools/plotting/fitnessprogression.py	/^    def relevantPart(l):$/;"	f	function:plotFitnessProgession
removeIndividual	pybrain/supervised/evolino/gpopulation.py	/^    def removeIndividual(self, individual):$/;"	m	class:Population
removeIndividual	pybrain/supervised/evolino/gpopulation.py	/^    def removeIndividual(self, individual):$/;"	m	class:SimplePopulation
removeIndividual	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^    def removeIndividual(self, individual):$/;"	m	class:Population
removeIndividual	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^    def removeIndividual(self, individual):$/;"	m	class:SimplePopulation
removeIndividuals	pybrain/supervised/evolino/gpopulation.py	/^    def removeIndividuals(self, individuals):$/;"	m	class:Population
removeIndividuals	pybrain/supervised/evolino/gpopulation.py	/^    def removeIndividuals(self, individuals):$/;"	m	class:SimplePopulation
removeIndividuals	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^    def removeIndividuals(self, individuals):$/;"	m	class:Population
removeIndividuals	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^    def removeIndividuals(self, individuals):$/;"	m	class:SimplePopulation
removeSequence	pybrain/datasets/classification.py	/^    def removeSequence(self, index):$/;"	m	class:SequenceClassificationDataSet
removeSequence	pybrain/datasets/sequential.py	/^    def removeSequence(self, index):$/;"	m	class:SequentialDataSet
removeSequence	tools/pybrain/pybrain/datasets/classification.py	/^    def removeSequence(self, index):$/;"	m	class:SequenceClassificationDataSet
removeSequence	tools/pybrain/pybrain/datasets/sequential.py	/^    def removeSequence(self, index):$/;"	m	class:SequentialDataSet
removeWorstIndividuals	pybrain/supervised/evolino/gpopulation.py	/^    def removeWorstIndividuals(self, n):$/;"	m	class:SimplePopulation
removeWorstIndividuals	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^    def removeWorstIndividuals(self, n):$/;"	m	class:SimplePopulation
render	tools/pybrain/examples/rl/valuebased/nfq.py	/^render = False$/;"	v
renderer	tools/pybrain/examples/rl/valuebased/nfq.py	/^    renderer = CartPoleRenderer()$/;"	v
replaceNansByMeans	pybrain/datasets/dataset.py	/^    def replaceNansByMeans(self):$/;"	m	class:DataSet
replaceNansByMeans	tools/pybrain/pybrain/datasets/dataset.py	/^    def replaceNansByMeans(self):$/;"	m	class:DataSet
res	pybrain/rl/environments/cartpole/fast_version/cartpolewrap.pyx	/^    res = <double*> malloc(size*sizeof(double))$/;"	v
res	pybrain/rl/environments/cartpole/fast_version/cartpolewrap.pyx	/^def res():$/;"	f
res	pybrain/rl/environments/ode/tasks/ccrl.py	/^    def res(self):$/;"	m	class:CCRLTask
res	pybrain/rl/environments/ode/tasks/johnnie.py	/^    def res(self):$/;"	m	class:JohnnieTask
res	pybrain/rl/environments/ode/tasks/johnnie.py	/^    def res(self):$/;"	m	class:JumpingTask
res	pybrain/structure/networks/convolutional.py	/^    res = N.activate(ravel(array(input)))$/;"	v	class:SimpleConvolutionalNetwork
res	pybrain/structure/networks/convolutional.py	/^    res = res.reshape(4, 4)$/;"	v	class:SimpleConvolutionalNetwork
res	tools/pybrain/examples/rl/environments/capturegame/evolvingplayer.py	/^res = storeCallResults(task)$/;"	v
res	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpolewrap.pyx	/^    res = <double*> malloc(size*sizeof(double))$/;"	v
res	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpolewrap.pyx	/^def res():$/;"	f
res	tools/pybrain/pybrain/rl/environments/ode/tasks/ccrl.py	/^    def res(self):$/;"	m	class:CCRLTask
res	tools/pybrain/pybrain/rl/environments/ode/tasks/johnnie.py	/^    def res(self):$/;"	m	class:JohnnieTask
res	tools/pybrain/pybrain/rl/environments/ode/tasks/johnnie.py	/^    def res(self):$/;"	m	class:JumpingTask
res	tools/pybrain/pybrain/structure/networks/convolutional.py	/^    res = N.activate(ravel(array(input)))$/;"	v	class:SimpleConvolutionalNetwork
res	tools/pybrain/pybrain/structure/networks/convolutional.py	/^    res = res.reshape(4, 4)$/;"	v	class:SimpleConvolutionalNetwork
reset	agents/LSTDACAgent.py	/^    def reset(self):$/;"	m	class:LSTDACAgent
reset	environments/TrapMaze.py	/^    def reset(self):$/;"	m	class:TrapMaze
reset	pybrain/auxiliary/gaussprocess.py	/^    def reset(self):$/;"	m	class:GaussianProcess
reset	pybrain/datasets/dataset.py	/^    def reset(self):$/;"	m	class:DataSet
reset	pybrain/rl/agents/learning.py	/^    def reset(self):$/;"	m	class:LearningAgent
reset	pybrain/rl/agents/linearfa.py	/^    def reset(self):$/;"	m	class:LinearFA_Agent
reset	pybrain/rl/agents/logging.py	/^    def reset(self):$/;"	m	class:LoggingAgent
reset	pybrain/rl/environments/cartpole/balancetask.py	/^    def reset(self):$/;"	m	class:BalanceTask
reset	pybrain/rl/environments/cartpole/cartpole.py	/^    def reset(self):$/;"	m	class:CartPoleEnvironment
reset	pybrain/rl/environments/cartpole/cartpole.py	/^    def reset(self):$/;"	m	class:CartPoleLinEnvironment
reset	pybrain/rl/environments/cartpole/doublepole.py	/^    def reset(self):$/;"	m	class:DoublePoleEnvironment
reset	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^extern void reset()$/;"	f
reset	pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^    def reset(self):$/;"	m	class:FastCartPoleTask
reset	pybrain/rl/environments/cartpole/fast_version/cartpolewrap.pyx	/^    cdef void reset()$/;"	f
reset	pybrain/rl/environments/classic/acrobot.py	/^    def reset(self):$/;"	m	class:AcrobotTask
reset	pybrain/rl/environments/classic/mountaincar.py	/^    def reset(self):$/;"	m	class:MountainCar
reset	pybrain/rl/environments/environment.py	/^    def reset(self):$/;"	m	class:Environment
reset	pybrain/rl/environments/episodic.py	/^    def reset(self):$/;"	m	class:EpisodicTask
reset	pybrain/rl/environments/flexcube/environment.py	/^    def reset(self):$/;"	m	class:FlexCubeEnvironment
reset	pybrain/rl/environments/flexcube/tasks.py	/^    def reset(self):$/;"	m	class:JumpTask
reset	pybrain/rl/environments/flexcube/tasks.py	/^    def reset(self):$/;"	m	class:NoRewardTask
reset	pybrain/rl/environments/flexcube/tasks.py	/^    def reset(self):$/;"	m	class:WalkDirectionTask
reset	pybrain/rl/environments/functions/function.py	/^    def reset(self):$/;"	m	class:FunctionEnvironment
reset	pybrain/rl/environments/mazes/maze.py	/^    def reset(self):$/;"	m	class:Maze
reset	pybrain/rl/environments/mazes/polarmaze.py	/^    def reset(self):$/;"	m	class:PolarMaze
reset	pybrain/rl/environments/mazes/tasks/maze4x3.py	/^    def reset(self):$/;"	m	class:FourByThreeMaze
reset	pybrain/rl/environments/mazes/tasks/pomdp.py	/^    def reset(self):$/;"	m	class:POMDPTask
reset	pybrain/rl/environments/mazes/tasks/shuttle.py	/^    def reset(self):$/;"	m	class:ShuttleDocking
reset	pybrain/rl/environments/mazes/tasks/tiger.py	/^    def reset(self):$/;"	m	class:TigerTask
reset	pybrain/rl/environments/mazes/tasks/tmaze.py	/^    def reset(self):$/;"	m	class:TMaze
reset	pybrain/rl/environments/ode/environment.py	/^    def reset(self):$/;"	m	class:ODEEnvironment
reset	pybrain/rl/environments/ode/instances/ccrl.py	/^    def reset(self):$/;"	m	class:CCRLEnvironment
reset	pybrain/rl/environments/shipsteer/northwardtask.py	/^    def reset(self):$/;"	m	class:GoNorthwardTask
reset	pybrain/rl/environments/shipsteer/shipsteer.py	/^    def reset(self):$/;"	m	class:ShipSteeringEnvironment
reset	pybrain/rl/environments/simple/environment.py	/^    def reset(self):$/;"	m	class:SimpleEnvironment
reset	pybrain/rl/environments/simple/renderer.py	/^    def reset(self):$/;"	m	class:SimpleRenderer
reset	pybrain/rl/environments/simple/tasks.py	/^    def reset(self):$/;"	m	class:MinimizeTask
reset	pybrain/rl/environments/simplerace/simpleracetask.py	/^    def reset(self):$/;"	m	class:SimpleraceTask
reset	pybrain/rl/environments/simplerace/simpleracetcp.py	/^    def reset(self):$/;"	m	class:SimpleraceEnvironment
reset	pybrain/rl/environments/twoplayergames/capturegame.py	/^    def reset(self):$/;"	m	class:CaptureGame
reset	pybrain/rl/environments/twoplayergames/gomoku.py	/^    def reset(self):$/;"	m	class:GomokuGame
reset	pybrain/rl/environments/twoplayergames/pente.py	/^    def reset(self):$/;"	m	class:PenteGame
reset	pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^    def reset(self):$/;"	m	class:CaptureGameTask
reset	pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^    def reset(self):$/;"	m	class:GomokuTask
reset	pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    def reset(self):$/;"	m	class:HandicapCaptureTask
reset	pybrain/rl/environments/twoplayergames/twoplayergame.py	/^    def reset(self):$/;"	m	class:TwoPlayerGame
reset	pybrain/rl/experiments/tournament.py	/^    def reset(self):$/;"	m	class:Tournament
reset	pybrain/rl/learners/directsearch/policygradient.py	/^    def reset(self):$/;"	m	class:PolicyGradientLearner
reset	pybrain/rl/learners/directsearch/rwr.py	/^    def reset(self):$/;"	m	class:RWR
reset	pybrain/rl/learners/learner.py	/^    def reset(self):$/;"	m	class:EpisodicLearner
reset	pybrain/rl/learners/valuebased/linearfa.py	/^    def reset(self):        $/;"	m	class:LinearFALearner
reset	pybrain/structure/evolvables/cheaplycopiable.py	/^    def reset(self):$/;"	m	class:CheaplyCopiable
reset	pybrain/structure/evolvables/maskedmodule.py	/^    def reset(self):$/;"	m	class:MaskedModule
reset	pybrain/structure/modules/evolinonetwork.py	/^    def reset(self):$/;"	m	class:EvolinoNetwork
reset	pybrain/structure/modules/module.py	/^    def reset(self):$/;"	m	class:Module
reset	pybrain/structure/modules/svmunit.py	/^    def reset(self):$/;"	m	class:SVMUnit
reset	pybrain/structure/networks/network.py	/^    def reset(self):$/;"	m	class:Network
reset	pybrain/supervised/evolino/networkwrapper.py	/^    def reset(self):$/;"	m	class:EvolinoNetwork
reset	pybrain/tests/unittests/tools/test_rlgluebridge.py	/^    def reset(self):$/;"	m	class:PseudoPybrainAgent
reset	task/RobotMotionTask.py	/^    def reset(self):$/;"	m	class:RobotMotionTask
reset	tools/pybrain/pybrain/auxiliary/gaussprocess.py	/^    def reset(self):$/;"	m	class:GaussianProcess
reset	tools/pybrain/pybrain/datasets/dataset.py	/^    def reset(self):$/;"	m	class:DataSet
reset	tools/pybrain/pybrain/rl/agents/learning.py	/^    def reset(self):$/;"	m	class:LearningAgent
reset	tools/pybrain/pybrain/rl/agents/linearfa.py	/^    def reset(self):$/;"	m	class:LinearFA_Agent
reset	tools/pybrain/pybrain/rl/agents/logging.py	/^    def reset(self):$/;"	m	class:LoggingAgent
reset	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    def reset(self):$/;"	m	class:BalanceTask
reset	tools/pybrain/pybrain/rl/environments/cartpole/cartpole.py	/^    def reset(self):$/;"	m	class:CartPoleEnvironment
reset	tools/pybrain/pybrain/rl/environments/cartpole/cartpole.py	/^    def reset(self):$/;"	m	class:CartPoleLinEnvironment
reset	tools/pybrain/pybrain/rl/environments/cartpole/doublepole.py	/^    def reset(self):$/;"	m	class:DoublePoleEnvironment
reset	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^extern void reset()$/;"	f
reset	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpoleenv.py	/^    def reset(self):$/;"	m	class:FastCartPoleTask
reset	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpolewrap.pyx	/^    cdef void reset()$/;"	f
reset	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    def reset(self):$/;"	m	class:AcrobotTask
reset	tools/pybrain/pybrain/rl/environments/classic/mountaincar.py	/^    def reset(self):$/;"	m	class:MountainCar
reset	tools/pybrain/pybrain/rl/environments/environment.py	/^    def reset(self):$/;"	m	class:Environment
reset	tools/pybrain/pybrain/rl/environments/episodic.py	/^    def reset(self):$/;"	m	class:EpisodicTask
reset	tools/pybrain/pybrain/rl/environments/flexcube/environment.py	/^    def reset(self):$/;"	m	class:FlexCubeEnvironment
reset	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^    def reset(self):$/;"	m	class:JumpTask
reset	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^    def reset(self):$/;"	m	class:NoRewardTask
reset	tools/pybrain/pybrain/rl/environments/flexcube/tasks.py	/^    def reset(self):$/;"	m	class:WalkDirectionTask
reset	tools/pybrain/pybrain/rl/environments/functions/function.py	/^    def reset(self):$/;"	m	class:FunctionEnvironment
reset	tools/pybrain/pybrain/rl/environments/mazes/maze.py	/^    def reset(self):$/;"	m	class:Maze
reset	tools/pybrain/pybrain/rl/environments/mazes/polarmaze.py	/^    def reset(self):$/;"	m	class:PolarMaze
reset	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze4x3.py	/^    def reset(self):$/;"	m	class:FourByThreeMaze
reset	tools/pybrain/pybrain/rl/environments/mazes/tasks/pomdp.py	/^    def reset(self):$/;"	m	class:POMDPTask
reset	tools/pybrain/pybrain/rl/environments/mazes/tasks/shuttle.py	/^    def reset(self):$/;"	m	class:ShuttleDocking
reset	tools/pybrain/pybrain/rl/environments/mazes/tasks/tiger.py	/^    def reset(self):$/;"	m	class:TigerTask
reset	tools/pybrain/pybrain/rl/environments/mazes/tasks/tmaze.py	/^    def reset(self):$/;"	m	class:TMaze
reset	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def reset(self):$/;"	m	class:ODEEnvironment
reset	tools/pybrain/pybrain/rl/environments/ode/instances/ccrl.py	/^    def reset(self):$/;"	m	class:CCRLEnvironment
reset	tools/pybrain/pybrain/rl/environments/shipsteer/northwardtask.py	/^    def reset(self):$/;"	m	class:GoNorthwardTask
reset	tools/pybrain/pybrain/rl/environments/shipsteer/shipsteer.py	/^    def reset(self):$/;"	m	class:ShipSteeringEnvironment
reset	tools/pybrain/pybrain/rl/environments/simple/environment.py	/^    def reset(self):$/;"	m	class:SimpleEnvironment
reset	tools/pybrain/pybrain/rl/environments/simple/renderer.py	/^    def reset(self):$/;"	m	class:SimpleRenderer
reset	tools/pybrain/pybrain/rl/environments/simple/tasks.py	/^    def reset(self):$/;"	m	class:MinimizeTask
reset	tools/pybrain/pybrain/rl/environments/simplerace/simpleracetask.py	/^    def reset(self):$/;"	m	class:SimpleraceTask
reset	tools/pybrain/pybrain/rl/environments/simplerace/simpleracetcp.py	/^    def reset(self):$/;"	m	class:SimpleraceEnvironment
reset	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    def reset(self):$/;"	m	class:CaptureGame
reset	tools/pybrain/pybrain/rl/environments/twoplayergames/gomoku.py	/^    def reset(self):$/;"	m	class:GomokuGame
reset	tools/pybrain/pybrain/rl/environments/twoplayergames/pente.py	/^    def reset(self):$/;"	m	class:PenteGame
reset	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^    def reset(self):$/;"	m	class:CaptureGameTask
reset	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^    def reset(self):$/;"	m	class:GomokuTask
reset	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    def reset(self):$/;"	m	class:HandicapCaptureTask
reset	tools/pybrain/pybrain/rl/environments/twoplayergames/twoplayergame.py	/^    def reset(self):$/;"	m	class:TwoPlayerGame
reset	tools/pybrain/pybrain/rl/experiments/tournament.py	/^    def reset(self):$/;"	m	class:Tournament
reset	tools/pybrain/pybrain/rl/learners/directsearch/policygradient.py	/^    def reset(self):$/;"	m	class:PolicyGradientLearner
reset	tools/pybrain/pybrain/rl/learners/directsearch/rwr.py	/^    def reset(self):$/;"	m	class:RWR
reset	tools/pybrain/pybrain/rl/learners/learner.py	/^    def reset(self):$/;"	m	class:EpisodicLearner
reset	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    def reset(self):        $/;"	m	class:LinearFALearner
reset	tools/pybrain/pybrain/structure/evolvables/cheaplycopiable.py	/^    def reset(self):$/;"	m	class:CheaplyCopiable
reset	tools/pybrain/pybrain/structure/evolvables/maskedmodule.py	/^    def reset(self):$/;"	m	class:MaskedModule
reset	tools/pybrain/pybrain/structure/modules/evolinonetwork.py	/^    def reset(self):$/;"	m	class:EvolinoNetwork
reset	tools/pybrain/pybrain/structure/modules/module.py	/^    def reset(self):$/;"	m	class:Module
reset	tools/pybrain/pybrain/structure/modules/svmunit.py	/^    def reset(self):$/;"	m	class:SVMUnit
reset	tools/pybrain/pybrain/structure/networks/network.py	/^    def reset(self):$/;"	m	class:Network
reset	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def reset(self):$/;"	m	class:EvolinoNetwork
reset	tools/pybrain/pybrain/tests/unittests/tools/test_rlgluebridge.py	/^    def reset(self):$/;"	m	class:PseudoPybrainAgent
resetAllWeights	pybrain/rl/learners/directsearch/rwr.py	/^    resetAllWeights = False$/;"	v	class:RWR
resetAllWeights	tools/pybrain/pybrain/rl/learners/directsearch/rwr.py	/^    resetAllWeights = False$/;"	v	class:RWR
resetAttributes	pybrain/rl/environments/ode/environment.py	/^    def resetAttributes(self):$/;"	m	class:ODEEnvironment
resetAttributes	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def resetAttributes(self):$/;"	m	class:ODEEnvironment
resetDerivatives	pybrain/structure/evolvables/cheaplycopiable.py	/^    def resetDerivatives(self):$/;"	m	class:CheaplyCopiable
resetDerivatives	pybrain/structure/parametercontainer.py	/^    def resetDerivatives(self):$/;"	m	class:ParameterContainer
resetDerivatives	tools/pybrain/pybrain/structure/evolvables/cheaplycopiable.py	/^    def resetDerivatives(self):$/;"	m	class:CheaplyCopiable
resetDerivatives	tools/pybrain/pybrain/structure/parametercontainer.py	/^    def resetDerivatives(self):$/;"	m	class:ParameterContainer
resetOnSuccess	pybrain/rl/environments/classic/acrobot.py	/^    resetOnSuccess = False$/;"	v	class:AcrobotTask
resetOnSuccess	pybrain/rl/environments/classic/acrobot.py	/^    resetOnSuccess = False$/;"	v	class:SingleArmSwinger
resetOnSuccess	pybrain/rl/environments/classic/mountaincar.py	/^    resetOnSuccess = False$/;"	v	class:MountainCar
resetOnSuccess	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    resetOnSuccess = False$/;"	v	class:AcrobotTask
resetOnSuccess	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    resetOnSuccess = False$/;"	v	class:SingleArmSwinger
resetOnSuccess	tools/pybrain/pybrain/rl/environments/classic/mountaincar.py	/^    resetOnSuccess = False$/;"	v	class:MountainCar
resizeScene	pybrain/rl/environments/flexcube/viewer.py	/^    def resizeScene(self, width, height):$/;"	m	class:FlexCubeRenderer
resizeScene	pybrain/rl/environments/shipsteer/viewer.py	/^    def resizeScene(self, width, height):$/;"	m	class:FlexCubeRenderer
resizeScene	tools/pybrain/pybrain/rl/environments/flexcube/viewer.py	/^    def resizeScene(self, width, height):$/;"	m	class:FlexCubeRenderer
resizeScene	tools/pybrain/pybrain/rl/environments/shipsteer/viewer.py	/^    def resizeScene(self, width, height):$/;"	m	class:FlexCubeRenderer
resizedTo	pybrain/structure/networks/custom/capturegame.py	/^    def resizedTo(self, newsize):$/;"	m	class:CaptureGameNetwork
resizedTo	tools/pybrain/pybrain/structure/networks/custom/capturegame.py	/^    def resizedTo(self, newsize):$/;"	m	class:CaptureGameNetwork
resuName	pybrain/tools/example_tools.py	/^    resuName = "none.dat"$/;"	v	class:ExTools
resuName	tools/pybrain/pybrain/tools/example_tools.py	/^    resuName = "none.dat"$/;"	v	class:ExTools
resultCount	tools/pybrain/docs/html/_static/searchtools.js	/^    var resultCount = results.length;$/;"	v
results	tools/pybrain/docs/html/_static/searchtools.js	/^    var results = regularResults.concat(objectResults);$/;"	v
ret	tools/pybrain/docs/html/_static/jquery.js	/^return jQuery(context).find(selector);}else if(jQuery.isFunction(selector))return jQuery(document)[jQuery.fn.ready?"ready":"load"](selector);return this.setArray(jQuery.makeArray(selector));},jquery:"1.2.6",size:function(){return this.length;},length:0,get:function(num){return num==undefined?jQuery.makeArray(this):this[num];},pushStack:function(elems){var ret=jQuery(elems);ret.prevObject=this;return ret;},setArray:function(elems){this.length=0;Array.prototype.push.apply(this,elems);return this;},each:function(callback,args){return jQuery.each(this,callback,args);},index:function(elem){var ret=-1;return jQuery.inArray(elem&&elem.jquery?elem[0]:elem,this);},attr:function(name,value,type){var options=name;if(name.constructor==String)if(value===undefined)return this[0]&&jQuery[type||"attr"](this[0],name);else{options={};options[name]=value;}return this.each(function(i){for(name in options)jQuery.attr(type?this.style:this,name,jQuery.prop(this,options[name],type,i,name));});},css:function(key,value){if((key=='width'||key=='height')&&parseFloat(value)<0)value=undefined;return this.attr(key,value,"curCSS");},text:function(text){if(typeof text!="object"&&text!=null)return this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(text));var ret="";jQuery.each(text||this,function(){jQuery.each(this.childNodes,function(){if(this.nodeType!=8)ret+=this.nodeType!=1?this.nodeValue:jQuery.fn.text([this]);});});return ret;},wrapAll:function(html){if(this[0])jQuery(html,this[0].ownerDocument).clone().insertBefore(this[0]).map(function(){var elem=this;while(elem.firstChild)elem=elem.firstChild;return elem;}).append(this);return this;},wrapInner:function(html){return this.each(function(){jQuery(this).contents().wrapAll(html);});},wrap:function(html){return this.each(function(){jQuery(this).wrapAll(html);});},append:function(){return this.domManip(arguments,true,false,function(elem){if(this.nodeType==1)this.appendChild(elem);});},prepend:function(){return this.domManip(arguments,true,true,function(elem){if(this.nodeType==1)this.insertBefore(elem,this.firstChild);});},before:function(){return this.domManip(arguments,false,false,function(elem){this.parentNode.insertBefore(elem,this);});},after:function(){return this.domManip(arguments,false,true,function(elem){this.parentNode.insertBefore(elem,this.nextSibling);});},end:function(){return this.prevObject||jQuery([]);},find:function(selector){var elems=jQuery.map(this,function(elem){return jQuery.find(selector,elem);});return this.pushStack(\/[^+>] [^+>]\/.test(selector)||selector.indexOf("..")>-1?jQuery.unique(elems):elems);},clone:function(events){var ret=this.map(function(){if(jQuery.browser.msie&&!jQuery.isXMLDoc(this)){var clone=this.cloneNode(true),container=document.createElement("div");container.appendChild(clone);return jQuery.clean([container.innerHTML])[0];}else$/;"	v
ret	tools/pybrain/examples/rl/environments/cartpole/play_cartpole.py	/^ret = []$/;"	v
returnZeros	pybrain/structure/evolvables/maskedparameters.py	/^    returnZeros = False$/;"	v	class:MaskedParameters
returnZeros	tools/pybrain/pybrain/structure/evolvables/maskedparameters.py	/^    returnZeros = False$/;"	v	class:MaskedParameters
returns	tools/pybrain/examples/rl/environments/cartpole/play_cartpole.py	/^    returns = agent.history.getSequence(n)$/;"	v
reward	examples/ENAC.py	/^    reward = experiment._oneInteraction()$/;"	v
reward	examples/LSTDAC.py	/^    reward = experiment._oneInteraction()$/;"	v
reward	examples/QLambda_LinFA.py	/^        reward = experiment._oneInteraction()$/;"	v
reward	examples/Q_LinFA.py	/^        reward = experiment._oneInteraction()$/;"	v
reward	examples/SARSA_TL.py	/^    reward = experiment._oneInteraction()$/;"	v
reward	tools/pybrain/examples/rl/environments/cartpole/play_cartpole.py	/^    reward = returns[2]$/;"	v
reward	tools/pybrain/examples/rl/environments/shipsteer/shipbench_sde.py	/^    reward = mean(agent.history.getSumOverSequences('reward'))*task.rewardscale$/;"	v
rewardDiscount	pybrain/rl/learners/valuebased/linearfa.py	/^    rewardDiscount = 0.99 # aka gamma$/;"	v	class:LinearFALearner
rewardDiscount	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    rewardDiscount = 0.99 # aka gamma$/;"	v	class:LinearFALearner
reward_cutoff	pybrain/rl/environments/classic/xor.py	/^    reward_cutoff = 0$/;"	v	class:XORChainTask
reward_cutoff	tools/pybrain/pybrain/rl/environments/classic/xor.py	/^    reward_cutoff = 0$/;"	v	class:XORChainTask
reward_ranges	pybrain/rl/environments/classic/acrobot.py	/^    reward_ranges = [[-1.0, 1000.0]]$/;"	v	class:AcrobotTask
reward_ranges	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    reward_ranges = [[-1.0, 1000.0]]$/;"	v	class:AcrobotTask
rewards	tools/pybrain/examples/rl/environments/shipsteer/shipbench_sde.py	/^rewards = []$/;"	v
rf	pybrain/rl/environments/functions/transformations.py	/^        def rf(x):$/;"	f	function:RotateFunction.__init__
rf	tools/pybrain/pybrain/rl/environments/functions/transformations.py	/^        def rf(x):$/;"	f	function:RotateFunction.__init__
ring	pybrain/optimization/populationbased/pso.py	/^def ring(lst):$/;"	f
ring	tools/pybrain/pybrain/optimization/populationbased/pso.py	/^def ring(lst):$/;"	f
rk4	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^void rk4(double f, double y[], double dydx[], double yout[])$/;"	f
rk4	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^void rk4(double f, double y[], double dydx[], double yout[])$/;"	f
rl	pybrain/tools/example_tools.py	/^    rl = []$/;"	v	class:ExTools
rl	tools/pybrain/pybrain/tools/example_tools.py	/^    rl = []$/;"	v	class:ExTools
rll	pybrain/tools/example_tools.py	/^    rll = []$/;"	v	class:ExTools
rll	tools/pybrain/pybrain/tools/example_tools.py	/^    rll = []$/;"	v	class:ExTools
rnn	tools/pybrain/examples/supervised/neuralnets+svm/example_rnn.py	/^rnn = buildNetwork( trndata.indim, 5, trndata.outdim, hiddenclass=LSTMLayer, outclass=SoftmaxLayer, outputbias=False, recurrent=True)$/;"	v
rp	ReachProbCalculator.py	/^    rp = reachProb.GetReachProb(GetActionProb, [float(sys.argv[1]),  float(sys.argv[2])])$/;"	v	class:ReachProbCalculator
rprop	pybrain/optimization/finitedifference/fd.py	/^    rprop = False$/;"	v	class:FiniteDifferences
rprop	pybrain/optimization/finitedifference/pgpe.py	/^    rprop = False$/;"	v	class:PGPE
rprop	tools/pybrain/examples/rl/environments/ode/acrobot_pgpe.py	/^                                    rprop = False,))$/;"	v
rprop	tools/pybrain/examples/rl/environments/shipsteer/shipbench_pgpe.py	/^                                    rprop = False,$/;"	v
rprop	tools/pybrain/pybrain/optimization/finitedifference/fd.py	/^    rprop = False$/;"	v	class:FiniteDifferences
rprop	tools/pybrain/pybrain/optimization/finitedifference/pgpe.py	/^    rprop = False$/;"	v	class:PGPE
run	pybrain/rl/environments/renderer.py	/^    def run(self):$/;"	m	class:Renderer
run	pybrain/rl/experiments/queued.py	/^    def run(self, queuelength, learningcycles=-1):$/;"	m	class:QueuedExperiment
run	pybrain/rl/learners/meta/levinsearch.py	/^    def run(self, input, generator):$/;"	m	class:LevinSeach
run	pybrain/tools/rlgluebridge.py	/^    def run(self):$/;"	m	class:RlCompBenchmark
run	tools/pybrain/pybrain/rl/environments/renderer.py	/^    def run(self):$/;"	m	class:Renderer
run	tools/pybrain/pybrain/rl/experiments/queued.py	/^    def run(self, queuelength, learningcycles=-1):$/;"	m	class:QueuedExperiment
run	tools/pybrain/pybrain/rl/learners/meta/levinsearch.py	/^    def run(self, input, generator):$/;"	m	class:LevinSeach
run	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    def run(self):$/;"	m	class:RlCompBenchmark
runExp	tools/pybrain/examples/rl/environments/linear_fa/xor.py	/^def runExp(gamma=0, epsilon=0.1, xor=False, lr = 0.02):    $/;"	f
runModuleTestSuite	pybrain/tests/testsuites.py	/^def runModuleTestSuite(module):$/;"	f
runModuleTestSuite	tools/pybrain/pybrain/tests/testsuites.py	/^def runModuleTestSuite(module):$/;"	f
runNum	multirun.py	/^runNum = 20$/;"	v
runSequences	pybrain/rl/learners/valuebased/linearfa.py	/^    def runSequences(self, num_actions=1, num_features=1, num_states=1,$/;"	m	class:LearningTester
runSequences	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    def runSequences(self, num_actions=1, num_features=1, num_states=1,$/;"	m	class:LearningTester
runTraining	pybrain/tools/neuralnets.py	/^    def runTraining(self, convergence=0, **kwargs):$/;"	m	class:NNclassifier
runTraining	pybrain/tools/neuralnets.py	/^    def runTraining(self, convergence=0, **kwargs):$/;"	m	class:NNregression
runTraining	tools/pybrain/pybrain/tools/neuralnets.py	/^    def runTraining(self, convergence=0, **kwargs):$/;"	m	class:NNclassifier
runTraining	tools/pybrain/pybrain/tools/neuralnets.py	/^    def runTraining(self, convergence=0, **kwargs):$/;"	m	class:NNregression
runner	pybrain/tests/runtests.py	/^    runner = TextTestRunner()$/;"	v
runner	tools/pybrain/pybrain/tests/runtests.py	/^    runner = TextTestRunner()$/;"	v
rv_dot	pybrain/rl/learners/valuebased/linearfa.py	/^def rv_dot(x, y):$/;"	f
rv_dot	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^def rv_dot(x, y):$/;"	f
s	pybrain/rl/environments/flexcube/viewer.py	/^    s = sys.argv[1:]$/;"	v
s	pybrain/rl/environments/ode/viewer.py	/^    s = sys.argv[1:]$/;"	v	class:ODEViewer
s	pybrain/rl/environments/shipsteer/viewer.py	/^    s = sys.argv[1:]$/;"	v
s	tools/pybrain/pybrain/rl/environments/flexcube/viewer.py	/^    s = sys.argv[1:]$/;"	v
s	tools/pybrain/pybrain/rl/environments/ode/viewer.py	/^    s = sys.argv[1:]$/;"	v	class:ODEViewer
s	tools/pybrain/pybrain/rl/environments/shipsteer/viewer.py	/^    s = sys.argv[1:]$/;"	v
sDim	compare.py	/^sDim = 2$/;"	v
sDim	enac.py	/^sDim = 2$/;"	v
sDim	main.py	/^sDim = 2$/;"	v
safeExp	pybrain/tools/functions.py	/^def safeExp(x):$/;"	f
safeExp	tools/pybrain/pybrain/tools/functions.py	/^def safeExp(x):$/;"	f
sample	pybrain/tools/mixtures/mixtureofgaussian.py	/^    def sample(self, wi, dm, learning="logLiklihood", noise=0.2, plt=True):$/;"	m	class:MixtureOfGaussians
sample	tools/pybrain/pybrain/tools/mixtures/mixtureofgaussian.py	/^    def sample(self, wi, dm, learning="logLiklihood", noise=0.2, plt=True):$/;"	m	class:MixtureOfGaussians
sampleElitism	pybrain/optimization/distributionbased/fem.py	/^    sampleElitism = False$/;"	v	class:FEM
sampleElitism	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^    sampleElitism = False$/;"	v	class:FEM
sampler	pybrain/unsupervised/trainers/rbm.py	/^    def sampler(self, probabilities):$/;"	m	class:RbmBernoulliTrainer
sampler	pybrain/unsupervised/trainers/rbm.py	/^    def sampler(self, probabilities):$/;"	m	class:RbmGaussTrainer
sampler	pybrain/unsupervised/trainers/rbm.py	/^    def sampler(self, probabilities):$/;"	m	class:RbmGibbsTrainer
sampler	tools/pybrain/pybrain/unsupervised/trainers/rbm.py	/^    def sampler(self, probabilities):$/;"	m	class:RbmBernoulliTrainer
sampler	tools/pybrain/pybrain/unsupervised/trainers/rbm.py	/^    def sampler(self, probabilities):$/;"	m	class:RbmGaussTrainer
sampler	tools/pybrain/pybrain/unsupervised/trainers/rbm.py	/^    def sampler(self, probabilities):$/;"	m	class:RbmGibbsTrainer
samples	pybrain/rl/environments/episodic.py	/^    samples = 0$/;"	v	class:EpisodicTask
samples	tools/pybrain/pybrain/rl/environments/episodic.py	/^    samples = 0$/;"	v	class:EpisodicTask
save	pybrain/supervised/trainers/svmtrainer.py	/^    def save(self, filename):$/;"	m	class:SVMTrainer
save	pybrain/tools/customxml/handling.py	/^    def save(self):$/;"	m	class:XMLHandling
save	pybrain/tools/datasettools.py	/^    def save(self, fname):$/;"	m	class:DataSetNormalizer
save	pybrain/tools/plotting/colormaps.py	/^    def save(self, filename):$/;"	m	class:ColorMap
save	tools/pybrain/pybrain/supervised/trainers/svmtrainer.py	/^    def save(self, filename):$/;"	m	class:SVMTrainer
save	tools/pybrain/pybrain/tools/customxml/handling.py	/^    def save(self):$/;"	m	class:XMLHandling
save	tools/pybrain/pybrain/tools/datasettools.py	/^    def save(self, fname):$/;"	m	class:DataSetNormalizer
save	tools/pybrain/pybrain/tools/plotting/colormaps.py	/^    def save(self, filename):$/;"	m	class:ColorMap
saveAs	pybrain/tools/plotting/fitnesslandscapes.py	/^    def saveAs(self, filename, format='.jpg'):$/;"	m	class:FitnessPlotter
saveAs	tools/pybrain/pybrain/tools/plotting/fitnesslandscapes.py	/^    def saveAs(self, filename, format='.jpg'):$/;"	m	class:FitnessPlotter
saveData	pybrain/tools/plotting/multiline.py	/^    def saveData(self, filename):$/;"	m	class:MultilinePlotter
saveData	tools/pybrain/pybrain/tools/plotting/multiline.py	/^    def saveData(self, filename):$/;"	m	class:MultilinePlotter
saveInvariant	pybrain/tests/unittests/datasets/test_datasets_datasets.py	/^def saveInvariant(dataset):$/;"	f
saveInvariant	tools/pybrain/pybrain/tests/unittests/datasets/test_datasets_datasets.py	/^def saveInvariant(dataset):$/;"	f
saveModel	pybrain/structure/modules/svmunit.py	/^    def saveModel(self, filename):$/;"	m	class:SVMUnit
saveModel	tools/pybrain/pybrain/structure/modules/svmunit.py	/^    def saveModel(self, filename):$/;"	m	class:SVMUnit
saveName	pybrain/tools/example_tools.py	/^    saveName = "none.wgt"$/;"	v	class:ExTools
saveName	tools/pybrain/pybrain/tools/example_tools.py	/^    saveName = "none.wgt"$/;"	v	class:ExTools
saveNetwork	pybrain/tools/neuralnets.py	/^    def saveNetwork(self, fname):$/;"	m	class:NNtools
saveNetwork	tools/pybrain/pybrain/tools/neuralnets.py	/^    def saveNetwork(self, fname):$/;"	m	class:NNtools
saveResults	pybrain/tools/example_tools.py	/^    def saveResults(self, filename, results):$/;"	m	class:ExTools
saveResults	tools/pybrain/pybrain/tools/example_tools.py	/^    def saveResults(self, filename, results):$/;"	m	class:ExTools
saveStats	pybrain/tools/rlgluebridge.py	/^    def saveStats(self, name, dataset):$/;"	m	class:RlCompBenchmark
saveStats	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    def saveStats(self, name, dataset):$/;"	m	class:RlCompBenchmark
saveTo	pybrain/rl/environments/flexcube/viewer.py	/^    def saveTo(self, filename, format="JPEG"):$/;"	m	class:FlexCubeRenderer
saveTo	pybrain/rl/environments/shipsteer/viewer.py	/^    def saveTo(self, filename, format="JPEG"):$/;"	m	class:FlexCubeRenderer
saveTo	tools/pybrain/pybrain/rl/environments/flexcube/viewer.py	/^    def saveTo(self, filename, format="JPEG"):$/;"	m	class:FlexCubeRenderer
saveTo	tools/pybrain/pybrain/rl/environments/shipsteer/viewer.py	/^    def saveTo(self, filename, format="JPEG"):$/;"	m	class:FlexCubeRenderer
saveToFile	pybrain/utilities.py	/^    def saveToFile(self, filename, format=None, **kwargs):$/;"	m	class:Serializable
saveToFile	tools/pybrain/pybrain/utilities.py	/^    def saveToFile(self, filename, format=None, **kwargs):$/;"	m	class:Serializable
saveToFileLike	pybrain/utilities.py	/^    def saveToFileLike(self, flo, format=None, **kwargs):$/;"	m	class:Serializable
saveToFileLike	tools/pybrain/pybrain/utilities.py	/^    def saveToFileLike(self, flo, format=None, **kwargs):$/;"	m	class:Serializable
saveTrainingCurve	pybrain/tools/neuralnets.py	/^    def saveTrainingCurve(self, learnfname):$/;"	m	class:NNtools
saveTrainingCurve	tools/pybrain/pybrain/tools/neuralnets.py	/^    def saveTrainingCurve(self, learnfname):$/;"	m	class:NNtools
saveWeights	pybrain/tools/example_tools.py	/^    def saveWeights(self, filename, w):$/;"	m	class:ExTools
saveWeights	tools/pybrain/pybrain/tools/example_tools.py	/^    def saveWeights(self, filename, w):$/;"	m	class:ExTools
save_netcdf	pybrain/datasets/classification.py	/^    def save_netcdf(self, flo, **kwargs):$/;"	m	class:SequenceClassificationDataSet
save_netcdf	tools/pybrain/pybrain/datasets/classification.py	/^    def save_netcdf(self, flo, **kwargs):$/;"	m	class:SequenceClassificationDataSet
save_pickle	pybrain/datasets/dataset.py	/^    def save_pickle(self, flo, protocol=0, compact=False):$/;"	m	class:DataSet
save_pickle	pybrain/utilities.py	/^    def save_pickle(self, flo, protocol=0):$/;"	m	class:Serializable
save_pickle	tools/pybrain/pybrain/datasets/dataset.py	/^    def save_pickle(self, flo, protocol=0, compact=False):$/;"	m	class:DataSet
save_pickle	tools/pybrain/pybrain/utilities.py	/^    def save_pickle(self, flo, protocol=0):$/;"	m	class:Serializable
scale	pybrain/rl/environments/ode/tools/xmltools.py	/^    def scale(self, sc, scaleset=set([]), exclude=set([])):$/;"	m	class:XMLstruct
scale	task/RobotMotionTask.py	/^    def scale(x):$/;"	m	class:RobotMotionTask
scale	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^scale    = 0.5 * metascale$/;"	v
scale	tools/pybrain/pybrain/rl/environments/ode/tools/xmltools.py	/^    def scale(self, sc, scaleset=set([]), exclude=set([])):$/;"	m	class:XMLstruct
scaleLearningRate	pybrain/optimization/distributionbased/rank1.py	/^    scaleLearningRate = None$/;"	v	class:Rank1NES
scaleLearningRate	pybrain/optimization/distributionbased/xnes.py	/^    scaleLearningRate = None$/;"	v	class:XNES
scaleLearningRate	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^    scaleLearningRate = None$/;"	v	class:Rank1NES
scaleLearningRate	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    scaleLearningRate = None$/;"	v	class:XNES
scaleModel	pybrain/rl/environments/ode/tools/xodetools.py	/^    def scaleModel(self, sc):$/;"	m	class:XODEfile
scaleModel	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def scaleModel(self, sc):$/;"	m	class:XODEfile
scf	pybrain/rl/environments/functions/transformations.py	/^            def scf(x):$/;"	f	function:SoftConstrainedFunction.__init__
scf	tools/pybrain/pybrain/rl/environments/functions/transformations.py	/^            def scf(x):$/;"	f	function:SoftConstrainedFunction.__init__
search	pybrain/supervised/trainers/svmtrainer.py	/^    def search(self):$/;"	m	class:GridSearch
search	pybrain/supervised/trainers/svmtrainer.py	/^    def search(self, cmin=None, cmax=None):$/;"	m	class:GridSearchDOE
search	pybrain/tools/gridsearch.py	/^    def search(self):$/;"	m	class:GridSearch2D
search	pybrain/tools/gridsearch.py	/^    def search(self):$/;"	m	class:GridSearchDOE
search	tools/pybrain/pybrain/supervised/trainers/svmtrainer.py	/^    def search(self):$/;"	m	class:GridSearch
search	tools/pybrain/pybrain/supervised/trainers/svmtrainer.py	/^    def search(self, cmin=None, cmax=None):$/;"	m	class:GridSearchDOE
search	tools/pybrain/pybrain/tools/gridsearch.py	/^    def search(self):$/;"	m	class:GridSearch2D
search	tools/pybrain/pybrain/tools/gridsearch.py	/^    def search(self):$/;"	m	class:GridSearchDOE
searchterms	tools/pybrain/docs/html/_static/searchtools.js	/^    var searchterms = [];$/;"	v
sec_learningRate	pybrain/rl/learners/valuebased/linearfa.py	/^    sec_learningRate = 1.$/;"	v	class:GQLambda
sec_learningRate	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    sec_learningRate = 1.$/;"	v	class:GQLambda
secondCarScore	pybrain/rl/environments/simplerace/simpleracetcp.py	/^    secondCarScore = 0$/;"	v	class:SimpleraceEnvironment
secondCarScore	tools/pybrain/pybrain/rl/environments/simplerace/simpleracetcp.py	/^    secondCarScore = 0$/;"	v	class:SimpleraceEnvironment
select	pybrain/optimization/populationbased/ga.py	/^    def select(self):$/;"	m	class:GA
select	pybrain/optimization/populationbased/multiobjective/nsga2.py	/^    def select(self):$/;"	m	class:MultiObjectiveGA
select	tools/pybrain/pybrain/optimization/populationbased/ga.py	/^    def select(self):$/;"	m	class:GA
select	tools/pybrain/pybrain/optimization/populationbased/multiobjective/nsga2.py	/^    def select(self):$/;"	m	class:MultiObjectiveGA
selectSome	pybrain/tools/filehandling.py	/^def selectSome(strings, requiredsubstrings=[], requireAll=True):$/;"	f
selectSome	tools/pybrain/pybrain/tools/filehandling.py	/^def selectSome(strings, requiredsubstrings=[], requireAll=True):$/;"	f
selectionProportion	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    selectionProportion = 0.5$/;"	v	class:Coevolution
selectionProportion	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    selectionProportion = 0.5$/;"	v	class:Coevolution
selectionSize	pybrain/optimization/populationbased/ga.py	/^    def selectionSize(self):$/;"	m	class:GA
selectionSize	tools/pybrain/pybrain/optimization/populationbased/ga.py	/^    def selectionSize(self):$/;"	m	class:GA
semilinear	pybrain/tools/functions.py	/^def semilinear(x):$/;"	f
semilinear	tools/pybrain/pybrain/tools/functions.py	/^def semilinear(x):$/;"	f
semilinearPrime	pybrain/tools/functions.py	/^def semilinearPrime(x):$/;"	f
semilinearPrime	tools/pybrain/pybrain/tools/functions.py	/^def semilinearPrime(x):$/;"	f
senRange	examples/problem_settings.py	/^senRange = 2$/;"	v
senRange	settings.py	/^senRange = 2$/;"	v
send	pybrain/tools/networking/udpconnection.py	/^    def send(self, arrayList):$/;"	m	class:UDPServer
send	tools/pybrain/pybrain/tools/networking/udpconnection.py	/^    def send(self, arrayList):$/;"	m	class:UDPServer
separatorIdx	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^separatorIdx = int(len(trnSequence)*wtRatio)$/;"	v
separatorIdx	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^separatorIdx = int(len(tstSequence)*wtRatio)$/;"	v
seqlen	pybrain/structure/networks/bidirectional.py	/^    seqlen = None$/;"	v	class:BidirectionalNetwork
seqlen	tools/pybrain/pybrain/structure/networks/bidirectional.py	/^    seqlen = None$/;"	v	class:BidirectionalNetwork
sequential	pybrain/structure/modules/lstm.py	/^    sequential = True$/;"	v	class:LSTMLayer
sequential	pybrain/structure/modules/module.py	/^    sequential = False$/;"	v	class:Module
sequential	pybrain/structure/networks/recurrent.py	/^    sequential = True$/;"	v	class:RecurrentNetworkComponent
sequential	tools/pybrain/pybrain/structure/modules/lstm.py	/^    sequential = True$/;"	v	class:LSTMLayer
sequential	tools/pybrain/pybrain/structure/modules/module.py	/^    sequential = False$/;"	v	class:Module
sequential	tools/pybrain/pybrain/structure/networks/recurrent.py	/^    sequential = True$/;"	v	class:RecurrentNetworkComponent
set	pybrain/rl/environments/flexcube/masspoint.py	/^    def set(self, i, val):$/;"	m	class:MArray
set	pybrain/tools/neuralnets.py	/^    def set(self, **kwargs):$/;"	m	class:NNtools
set	tools/pybrain/pybrain/rl/environments/flexcube/masspoint.py	/^    def set(self, i, val):$/;"	m	class:MArray
set	tools/pybrain/pybrain/tools/neuralnets.py	/^    def set(self, **kwargs):$/;"	m	class:NNtools
setAllArgs	pybrain/utilities.py	/^def setAllArgs(obj, argdict):$/;"	f
setAllArgs	tools/pybrain/pybrain/utilities.py	/^def setAllArgs(obj, argdict):$/;"	f
setArgs	pybrain/supervised/evolino/population.py	/^    def setArgs(self, **kwargs):$/;"	m	class:EvolinoSubPopulation
setArgs	pybrain/tools/gridsearch.py	/^    def setArgs(self, **kwargs):$/;"	m	class:GridSearch2D
setArgs	pybrain/tools/gridsearch.py	/^    def setArgs(self, **kwargs):$/;"	m	class:GridSearchCostGamma
setArgs	pybrain/tools/gridsearch.py	/^    def setArgs(self, **kwargs):$/;"	m	class:GridSearchDOE
setArgs	pybrain/tools/gridsearch.py	/^    def setArgs(self, **kwargs):$/;"	m	class:GridSearchDOECostGamma
setArgs	pybrain/tools/validation.py	/^    def setArgs(self, **kwargs):$/;"	m	class:CrossValidator
setArgs	pybrain/utilities.py	/^    def setArgs(self, **argdict):$/;"	m	class:XMLBuildable
setArgs	tools/pybrain/pybrain/supervised/evolino/population.py	/^    def setArgs(self, **kwargs):$/;"	m	class:EvolinoSubPopulation
setArgs	tools/pybrain/pybrain/tools/gridsearch.py	/^    def setArgs(self, **kwargs):$/;"	m	class:GridSearch2D
setArgs	tools/pybrain/pybrain/tools/gridsearch.py	/^    def setArgs(self, **kwargs):$/;"	m	class:GridSearchCostGamma
setArgs	tools/pybrain/pybrain/tools/gridsearch.py	/^    def setArgs(self, **kwargs):$/;"	m	class:GridSearchDOE
setArgs	tools/pybrain/pybrain/tools/gridsearch.py	/^    def setArgs(self, **kwargs):$/;"	m	class:GridSearchDOECostGamma
setArgs	tools/pybrain/pybrain/tools/validation.py	/^    def setArgs(self, **kwargs):$/;"	m	class:CrossValidator
setArgs	tools/pybrain/pybrain/utilities.py	/^    def setArgs(self, **argdict):$/;"	m	class:XMLBuildable
setCaptureScreen	pybrain/rl/environments/ode/viewer.py	/^    def setCaptureScreen(self, capture):$/;"	m	class:ODEViewer
setCaptureScreen	tools/pybrain/pybrain/rl/environments/ode/viewer.py	/^    def setCaptureScreen(self, capture):$/;"	m	class:ODEViewer
setCenterObj	pybrain/rl/environments/ode/viewer.py	/^    def setCenterObj(self, obj):$/;"	m	class:ODEViewer
setCenterObj	tools/pybrain/pybrain/rl/environments/ode/viewer.py	/^    def setCenterObj(self, obj):$/;"	m	class:ODEViewer
setCurrent	pybrain/rl/environments/ode/tools/xmltools.py	/^    def setCurrent(self, tag):$/;"	m	class:XMLstruct
setCurrent	tools/pybrain/pybrain/rl/environments/ode/tools/xmltools.py	/^    def setCurrent(self, tag):$/;"	m	class:XMLstruct
setData	pybrain/supervised/trainers/trainer.py	/^    def setData(self, dataset):$/;"	m	class:Trainer
setData	pybrain/tools/plotting/multiline.py	/^    def setData(self, id0, x, y):$/;"	m	class:MultilinePlotter
setData	tools/pybrain/pybrain/supervised/trainers/trainer.py	/^    def setData(self, dataset):$/;"	m	class:Trainer
setData	tools/pybrain/pybrain/tools/plotting/multiline.py	/^    def setData(self, id0, x, y):$/;"	m	class:MultilinePlotter
setDataset	pybrain/supervised/trainers/evolino.py	/^    def setDataset(self, dataset):$/;"	m	class:EvolinoTrainer
setDataset	tools/pybrain/pybrain/supervised/trainers/evolino.py	/^    def setDataset(self, dataset):$/;"	m	class:EvolinoTrainer
setDecomposition	pybrain/structure/networks/neurondecomposable.py	/^    def setDecomposition(self, decomposedParams):$/;"	m	class:NeuronDecomposableNetwork
setDecomposition	tools/pybrain/pybrain/structure/networks/neurondecomposable.py	/^    def setDecomposition(self, decomposedParams):$/;"	m	class:NeuronDecomposableNetwork
setEdges	pybrain/rl/environments/flexcube/environment.py	/^    def setEdges(self):$/;"	m	class:FlexCubeEnvironment
setEdges	tools/pybrain/pybrain/rl/environments/flexcube/environment.py	/^    def setEdges(self):$/;"	m	class:FlexCubeEnvironment
setEvaluator	pybrain/optimization/optimizer.py	/^    def setEvaluator(self, evaluator, initEvaluable = None):$/;"	m	class:BlackBoxOptimizer
setEvaluator	tools/pybrain/pybrain/optimization/optimizer.py	/^    def setEvaluator(self, evaluator, initEvaluable = None):$/;"	m	class:BlackBoxOptimizer
setField	pybrain/datasets/dataset.py	/^    def setField(self, label, arr):$/;"	m	class:DataSet
setField	pybrain/datasets/supervised.py	/^    def setField(self, label, arr, **kwargs):$/;"	m	class:SupervisedDataSet
setField	tools/pybrain/pybrain/datasets/dataset.py	/^    def setField(self, label, arr):$/;"	m	class:DataSet
setField	tools/pybrain/pybrain/datasets/supervised.py	/^    def setField(self, label, arr, **kwargs):$/;"	m	class:SupervisedDataSet
setFrameRate	pybrain/rl/environments/ode/viewer.py	/^    def setFrameRate(self, fps):$/;"	m	class:ODEViewer
setFrameRate	tools/pybrain/pybrain/rl/environments/ode/viewer.py	/^    def setFrameRate(self, fps):$/;"	m	class:ODEViewer
setFunction	pybrain/rl/environments/simple/renderer.py	/^    def setFunction(self, f, rmin, rmax):$/;"	m	class:SimpleRenderer
setFunction	tools/pybrain/pybrain/rl/environments/simple/renderer.py	/^    def setFunction(self, f, rmin, rmax):$/;"	m	class:SimpleRenderer
setGenome	pybrain/structure/modules/evolinonetwork.py	/^    def setGenome(self, weights):$/;"	m	class:EvolinoNetwork
setGenome	pybrain/supervised/evolino/individual.py	/^    def setGenome(self, genome):$/;"	m	class:EvolinoSubIndividual
setGenome	pybrain/supervised/evolino/networkwrapper.py	/^    def setGenome(self, weights):$/;"	m	class:EvolinoNetwork
setGenome	pybrain/supervised/evolino/networkwrapper.py	/^    def setGenome(self, weights):$/;"	m	class:NetworkWrapper
setGenome	tools/pybrain/pybrain/structure/modules/evolinonetwork.py	/^    def setGenome(self, weights):$/;"	m	class:EvolinoNetwork
setGenome	tools/pybrain/pybrain/supervised/evolino/individual.py	/^    def setGenome(self, genome):$/;"	m	class:EvolinoSubIndividual
setGenome	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def setGenome(self, weights):$/;"	m	class:EvolinoNetwork
setGenome	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def setGenome(self, weights):$/;"	m	class:NetworkWrapper
setGravity	pybrain/rl/environments/ode/environment.py	/^    def setGravity(self, g):$/;"	m	class:ODEEnvironment
setGravity	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def setGravity(self, g):$/;"	m	class:ODEEnvironment
setIndividualFitness	pybrain/supervised/evolino/gpopulation.py	/^    def setIndividualFitness(self, individual, fitness):$/;"	m	class:Population
setIndividualFitness	pybrain/supervised/evolino/gpopulation.py	/^    def setIndividualFitness(self, individual, fitness):$/;"	m	class:SimplePopulation
setIndividualFitness	pybrain/supervised/evolino/population.py	/^    def setIndividualFitness(self, individual, fitness):$/;"	m	class:EvolinoPopulation
setIndividualFitness	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^    def setIndividualFitness(self, individual, fitness):$/;"	m	class:Population
setIndividualFitness	tools/pybrain/pybrain/supervised/evolino/gpopulation.py	/^    def setIndividualFitness(self, individual, fitness):$/;"	m	class:SimplePopulation
setIndividualFitness	tools/pybrain/pybrain/supervised/evolino/population.py	/^    def setIndividualFitness(self, individual, fitness):$/;"	m	class:EvolinoPopulation
setLabels	pybrain/tools/plotting/multiline.py	/^    def setLabels(self, x='', y='', title=''):$/;"	m	class:MultilinePlotter
setLabels	tools/pybrain/pybrain/tools/plotting/multiline.py	/^    def setLabels(self, x='', y='', title=''):$/;"	m	class:MultilinePlotter
setLegend	pybrain/tools/plotting/multiline.py	/^    def setLegend(self, *args, **kwargs):$/;"	m	class:MultilinePlotter
setLegend	tools/pybrain/pybrain/tools/plotting/multiline.py	/^    def setLegend(self, *args, **kwargs):$/;"	m	class:MultilinePlotter
setLineStyle	pybrain/tools/plotting/multiline.py	/^    def setLineStyle(self, id=None, **kwargs):$/;"	m	class:MultilinePlotter
setLineStyle	tools/pybrain/pybrain/tools/plotting/multiline.py	/^    def setLineStyle(self, id=None, **kwargs):$/;"	m	class:MultilinePlotter
setMaxLength	pybrain/rl/environments/cartpole/balancetask.py	/^    def setMaxLength(self, n):$/;"	m	class:BalanceTask
setMaxLength	pybrain/rl/environments/shipsteer/northwardtask.py	/^    def setMaxLength(self, n):$/;"	m	class:GoNorthwardTask
setMaxLength	pybrain/rl/environments/simplerace/simpleracetask.py	/^    def setMaxLength(self, n):$/;"	m	class:SimpleraceTask
setMaxLength	tools/pybrain/pybrain/rl/environments/cartpole/balancetask.py	/^    def setMaxLength(self, n):$/;"	m	class:BalanceTask
setMaxLength	tools/pybrain/pybrain/rl/environments/shipsteer/northwardtask.py	/^    def setMaxLength(self, n):$/;"	m	class:GoNorthwardTask
setMaxLength	tools/pybrain/pybrain/rl/environments/simplerace/simpleracetask.py	/^    def setMaxLength(self, n):$/;"	m	class:SimpleraceTask
setModel	pybrain/structure/modules/svmunit.py	/^    def setModel(self, model):$/;"	m	class:SVMUnit
setModel	tools/pybrain/pybrain/structure/modules/svmunit.py	/^    def setModel(self, model):$/;"	m	class:SVMUnit
setName	pybrain/utilities.py	/^    def setName(self, newname):$/;"	m	class:Named
setName	tools/pybrain/pybrain/utilities.py	/^    def setName(self, newname):$/;"	m	class:Named
setNoise	pybrain/rl/environments/simple/environment.py	/^    def setNoise(self, variance):$/;"	m	class:SimpleEnvironment
setNoise	tools/pybrain/pybrain/rl/environments/simple/environment.py	/^    def setNoise(self, variance):$/;"	m	class:SimpleEnvironment
setNumValues	pybrain/rl/environments/ode/actuators.py	/^    def setNumValues(self, numValues):$/;"	m	class:Actuator
setNumValues	pybrain/rl/environments/ode/sensors.py	/^    def setNumValues(self, numValues):$/;"	m	class:Sensor
setNumValues	tools/pybrain/pybrain/rl/environments/ode/actuators.py	/^    def setNumValues(self, numValues):$/;"	m	class:Actuator
setNumValues	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def setNumValues(self, numValues):$/;"	m	class:Sensor
setOffset	pybrain/tools/plotting/multiline.py	/^    def setOffset(self, offs):$/;"	m	class:MultilinePlotter
setOffset	tools/pybrain/pybrain/tools/plotting/multiline.py	/^    def setOffset(self, offs):$/;"	m	class:MultilinePlotter
setOutputWeightMatrix	pybrain/structure/modules/evolinonetwork.py	/^    def setOutputWeightMatrix(self, W):$/;"	m	class:EvolinoNetwork
setOutputWeightMatrix	pybrain/supervised/evolino/networkwrapper.py	/^    def setOutputWeightMatrix(self, W):$/;"	m	class:EvolinoNetwork
setOutputWeightMatrix	pybrain/supervised/evolino/networkwrapper.py	/^    def setOutputWeightMatrix(self, W):$/;"	m	class:NetworkWrapper
setOutputWeightMatrix	tools/pybrain/pybrain/structure/modules/evolinonetwork.py	/^    def setOutputWeightMatrix(self, W):$/;"	m	class:EvolinoNetwork
setOutputWeightMatrix	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def setOutputWeightMatrix(self, W):$/;"	m	class:EvolinoNetwork
setOutputWeightMatrix	tools/pybrain/pybrain/supervised/evolino/networkwrapper.py	/^    def setOutputWeightMatrix(self, W):$/;"	m	class:NetworkWrapper
setParameter	pybrain/tools/rankingfunctions.py	/^    def setParameter(self, p):$/;"	m	class:TopLinearRanking
setParameter	tools/pybrain/pybrain/tools/rankingfunctions.py	/^    def setParameter(self, p):$/;"	m	class:TopLinearRanking
setParams	pybrain/supervised/trainers/svmtrainer.py	/^    def setParams(self, **kwargs):$/;"	m	class:GridSearch
setParams	pybrain/supervised/trainers/svmtrainer.py	/^    def setParams(self, **kwargs):$/;"	m	class:SVMTrainer
setParams	tools/pybrain/pybrain/supervised/trainers/svmtrainer.py	/^    def setParams(self, **kwargs):$/;"	m	class:GridSearch
setParams	tools/pybrain/pybrain/supervised/trainers/svmtrainer.py	/^    def setParams(self, **kwargs):$/;"	m	class:SVMTrainer
setPos	pybrain/rl/environments/flexcube/masspoint.py	/^    def setPos(self, pos):$/;"	m	class:MassPoint
setPos	tools/pybrain/pybrain/rl/environments/flexcube/masspoint.py	/^    def setPos(self, pos):$/;"	m	class:MassPoint
setReachProbCal	learners/TDLearner.py	/^    def setReachProbCal(self, reachProbCal):$/;"	m	class:TDLearner
setRenderInterface	pybrain/rl/environments/serverinterface.py	/^    def setRenderInterface(self, renderer):$/;"	m	class:GraphicalEnvironment
setRenderInterface	tools/pybrain/pybrain/rl/environments/serverinterface.py	/^    def setRenderInterface(self, renderer):$/;"	m	class:GraphicalEnvironment
setRenderer	pybrain/rl/environments/graphical.py	/^    def setRenderer(self, renderer):$/;"	m	class:GraphicalEnvironment
setRenderer	tools/pybrain/pybrain/rl/environments/graphical.py	/^    def setRenderer(self, renderer):$/;"	m	class:GraphicalEnvironment
setScaling	pybrain/rl/environments/task.py	/^    def setScaling(self, sensor_limits, actor_limits):$/;"	m	class:Task
setScaling	tools/pybrain/pybrain/rl/environments/task.py	/^    def setScaling(self, sensor_limits, actor_limits):$/;"	m	class:Task
setSigma	pybrain/structure/modules/gaussianlayer.py	/^    def setSigma(self, sigma):$/;"	m	class:GaussianLayer
setSigma	tools/pybrain/pybrain/structure/modules/gaussianlayer.py	/^    def setSigma(self, sigma):$/;"	m	class:GaussianLayer
setState	pybrain/structure/modules/statedependentlayer.py	/^    def setState(self, state):$/;"	m	class:StateDependentLayer
setState	tools/pybrain/pybrain/structure/modules/statedependentlayer.py	/^    def setState(self, state):$/;"	m	class:StateDependentLayer
setUp	learners/LSTDACLearner.py	/^    def setUp(self):$/;"	m	class:LSTDACLearnerTestCase
setUp	policy/BoltzmanAC.py	/^    def setUp(self):$/;"	m	class:BoltzmanPolicyTestCase
setUp	task/RobotMotionTask.py	/^    def setUp(self):$/;"	m	class:RobotMotionTaskTestCase
setUpLogging	pybrain/tests/runtests.py	/^def setUpLogging():$/;"	f
setUpLogging	tools/pybrain/pybrain/tests/runtests.py	/^def setUpLogging():$/;"	f
setValues	pybrain/rl/environments/ode/sensors.py	/^    def setValues(self, values):$/;"	m	class:Sensor
setValues	tools/pybrain/pybrain/rl/environments/ode/sensors.py	/^    def setValues(self, values):$/;"	m	class:Sensor
setVectorFormat	pybrain/datasets/dataset.py	/^    def setVectorFormat(self, vf):$/;"	m	class:DataSet
setVectorFormat	tools/pybrain/pybrain/datasets/dataset.py	/^    def setVectorFormat(self, vf):$/;"	m	class:DataSet
setVel	pybrain/rl/environments/flexcube/masspoint.py	/^    def setVel(self, vel):$/;"	m	class:MassPoint
setVel	tools/pybrain/pybrain/rl/environments/flexcube/masspoint.py	/^    def setVel(self, vel):$/;"	m	class:MassPoint
set_theta	policy/BoltzmanAC.py	/^    def set_theta(self, val): self._setParameters(val)$/;"	m	class:BoltzmanPolicy
setupNN	pybrain/tools/neuralnets.py	/^    def setupNN(self, trainer=RPropMinusTrainer, hidden=None, **trnargs):$/;"	m	class:NNclassifier
setupNN	pybrain/tools/neuralnets.py	/^    def setupNN(self, trainer=RPropMinusTrainer, hidden=None, **trnargs):$/;"	m	class:NNregression
setupNN	tools/pybrain/pybrain/tools/neuralnets.py	/^    def setupNN(self, trainer=RPropMinusTrainer, hidden=None, **trnargs):$/;"	m	class:NNclassifier
setupNN	tools/pybrain/pybrain/tools/neuralnets.py	/^    def setupNN(self, trainer=RPropMinusTrainer, hidden=None, **trnargs):$/;"	m	class:NNregression
setupRNN	pybrain/tools/neuralnets.py	/^    def setupRNN(self, trainer=BackpropTrainer, hidden=None, **trnargs):$/;"	m	class:NNclassifier
setupRNN	tools/pybrain/pybrain/tools/neuralnets.py	/^    def setupRNN(self, trainer=BackpropTrainer, hidden=None, **trnargs):$/;"	m	class:NNclassifier
sf	pybrain/tests/optimizationtest.py	/^sf = lambda x:-sum((x + 1) ** 2)$/;"	v
sf	tools/pybrain/pybrain/tests/optimizationtest.py	/^sf = lambda x:-sum((x + 1) ** 2)$/;"	v
shapingFunction	pybrain/optimization/distributionbased/fem.py	/^    shapingFunction = TopLinearRanking(topFraction=0.5)$/;"	v	class:FEM
shapingFunction	pybrain/optimization/distributionbased/rank1.py	/^    shapingFunction = HansenRanking()$/;"	v	class:Rank1NES
shapingFunction	pybrain/optimization/distributionbased/snes.py	/^    shapingFunction = HansenRanking()$/;"	v	class:SNES
shapingFunction	pybrain/optimization/distributionbased/ves.py	/^    shapingFunction = TopLinearRanking(topFraction=0.5)$/;"	v	class:VanillaGradientEvolutionStrategies
shapingFunction	pybrain/optimization/distributionbased/xnes.py	/^    shapingFunction = HansenRanking()$/;"	v	class:XNES
shapingFunction	pybrain/rl/learners/directsearch/rwr.py	/^    def shapingFunction(self, R):$/;"	m	class:RWR
shapingFunction	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^    shapingFunction = TopLinearRanking(topFraction=0.5)$/;"	v	class:FEM
shapingFunction	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^    shapingFunction = HansenRanking()$/;"	v	class:Rank1NES
shapingFunction	tools/pybrain/pybrain/optimization/distributionbased/snes.py	/^    shapingFunction = HansenRanking()$/;"	v	class:SNES
shapingFunction	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    shapingFunction = TopLinearRanking(topFraction=0.5)$/;"	v	class:VanillaGradientEvolutionStrategies
shapingFunction	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    shapingFunction = HansenRanking()$/;"	v	class:XNES
shapingFunction	tools/pybrain/pybrain/rl/learners/directsearch/rwr.py	/^    def shapingFunction(self, R):$/;"	m	class:RWR
shift	pybrain/structure/modules/module.py	/^    def shift(self, items):$/;"	m	class:Module
shift	tools/pybrain/pybrain/structure/modules/module.py	/^    def shift(self, items):$/;"	m	class:Module
ship	pybrain/rl/environments/shipsteer/viewer.py	/^    def ship(self):$/;"	m	class:FlexCubeRenderer
ship	tools/pybrain/pybrain/rl/environments/shipsteer/viewer.py	/^    def ship(self):$/;"	m	class:FlexCubeRenderer
show	pybrain/tools/plotting/colormaps.py	/^    def show(self):$/;"	m	class:ColorMap
show	pybrain/tools/plotting/multiline.py	/^    def show(self, xLabel='', yLabel='', title='', popup=False, imgfile=None):$/;"	m	class:MultilinePlotter
show	tools/pybrain/pybrain/tools/plotting/colormaps.py	/^    def show(self):$/;"	m	class:ColorMap
show	tools/pybrain/pybrain/tools/plotting/multiline.py	/^    def show(self, xLabel='', yLabel='', title='', popup=False, imgfile=None):$/;"	m	class:MultilinePlotter
showExps	pybrain/tools/example_tools.py	/^    def showExps(self):$/;"	m	class:ExTools
showExps	tools/pybrain/pybrain/tools/example_tools.py	/^    def showExps(self):$/;"	m	class:ExTools
showInterval	examples/problem_settings.py	/^showInterval = 1000 # interval between two consequent show of theta value$/;"	v
showInterval	settings.py	/^showInterval = 1000 # interval between two consequent show of theta value$/;"	v
sigma	pybrain/rl/explorers/continuous/normal.py	/^    sigma = property(_getSigma, _setSigma)$/;"	v	class:NormalExplorer
sigma	pybrain/rl/explorers/continuous/sde.py	/^    sigma = property(_getSigma, _setSigma)$/;"	v	class:StateDependentExplorer
sigma	tools/pybrain/pybrain/rl/explorers/continuous/normal.py	/^    sigma = property(_getSigma, _setSigma)$/;"	v	class:NormalExplorer
sigma	tools/pybrain/pybrain/rl/explorers/continuous/sde.py	/^    sigma = property(_getSigma, _setSigma)$/;"	v	class:StateDependentExplorer
sigmaLearningRate	pybrain/optimization/finitedifference/pgpe.py	/^    sigmaLearningRate = 0.1$/;"	v	class:PGPE
sigmaLearningRate	tools/pybrain/examples/rl/environments/ode/acrobot_pgpe.py	/^                                    sigmaLearningRate = 0.025,$/;"	v
sigmaLearningRate	tools/pybrain/examples/rl/environments/shipsteer/shipbench_pgpe.py	/^                                    sigmaLearningRate = 0.15,$/;"	v
sigmaLearningRate	tools/pybrain/pybrain/optimization/finitedifference/pgpe.py	/^    sigmaLearningRate = 0.1$/;"	v	class:PGPE
sigmo	pybrain/tools/mixtures/mixtureofgaussian.py	/^    def sigmo(self, a):$/;"	m	class:MixtureOfGaussians
sigmo	pybrain/tools/mixtures/mogpuremax.py	/^    def sigmo(self, a):$/;"	m	class:MixtureOfGaussians
sigmo	tools/pybrain/pybrain/tools/mixtures/mixtureofgaussian.py	/^    def sigmo(self, a):$/;"	m	class:MixtureOfGaussians
sigmo	tools/pybrain/pybrain/tools/mixtures/mogpuremax.py	/^    def sigmo(self, a):$/;"	m	class:MixtureOfGaussians
sigmoid	pybrain/tools/functions.py	/^def sigmoid(x):$/;"	f
sigmoid	tools/pybrain/pybrain/tools/functions.py	/^def sigmoid(x):$/;"	f
sigmoidPrime	pybrain/tools/functions.py	/^def sigmoidPrime(x):$/;"	f
sigmoidPrime	tools/pybrain/pybrain/tools/functions.py	/^def sigmoidPrime(x):$/;"	f
simpleMultivariateNormalPdf	pybrain/tools/functions.py	/^def simpleMultivariateNormalPdf(z, detFactorSigma):$/;"	f
simpleMultivariateNormalPdf	tools/pybrain/pybrain/tools/functions.py	/^def simpleMultivariateNormalPdf(z, detFactorSigma):$/;"	f
simpleborders	pybrain/structure/networks/borderswiping.py	/^    simpleborders = False$/;"	v	class:BorderSwipingNetwork
simpleborders	tools/pybrain/pybrain/structure/networks/borderswiping.py	/^    simpleborders = False$/;"	v	class:BorderSwipingNetwork
simplenet	tools/pybrain/examples/rl/environments/capturegame/evolvingplayer.py	/^simplenet = False$/;"	v
sinefreqs	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^sinefreqs = ( 0.2, 0.311, 0.42, 0.51, 0.74 )$/;"	v
six_degrees	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	43;"	d	file:
six_degrees	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	43;"	d	file:
size	pybrain/optimization/populationbased/pso.py	/^    size = 20$/;"	v	class:ParticleSwarmOptimizer
size	pybrain/structure/networks/custom/capturegame.py	/^    size = 5$/;"	v	class:CaptureGameNetwork
size	tools/pybrain/examples/rl/environments/capturegame/evolvingplayer.py	/^size = 5$/;"	v
size	tools/pybrain/pybrain/optimization/populationbased/pso.py	/^    size = 20$/;"	v	class:ParticleSwarmOptimizer
size	tools/pybrain/pybrain/structure/networks/custom/capturegame.py	/^    size = 5$/;"	v	class:CaptureGameNetwork
slicer	pybrain/structure/modulemesh.py	/^        def slicer():$/;"	f	function:ModuleMesh.viewOnFlatLayer
slicer	tools/pybrain/pybrain/structure/modulemesh.py	/^        def slicer():$/;"	f	function:ModuleMesh.viewOnFlatLayer
smoothup	pybrain/tools/rankingfunctions.py	/^        def smoothup(x):$/;"	f	function:SmoothGiniRanking.__call__
smoothup	tools/pybrain/pybrain/tools/rankingfunctions.py	/^        def smoothup(x):$/;"	f	function:SmoothGiniRanking.__call__
sociality	pybrain/optimization/populationbased/pso.py	/^    sociality = 2.0$/;"	v	class:ParticleSwarmOptimizer
sociality	tools/pybrain/pybrain/optimization/populationbased/pso.py	/^    sociality = 2.0$/;"	v	class:ParticleSwarmOptimizer
som	tools/pybrain/examples/unsupervised/kohonen.py	/^som = KohonenMap(2, 5)$/;"	v
sortKey	pybrain/supervised/knn/lsh/nearoptimal.py	/^        def sortKey((point_, satellite_)):$/;"	f	function:MultiDimHash.knn
sortKey	tools/pybrain/pybrain/supervised/knn/lsh/nearoptimal.py	/^        def sortKey((point_, satellite_)):$/;"	f	function:MultiDimHash.knn
sortModules	pybrain/structure/networks/network.py	/^    def sortModules(self):$/;"	m	class:Network
sortModules	pybrain/structure/networks/neurondecomposable.py	/^    def sortModules(self):$/;"	m	class:NeuronDecomposableNetwork
sortModules	pybrain/structure/networks/recurrent.py	/^    def sortModules(self):$/;"	m	class:RecurrentNetworkComponent
sortModules	tools/pybrain/pybrain/structure/networks/network.py	/^    def sortModules(self):$/;"	m	class:Network
sortModules	tools/pybrain/pybrain/structure/networks/neurondecomposable.py	/^    def sortModules(self):$/;"	m	class:NeuronDecomposableNetwork
sortModules	tools/pybrain/pybrain/structure/networks/recurrent.py	/^    def sortModules(self):$/;"	m	class:RecurrentNetworkComponent
sortedProfiling	pybrain/tests/helpers.py	/^def sortedProfiling(code, maxfunctions=50):$/;"	f
sortedProfiling	tools/pybrain/pybrain/tests/helpers.py	/^def sortedProfiling(code, maxfunctions=50):$/;"	f
sorti	pybrain/optimization/distributionbased/cmaes.py	/^def sorti(vect):$/;"	f
sorti	tools/pybrain/pybrain/optimization/distributionbased/cmaes.py	/^def sorti(vect):$/;"	f
source_suffix	tools/pybrain/docs/sphinx/conf.py	/^source_suffix = '.txt'$/;"	v
sp	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^    sp = subplot(211) # switch to the first subplot$/;"	v
sp	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^    sp = subplot(212)$/;"	v
sparse_orth	pybrain/utilities.py	/^def sparse_orth(d):$/;"	f
sparse_orth	tools/pybrain/pybrain/utilities.py	/^def sparse_orth(d):$/;"	f
specialfunctionDoc	pybrain/rl/environments/ode/environment.py	/^    def specialfunctionDoc(self):$/;"	m	class:ODEEnvironment
specialfunctionDoc	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def specialfunctionDoc(self):$/;"	m	class:ODEEnvironment
specialkeyfunc	pybrain/rl/environments/ode/environment.py	/^    def specialkeyfunc(self, c, x, y):$/;"	m	class:ODEEnvironment
specialkeyfunc	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def specialkeyfunc(self, c, x, y):$/;"	m	class:ODEEnvironment
splitByClass	pybrain/datasets/classification.py	/^    def splitByClass(self, cls_select):$/;"	m	class:ClassificationDataSet
splitByClass	tools/pybrain/pybrain/datasets/classification.py	/^    def splitByClass(self, cls_select):$/;"	m	class:ClassificationDataSet
splitWithProportion	pybrain/datasets/sequential.py	/^    def splitWithProportion(self, proportion=0.5):$/;"	m	class:SequentialDataSet
splitWithProportion	pybrain/datasets/supervised.py	/^    def splitWithProportion(self, proportion = 0.5):$/;"	m	class:SupervisedDataSet
splitWithProportion	tools/pybrain/pybrain/datasets/sequential.py	/^    def splitWithProportion(self, proportion=0.5):$/;"	m	class:SequentialDataSet
splitWithProportion	tools/pybrain/pybrain/datasets/supervised.py	/^    def splitWithProportion(self, proportion = 0.5):$/;"	m	class:SupervisedDataSet
sqrtm	pybrain/tools/functions.py	/^def sqrtm(M):$/;"	f
sqrtm	tools/pybrain/pybrain/tools/functions.py	/^def sqrtm(M):$/;"	f
stND	pybrain/tools/mixtures/mixtureofgaussian.py	/^stND = zeros(1000)$/;"	v
stND	pybrain/tools/mixtures/mogpuremax.py	/^stND = zeros(1000)$/;"	v
stND	tools/pybrain/pybrain/tools/mixtures/mixtureofgaussian.py	/^stND = zeros(1000)$/;"	v
stND	tools/pybrain/pybrain/tools/mixtures/mogpuremax.py	/^stND = zeros(1000)$/;"	v
stable	pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    def stable(self, h):$/;"	m	class:HandicapCaptureTask
stable	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    def stable(self, h):$/;"	m	class:HandicapCaptureTask
start	pybrain/rl/environments/cartpole/renderer.py	/^    def start(self):$/;"	m	class:CartPoleRenderer
start	pybrain/rl/environments/ode/viewer.py	/^    def start(self):$/;"	m	class:ODEViewer
start	pybrain/rl/environments/ode/xode_changes/body.py	/^        def start(name, attrs):$/;"	f	function:Mass._parseMassShape
start	pybrain/rl/environments/ode/xode_changes/geom.py	/^        def start(name, attrs):$/;"	f	function:Geom._parseGeomBox
start	pybrain/rl/environments/ode/xode_changes/geom.py	/^        def start(name, attrs):$/;"	f	function:Geom._parseGeomCCylinder
start	pybrain/rl/environments/ode/xode_changes/geom.py	/^        def start(name, attrs):$/;"	f	function:Geom._parseGeomCylinder
start	pybrain/rl/environments/ode/xode_changes/geom.py	/^        def start(name, attrs):$/;"	f	function:Geom._parseGeomPlane
start	pybrain/rl/environments/ode/xode_changes/geom.py	/^        def start(name, attrs):$/;"	f	function:Geom._parseGeomRay
start	pybrain/rl/environments/ode/xode_changes/geom.py	/^        def start(name, attrs):$/;"	f	function:Geom._parseGeomSphere
start	pybrain/rl/environments/ode/xode_changes/geom.py	/^        def start(name, attrs):$/;"	f	function:Geom._parseTriMesh
start	pybrain/rl/environments/renderer.py	/^    def start(self):$/;"	m	class:Renderer
start	pybrain/rl/environments/simple/renderer.py	/^    def start(self):$/;"	m	class:SimpleRenderer
start	pybrain/tools/rlgluebridge.py	/^    def start(self):$/;"	m	class:RLCExperiment
start	tools/pybrain/pybrain/rl/environments/cartpole/renderer.py	/^    def start(self):$/;"	m	class:CartPoleRenderer
start	tools/pybrain/pybrain/rl/environments/ode/viewer.py	/^    def start(self):$/;"	m	class:ODEViewer
start	tools/pybrain/pybrain/rl/environments/ode/xode_changes/body.py	/^        def start(name, attrs):$/;"	f	function:Mass._parseMassShape
start	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^        def start(name, attrs):$/;"	f	function:Geom._parseGeomBox
start	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^        def start(name, attrs):$/;"	f	function:Geom._parseGeomCCylinder
start	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^        def start(name, attrs):$/;"	f	function:Geom._parseGeomCylinder
start	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^        def start(name, attrs):$/;"	f	function:Geom._parseGeomPlane
start	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^        def start(name, attrs):$/;"	f	function:Geom._parseGeomRay
start	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^        def start(name, attrs):$/;"	f	function:Geom._parseGeomSphere
start	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^        def start(name, attrs):$/;"	f	function:Geom._parseTriMesh
start	tools/pybrain/pybrain/rl/environments/renderer.py	/^    def start(self):$/;"	m	class:Renderer
start	tools/pybrain/pybrain/rl/environments/simple/renderer.py	/^    def start(self):$/;"	m	class:SimpleRenderer
start	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    def start(self):$/;"	m	class:RLCExperiment
startcolor	pybrain/rl/environments/twoplayergames/capturegame.py	/^    startcolor = BLACK$/;"	v	class:CaptureGame
startcolor	pybrain/rl/environments/twoplayergames/gomoku.py	/^    startcolor = BLACK$/;"	v	class:GomokuGame
startcolor	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegame.py	/^    startcolor = BLACK$/;"	v	class:CaptureGame
startcolor	tools/pybrain/pybrain/rl/environments/twoplayergames/gomoku.py	/^    startcolor = BLACK$/;"	v	class:GomokuGame
state	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^double state[6];$/;"	v
state	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^double state[6];$/;"	v
stateSize	examples/problem_settings.py	/^stateSize = gridSize[0] * gridSize[1] # state size$/;"	v
stateSize	settings.py	/^stateSize = gridSize[0] * gridSize[1] # state size$/;"	v
stateSlice	pybrain/structure/modules/mdlstm.py	/^    def stateSlice(self):$/;"	m	class:MDLSTMLayer
stateSlice	tools/pybrain/pybrain/structure/modules/mdlstm.py	/^    def stateSlice(self):$/;"	m	class:MDLSTMLayer
stdParams	pybrain/structure/parametercontainer.py	/^    stdParams = 1.$/;"	v	class:ParameterContainer
stdParams	tools/pybrain/pybrain/structure/parametercontainer.py	/^    stdParams = 1.$/;"	v	class:ParameterContainer
step	pybrain/rl/environments/cartpole/cartpole.py	/^    def step(self):$/;"	m	class:CartPoleEnvironment
step	pybrain/rl/environments/cartpole/cartpole.py	/^    def step(self):$/;"	m	class:CartPoleLinEnvironment
step	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^void step(double action, double *st, double *derivs)$/;"	f
step	pybrain/rl/environments/ode/environment.py	/^    def step(self):$/;"	m	class:ODEEnvironment
step	pybrain/rl/environments/ode/instances/ccrl.py	/^    def step(self):$/;"	m	class:CCRLEnvironment
step	pybrain/rl/environments/shipsteer/shipsteer.py	/^    def step(self):$/;"	m	class:ShipSteeringEnvironment
step	pybrain/tests/unittests/test_utilities_flood.py	/^def step(x):$/;"	f
step	tools/pybrain/pybrain/rl/environments/cartpole/cartpole.py	/^    def step(self):$/;"	m	class:CartPoleEnvironment
step	tools/pybrain/pybrain/rl/environments/cartpole/cartpole.py	/^    def step(self):$/;"	m	class:CartPoleLinEnvironment
step	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^void step(double action, double *st, double *derivs)$/;"	f
step	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def step(self):$/;"	m	class:ODEEnvironment
step	tools/pybrain/pybrain/rl/environments/ode/instances/ccrl.py	/^    def step(self):$/;"	m	class:CCRLEnvironment
step	tools/pybrain/pybrain/rl/environments/shipsteer/shipsteer.py	/^    def step(self):$/;"	m	class:ShipSteeringEnvironment
step	tools/pybrain/pybrain/tests/unittests/test_utilities_flood.py	/^def step(x):$/;"	f
stepNum	compare.py	/^stepNum = 20000$/;"	v
steps	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^int steps;$/;"	v
steps	pybrain/rl/environments/classic/acrobot.py	/^    steps = 0$/;"	v	class:AcrobotTask
steps	pybrain/rl/environments/classic/mountaincar.py	/^    steps = 0$/;"	v	class:MountainCar
steps	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^int steps;$/;"	v
steps	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    steps = 0$/;"	v	class:AcrobotTask
steps	tools/pybrain/pybrain/rl/environments/classic/mountaincar.py	/^    steps = 0$/;"	v	class:MountainCar
stepsize	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^stepsize = 0.1 * metascale$/;"	v
stochAction	pybrain/rl/environments/mazes/maze.py	/^    stochAction = 0.$/;"	v	class:Maze
stochAction	pybrain/rl/environments/mazes/tasks/maze.py	/^    stochAction = 0$/;"	v	class:MazeTask
stochAction	pybrain/rl/environments/mazes/tasks/maze4x3.py	/^    stochAction = 0.1$/;"	v	class:FourByThreeMaze
stochAction	pybrain/rl/environments/mazes/tasks/maze89state.py	/^    stochAction = 0.1$/;"	v	class:EightyNineStateMaze
stochAction	tools/pybrain/pybrain/rl/environments/mazes/maze.py	/^    stochAction = 0.$/;"	v	class:Maze
stochAction	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze.py	/^    stochAction = 0$/;"	v	class:MazeTask
stochAction	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze4x3.py	/^    stochAction = 0.1$/;"	v	class:FourByThreeMaze
stochAction	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze89state.py	/^    stochAction = 0.1$/;"	v	class:EightyNineStateMaze
stochObs	pybrain/rl/environments/mazes/maze.py	/^    stochObs = 0.$/;"	v	class:Maze
stochObs	pybrain/rl/environments/mazes/tasks/maze.py	/^    stochObs = 0$/;"	v	class:MazeTask
stochObs	pybrain/rl/environments/mazes/tasks/maze89state.py	/^    stochObs = 0.1$/;"	v	class:EightyNineStateMaze
stochObs	pybrain/rl/environments/mazes/tasks/tiger.py	/^    stochObs = 0.15$/;"	v	class:TigerTask
stochObs	tools/pybrain/pybrain/rl/environments/mazes/maze.py	/^    stochObs = 0.$/;"	v	class:Maze
stochObs	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze.py	/^    stochObs = 0$/;"	v	class:MazeTask
stochObs	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze89state.py	/^    stochObs = 0.1$/;"	v	class:EightyNineStateMaze
stochObs	tools/pybrain/pybrain/rl/environments/mazes/tasks/tiger.py	/^    stochObs = 0.15$/;"	v	class:TigerTask
stochasticity	pybrain/rl/environments/classic/xor.py	/^    stochasticity = 0$/;"	v	class:XORTask
stochasticity	tools/pybrain/pybrain/rl/environments/classic/xor.py	/^    stochasticity = 0$/;"	v	class:XORTask
stop	pybrain/rl/environments/cartpole/renderer.py	/^    def stop(self):$/;"	m	class:CartPoleRenderer
stop	pybrain/rl/environments/renderer.py	/^    def stop(self):$/;"	m	class:Renderer
stop	pybrain/rl/environments/simple/renderer.py	/^    def stop(self):$/;"	m	class:SimpleRenderer
stop	pybrain/tools/rlgluebridge.py	/^    def stop(self):$/;"	m	class:RLCExperiment
stop	tools/pybrain/pybrain/rl/environments/cartpole/renderer.py	/^    def stop(self):$/;"	m	class:CartPoleRenderer
stop	tools/pybrain/pybrain/rl/environments/renderer.py	/^    def stop(self):$/;"	m	class:Renderer
stop	tools/pybrain/pybrain/rl/environments/simple/renderer.py	/^    def stop(self):$/;"	m	class:SimpleRenderer
stop	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    def stop(self):$/;"	m	class:RLCExperiment
stopPrecision	pybrain/optimization/distributionbased/cmaes.py	/^    stopPrecision = 1e-6$/;"	v	class:CMAES
stopPrecision	pybrain/optimization/neldermead.py	/^    stopPrecision = 1e-6$/;"	v	class:NelderMead
stopPrecision	tools/pybrain/pybrain/optimization/distributionbased/cmaes.py	/^    stopPrecision = 1e-6$/;"	v	class:CMAES
stopPrecision	tools/pybrain/pybrain/optimization/neldermead.py	/^    stopPrecision = 1e-6$/;"	v	class:NelderMead
stoppingCriterion	pybrain/rl/learners/meta/levinsearch.py	/^    def stoppingCriterion(self, val):$/;"	m	class:LevinSeach
stoppingCriterion	tools/pybrain/pybrain/rl/learners/meta/levinsearch.py	/^    def stoppingCriterion(self, val):$/;"	m	class:LevinSeach
storeAllCenters	pybrain/optimization/distributionbased/cmaes.py	/^    storeAllCenters = False$/;"	v	class:CMAES
storeAllCenters	tools/pybrain/pybrain/optimization/distributionbased/cmaes.py	/^    storeAllCenters = False$/;"	v	class:CMAES
storeAllDistributions	pybrain/optimization/distributionbased/distributionbased.py	/^    storeAllDistributions = False$/;"	v	class:DistributionBasedOptimizer
storeAllDistributions	pybrain/optimization/distributionbased/rank1.py	/^    storeAllDistributions = True$/;"	v	class:Rank1NES
storeAllDistributions	pybrain/optimization/distributionbased/xnes.py	/^    storeAllDistributions = False$/;"	v	class:XNES
storeAllDistributions	tools/pybrain/pybrain/optimization/distributionbased/distributionbased.py	/^    storeAllDistributions = False$/;"	v	class:DistributionBasedOptimizer
storeAllDistributions	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^    storeAllDistributions = True$/;"	v	class:Rank1NES
storeAllDistributions	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    storeAllDistributions = False$/;"	v	class:XNES
storeAllEvaluated	pybrain/optimization/distributionbased/rank1.py	/^    storeAllEvaluated = True    $/;"	v	class:Rank1NES
storeAllEvaluated	pybrain/optimization/distributionbased/snes.py	/^    storeAllEvaluated = True$/;"	v	class:SNES
storeAllEvaluated	pybrain/optimization/distributionbased/xnes.py	/^    storeAllEvaluated = True$/;"	v	class:XNES
storeAllEvaluated	pybrain/optimization/optimizer.py	/^    storeAllEvaluated = False$/;"	v	class:BlackBoxOptimizer
storeAllEvaluated	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^    storeAllEvaluated = True    $/;"	v	class:Rank1NES
storeAllEvaluated	tools/pybrain/pybrain/optimization/distributionbased/snes.py	/^    storeAllEvaluated = True$/;"	v	class:SNES
storeAllEvaluated	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    storeAllEvaluated = True$/;"	v	class:XNES
storeAllEvaluated	tools/pybrain/pybrain/optimization/optimizer.py	/^    storeAllEvaluated = False$/;"	v	class:BlackBoxOptimizer
storeAllEvaluations	pybrain/optimization/distributionbased/rank1.py	/^    storeAllEvaluations = True    $/;"	v	class:Rank1NES
storeAllEvaluations	pybrain/optimization/distributionbased/snes.py	/^    storeAllEvaluations = True    $/;"	v	class:SNES
storeAllEvaluations	pybrain/optimization/distributionbased/xnes.py	/^    storeAllEvaluations = True$/;"	v	class:XNES
storeAllEvaluations	pybrain/optimization/optimizer.py	/^    storeAllEvaluations = False$/;"	v	class:BlackBoxOptimizer
storeAllEvaluations	tools/pybrain/examples/rl/environments/shipsteer/shipbench_pgpe.py	/^                                    storeAllEvaluations = True))$/;"	v
storeAllEvaluations	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^    storeAllEvaluations = True    $/;"	v	class:Rank1NES
storeAllEvaluations	tools/pybrain/pybrain/optimization/distributionbased/snes.py	/^    storeAllEvaluations = True    $/;"	v	class:SNES
storeAllEvaluations	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    storeAllEvaluations = True$/;"	v	class:XNES
storeAllEvaluations	tools/pybrain/pybrain/optimization/optimizer.py	/^    storeAllEvaluations = False$/;"	v	class:BlackBoxOptimizer
storeAllPopulations	pybrain/optimization/populationbased/evolution.py	/^    storeAllPopulations = False$/;"	v	class:Evolution
storeAllPopulations	tools/pybrain/pybrain/optimization/populationbased/evolution.py	/^    storeAllPopulations = False$/;"	v	class:Evolution
storeAllRates	pybrain/optimization/distributionbased/rank1.py	/^    storeAllRates = True$/;"	v	class:Rank1NES
storeAllRates	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^    storeAllRates = True$/;"	v	class:Rank1NES
storeCallResults	pybrain/utilities.py	/^def storeCallResults(obj, verbose=False):$/;"	f
storeCallResults	tools/pybrain/pybrain/utilities.py	/^def storeCallResults(obj, verbose=False):$/;"	f
storeHallOfFame	pybrain/optimization/populationbased/es.py	/^    storeHallOfFame = True$/;"	v	class:ES
storeHallOfFame	tools/pybrain/pybrain/optimization/populationbased/es.py	/^    storeHallOfFame = True$/;"	v	class:ES
stratifiedSplit	pybrain/datasets/classification.py	/^    def stratifiedSplit(self, testfrac=0.15, evalfrac=0):$/;"	m	class:SequenceClassificationDataSet
stratifiedSplit	tools/pybrain/pybrain/datasets/classification.py	/^    def stratifiedSplit(self, testfrac=0.15, evalfrac=0):$/;"	m	class:SequenceClassificationDataSet
structure	tools/pybrain/docs/tutorials/rl.py	/^structure = array([[1, 1, 1, 1, 1, 1, 1, 1, 1],$/;"	v
styleFloat	tools/pybrain/docs/html/_static/jquery.js	/^while(elem=second[i++])first[pos++]=elem;return first;},unique:function(array){var ret=[],done={};try{for(var i=0,length=array.length;i<length;i++){var id=jQuery.data(array[i]);if(!done[id]){done[id]=true;ret.push(array[i]);}}}catch(e){ret=array;}return ret;},grep:function(elems,callback,inv){var ret=[];for(var i=0,length=elems.length;i<length;i++)if(!inv!=!callback(elems[i],i))ret.push(elems[i]);return ret;},map:function(elems,callback){var ret=[];for(var i=0,length=elems.length;i<length;i++){var value=callback(elems[i],i);if(value!=null)ret[ret.length]=value;}return ret.concat.apply([],ret);}});var userAgent=navigator.userAgent.toLowerCase();jQuery.browser={version:(userAgent.match(\/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/)||[])[1],safari:\/webkit\/.test(userAgent),opera:\/opera\/.test(userAgent),msie:\/msie\/.test(userAgent)&&!\/opera\/.test(userAgent),mozilla:\/mozilla\/.test(userAgent)&&!\/(compatible|webkit)\/.test(userAgent)};var styleFloat=jQuery.browser.msie?"styleFloat":"cssFloat";jQuery.extend({boxModel:!jQuery.browser.msie||document.compatMode=="CSS1Compat",props:{"for":"htmlFor","class":"className","float":styleFloat,cssFloat:styleFloat,styleFloat:styleFloat,readonly:"readOnly",maxlength:"maxLength",cellspacing:"cellSpacing"}});jQuery.each({parent:function(elem){return elem.parentNode;},parents:function(elem){return jQuery.dir(elem,"parentNode");},next:function(elem){return jQuery.nth(elem,2,"nextSibling");},prev:function(elem){return jQuery.nth(elem,2,"previousSibling");},nextAll:function(elem){return jQuery.dir(elem,"nextSibling");},prevAll:function(elem){return jQuery.dir(elem,"previousSibling");},siblings:function(elem){return jQuery.sibling(elem.parentNode.firstChild,elem);},children:function(elem){return jQuery.sibling(elem.firstChild);},contents:function(elem){return jQuery.nodeName(elem,"iframe")?elem.contentDocument||elem.contentWindow.document:jQuery.makeArray(elem.childNodes);}},function(name,fn){jQuery.fn[name]=function(selector){var ret=jQuery.map(this,fn);if(selector&&typeof selector=="string")ret=jQuery.multiFilter(selector,ret);return this.pushStack(jQuery.unique(ret));};});jQuery.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(name,original){jQuery.fn[name]=function(){var args=arguments;return this.each(function(){for(var i=0,length=args.length;i<length;i++)jQuery(args[i])[original](this);});};});jQuery.each({removeAttr:function(name){jQuery.attr(this,name,"");if(this.nodeType==1)this.removeAttribute(name);},addClass:function(classNames){jQuery.className.add(this,classNames);},removeClass:function(classNames){jQuery.className.remove(this,classNames);},toggleClass:function(classNames){jQuery.className[jQuery.className.has(this,classNames)?"remove":"add"](this,classNames);},remove:function(selector){if(!selector||jQuery.filter(selector,[this]).r.length){jQuery("*",this).add(this).each(function(){jQuery.event.remove(this);jQuery.removeData(this);});if(this.parentNode)this.parentNode.removeChild(this);}},empty:function(){jQuery(">*",this).remove();while(this.firstChild)this.removeChild(this.firstChild);}},function(name,fn){jQuery.fn[name]=function(){return this.each(fn,arguments);};});jQuery.each(["Height","Width"],function(i,name){var type=name.toLowerCase();jQuery.fn[type]=function(size){return this[0]==window?jQuery.browser.opera&&document.body["client"+name]||jQuery.browser.safari&&window["inner"+name]||document.compatMode=="CSS1Compat"&&document.documentElement["client"+name]||document.body["client"+name]:this[0]==document?Math.max(Math.max(document.body["scroll"+name],document.documentElement["scroll"+name]),Math.max(document.body["offset"+name],document.documentElement["offset"+name])):size==undefined?(this.length?jQuery.css(this[0],type):null):this.css(type,size.constructor==String?size:size+"px");};});function num(elem,prop){return elem[0]&&parseInt(jQuery.curCSS(elem[0],prop,true),10)||0;}var chars=jQuery.browser.safari&&parseInt(jQuery.browser.version)<417?"(?:[\\\\w*_-]|\\\\\\\\.)":"(?:[\\\\w\\u0128-\\uFFFF*_-]|\\\\\\\\.)",quickChild=new RegExp("^>\\\\s*("+chars+"+)"),quickID=new RegExp("^("+chars+"+)(#)("+chars+"+)"),quickClass=new RegExp("^([#.]?)("+chars+"*)");jQuery.extend({expr:{"":function(a,i,m){return m[2]=="*"||jQuery.nodeName(a,m[2]);},"#":function(a,i,m){return a.getAttribute("id")==m[2];},":":{lt:function(a,i,m){return i<m[3]-0;},gt:function(a,i,m){return i>m[3]-0;},nth:function(a,i,m){return m[3]-0==i;},eq:function(a,i,m){return m[3]-0==i;},first:function(a,i){return i==0;},last:function(a,i,m,r){return i==r.length-1;},even:function(a,i){return i%2==0;},odd:function(a,i){return i%2;},"first-child":function(a){return a.parentNode.getElementsByTagName("*")[0]==a;},"last-child":function(a){return jQuery.nth(a.parentNode.lastChild,1,"previousSibling")==a;},"only-child":function(a){return!jQuery.nth(a.parentNode.lastChild,2,"previousSibling");},parent:function(a){return a.firstChild;},empty:function(a){return!a.firstChild;},contains:function(a,i,m){return(a.textContent||a.innerText||jQuery(a).text()||"").indexOf(m[3])>=0;},visible:function(a){return"hidden"!=a.type&&jQuery.css(a,"display")!="none"&&jQuery.css(a,"visibility")!="hidden";},hidden:function(a){return"hidden"==a.type||jQuery.css(a,"display")=="none"||jQuery.css(a,"visibility")=="hidden";},enabled:function(a){return!a.disabled;},disabled:function(a){return a.disabled;},checked:function(a){return a.checked;},selected:function(a){return a.selected||jQuery.attr(a,"selected");},text:function(a){return"text"==a.type;},radio:function(a){return"radio"==a.type;},checkbox:function(a){return"checkbox"==a.type;},file:function(a){return"file"==a.type;},password:function(a){return"password"==a.type;},submit:function(a){return"submit"==a.type;},image:function(a){return"image"==a.type;},reset:function(a){return"reset"==a.type;},button:function(a){return"button"==a.type||jQuery.nodeName(a,"button");},input:function(a){return\/input|select|textarea|button\/i.test(a.nodeName);},has:function(a,i,m){return jQuery.find(m[3],a).length;},header:function(a){return\/h\\d\/i.test(a.nodeName);},animated:function(a){return jQuery.grep(jQuery.timers,function(fn){return a==fn.elem;}).length;}}},parse:[\/^(\\[) *@?([\\w-]+) *([!*$^~=]*) *('?"?)(.*?)\\4 *\\]\/,\/^(:)([\\w-]+)\\("?'?(.*?(\\(.*?\\))?[^(]*?)"?'?\\)\/,new RegExp("^([:.#]*)("+chars+"+)")],multiFilter:function(expr,elems,not){var old,cur=[];while(expr&&expr!=old){old=expr;var f=jQuery.filter(expr,elems,not);expr=f.t.replace(\/^\\s*,\\s*\/,"");cur=not?elems=f.r:jQuery.merge(cur,f.r);}return cur;},find:function(t,context){if(typeof t!="string")return[t];if(context&&context.nodeType!=1&&context.nodeType!=9)return[];context=context||document;var ret=[context],done=[],last,nodeName;while(t&&last!=t){var r=[];last=t;t=jQuery.trim(t);var foundToken=false,re=quickChild,m=re.exec(t);if(m){nodeName=m[1].toUpperCase();for(var i=0;ret[i];i++)for(var c=ret[i].firstChild;c;c=c.nextSibling)if(c.nodeType==1&&(nodeName=="*"||c.nodeName.toUpperCase()==nodeName))r.push(c);ret=r;t=t.replace(re,"");if(t.indexOf(" ")==0)continue;foundToken=true;}else{re=\/^([>+~])\\s*(\\w*)\/i;if((m=re.exec(t))!=null){r=[];var merge={};nodeName=m[2].toUpperCase();m=m[1];for(var j=0,rl=ret.length;j<rl;j++){var n=m=="~"||m=="+"?ret[j].nextSibling:ret[j].firstChild;for(;n;n=n.nextSibling)if(n.nodeType==1){var id=jQuery.data(n);if(m=="~"&&merge[id])break;if(!nodeName||n.nodeName.toUpperCase()==nodeName){if(m=="~")merge[id]=true;r.push(n);}if(m=="+")break;}}ret=r;t=jQuery.trim(t.replace(re,""));foundToken=true;}}if(t&&!foundToken){if(!t.indexOf(",")){if(context==ret[0])ret.shift();done=jQuery.merge(done,ret);r=ret=[context];t=" "+t.substr(1,t.length);}else{var re2=quickID;var m=re2.exec(t);if(m){m=[0,m[2],m[3],m[1]];}else{re2=quickClass;m=re2.exec(t);}m[2]=m[2].replace(\/\\\\\/g,"");var elem=ret[ret.length-1];if(m[1]=="#"&&elem&&elem.getElementById&&!jQuery.isXMLDoc(elem)){var oid=elem.getElementById(m[2]);if((jQuery.browser.msie||jQuery.browser.opera)&&oid&&typeof oid.id=="string"&&oid.id!=m[2])oid=jQuery('[@id="'+m[2]+'"]',elem)[0];ret=r=oid&&(!m[3]||jQuery.nodeName(oid,m[3]))?[oid]:[];}else{for(var i=0;ret[i];i++){var tag=m[1]=="#"&&m[3]?m[3]:m[1]!=""||m[0]==""?"*":m[2];if(tag=="*"&&ret[i].nodeName.toLowerCase()=="object")tag="param";r=jQuery.merge(r,ret[i].getElementsByTagName(tag));}if(m[1]==".")r=jQuery.classFilter(r,m[2]);if(m[1]=="#"){var tmp=[];for(var i=0;r[i];i++)if(r[i].getAttribute("id")==m[2]){tmp=[r[i]];break;}r=tmp;}ret=r;}t=t.replace(re2,"");}}if(t){var val=jQuery.filter(t,r);ret=r=val.r;t=jQuery.trim(val.t);}}if(t)ret=[];if(ret&&context==ret[0])ret.shift();done=jQuery.merge(done,ret);return done;},classFilter:function(r,m,not){m=" "+m+" ";var tmp=[];for(var i=0;r[i];i++){var pass=(" "+r[i].className+" ").indexOf(m)>=0;if(!not&&pass||not&&!pass)tmp.push(r[i]);}return tmp;},filter:function(t,r,not){var last;while(t&&t!=last){last=t;var p=jQuery.parse,m;for(var i=0;p[i];i++){m=p[i].exec(t);if(m){t=t.substring(m[0].length);m[2]=m[2].replace(\/\\\\\/g,"");break;}}if(!m)break;if(m[1]==":"&&m[2]=="not")r=isSimple.test(m[3])?jQuery.filter(m[3],r,true).r:jQuery(r).not(m[3]);else if(m[1]==".")r=jQuery.classFilter(r,m[2],not);else if(m[1]=="["){var tmp=[],type=m[3];for(var i=0,rl=r.length;i<rl;i++){var a=r[i],z=a[jQuery.props[m[2]]||m[2]];if(z==null||\/href|src|selected\/.test(m[2]))z=jQuery.attr(a,m[2])||'';if((type==""&&!!z||type=="="&&z==m[5]||type=="!="&&z!=m[5]||type=="^="&&z&&!z.indexOf(m[5])||type=="$="&&z.substr(z.length-m[5].length)==m[5]||(type=="*="||type=="~=")&&z.indexOf(m[5])>=0)^not)tmp.push(a);}r=tmp;}else if(m[1]==":"&&m[2]=="nth-child"){var merge={},tmp=[],test=\/(-?)(\\d*)n((?:\\+|-)?\\d*)\/.exec(m[3]=="even"&&"2n"||m[3]=="odd"&&"2n+1"||!\/\\D\/.test(m[3])&&"0n+"+m[3]||m[3]),first=(test[1]+(test[2]||1))-0,last=test[3]-0;for(var i=0,rl=r.length;i<rl;i++){var node=r[i],parentNode=node.parentNode,id=jQuery.data(parentNode);if(!merge[id]){var c=1;for(var n=parentNode.firstChild;n;n=n.nextSibling)if(n.nodeType==1)n.nodeIndex=c++;merge[id]=true;}var add=false;if(first==0){if(node.nodeIndex==last)add=true;}else if((node.nodeIndex-last)%first==0&&(node.nodeIndex-last)\/first>=0)add=true;if(add^not)tmp.push(node);}r=tmp;}else{var fn=jQuery.expr[m[1]];if(typeof fn=="object")fn=fn[m[2]];if(typeof fn=="string")fn=eval("false||function(a,i){return "+fn+";}");r=jQuery.grep(r,function(elem,i){return fn(elem,i,m,r);},not);}}return{r:r,t:t};},dir:function(elem,dir){var matched=[],cur=elem[dir];while(cur&&cur!=document){if(cur.nodeType==1)matched.push(cur);cur=cur[dir];}return matched;},nth:function(cur,result,dir,elem){result=result||1;var num=0;for(;cur;cur=cur[dir])if(cur.nodeType==1&&++num==result)break;return cur;},sibling:function(n,elem){var r=[];for(;n;n=n.nextSibling){if(n.nodeType==1&&n!=elem)r.push(n);}return r;}});jQuery.event={add:function(elem,types,handler,data){if(elem.nodeType==3||elem.nodeType==8)return;if(jQuery.browser.msie&&elem.setInterval)elem=window;if(!handler.guid)handler.guid=this.guid++;if(data!=undefined){var fn=handler;handler=this.proxy(fn,function(){return fn.apply(this,arguments);});handler.data=data;}var events=jQuery.data(elem,"events")||jQuery.data(elem,"events",{}),handle=jQuery.data(elem,"handle")||jQuery.data(elem,"handle",function(){if(typeof jQuery!="undefined"&&!jQuery.event.triggered)return jQuery.event.handle.apply(arguments.callee.elem,arguments);});handle.elem=elem;jQuery.each(types.split(\/\\s+\/),function(index,type){var parts=type.split(".");type=parts[0];handler.type=parts[1];var handlers=events[type];if(!handlers){handlers=events[type]={};if(!jQuery.event.special[type]||jQuery.event.special[type].setup.call(elem)===false){if(elem.addEventListener)elem.addEventListener(type,handle,false);else if(elem.attachEvent)elem.attachEvent("on"+type,handle);}}handlers[handler.guid]=handler;jQuery.event.global[type]=true;});elem=null;},guid:1,global:{},remove:function(elem,types,handler){if(elem.nodeType==3||elem.nodeType==8)return;var events=jQuery.data(elem,"events"),ret,index;if(events){if(types==undefined||(typeof types=="string"&&types.charAt(0)=="."))for(var type in events)this.remove(elem,type+(types||""));else{if(types.type){handler=types.handler;types=types.type;}jQuery.each(types.split(\/\\s+\/),function(index,type){var parts=type.split(".");type=parts[0];if(events[type]){if(handler)delete events[type][handler.guid];else$/;"	v
subDict	pybrain/utilities.py	/^def subDict(d, allowedkeys, flip=False):$/;"	f
subDict	tools/pybrain/pybrain/utilities.py	/^def subDict(d, allowedkeys, flip=False):$/;"	f
subPopulationSize	pybrain/supervised/trainers/evolino.py	/^    subPopulationSize = property(lambda self: self._subPopulationSize)$/;"	v	class:EvolinoTrainer
subPopulationSize	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^    subPopulationSize = 20,$/;"	v
subPopulationSize	tools/pybrain/pybrain/supervised/trainers/evolino.py	/^    subPopulationSize = property(lambda self: self._subPopulationSize)$/;"	v	class:EvolinoTrainer
supervisedPlotting	pybrain/rl/learners/directsearch/rwr.py	/^    supervisedPlotting = False$/;"	v	class:RWR
supervisedPlotting	tools/pybrain/pybrain/rl/learners/directsearch/rwr.py	/^    supervisedPlotting = False$/;"	v	class:RWR
svm	tools/pybrain/examples/supervised/neuralnets+svm/example_svm.py	/^svm = SVMUnit()$/;"	v
switchMutations	pybrain/optimization/memetic/memetic.py	/^    def switchMutations(self):$/;"	m	class:MemeticSearch
switchMutations	tools/pybrain/pybrain/optimization/memetic/memetic.py	/^    def switchMutations(self):$/;"	m	class:MemeticSearch
symmetric	pybrain/structure/networks/bidirectional.py	/^    symmetric = False$/;"	v	class:BidirectionalNetwork
symmetric	tools/pybrain/pybrain/structure/networks/bidirectional.py	/^    symmetric = False$/;"	v	class:BidirectionalNetwork
symmetricdimensions	pybrain/structure/networks/swiping.py	/^    symmetricdimensions = True$/;"	v	class:SwipingNetwork
symmetricdimensions	tools/pybrain/pybrain/structure/networks/swiping.py	/^    symmetricdimensions = True$/;"	v	class:SwipingNetwork
symmetricdirections	pybrain/structure/networks/swiping.py	/^    symmetricdirections = True$/;"	v	class:SwipingNetwork
symmetricdirections	tools/pybrain/pybrain/structure/networks/swiping.py	/^    symmetricdirections = True$/;"	v	class:SwipingNetwork
t	pybrain/structure/networks/convolutional.py	/^    t = CaptureGameTask(4)$/;"	v	class:SimpleConvolutionalNetwork
t	tools/pybrain/pybrain/structure/networks/convolutional.py	/^    t = CaptureGameTask(4)$/;"	v	class:SimpleConvolutionalNetwork
table	examples/ENAC_TL.py	/^table = ActionValueTable(gridSize[0]*gridSize[1], 4)$/;"	v
table	examples/SARSA_TL.py	/^table = ActionValueTable(gridSize[0]*gridSize[1], 4)$/;"	v
table	pybrain/rl/environments/ode/tools/xodetools.py	/^    table = XODELSRPlate('..\/models\/ccrlPlate')$/;"	v	class:XODELSRPlate
table	tools/pybrain/examples/rl/environments/maze/td.py	/^table = ActionValueTable(81, 4)$/;"	v
table	tools/pybrain/examples/rl/valuebased/td.py	/^table = ActionValueTable(81, 4)$/;"	v
table	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    table = XODELSRPlate('..\/models\/ccrlPlate')$/;"	v	class:XODELSRPlate
takeParser	pybrain/rl/environments/ode/xode_changes/body.py	/^    def takeParser(self, parser):$/;"	m	class:Body
takeParser	pybrain/rl/environments/ode/xode_changes/body.py	/^    def takeParser(self, parser):$/;"	m	class:Mass
takeParser	pybrain/rl/environments/ode/xode_changes/geom.py	/^    def takeParser(self, parser):$/;"	m	class:Geom
takeParser	tools/pybrain/pybrain/rl/environments/ode/xode_changes/body.py	/^    def takeParser(self, parser):$/;"	m	class:Body
takeParser	tools/pybrain/pybrain/rl/environments/ode/xode_changes/body.py	/^    def takeParser(self, parser):$/;"	m	class:Mass
takeParser	tools/pybrain/pybrain/rl/environments/ode/xode_changes/geom.py	/^    def takeParser(self, parser):$/;"	m	class:Geom
tanhPrime	pybrain/tools/functions.py	/^def tanhPrime(x):$/;"	f
tanhPrime	tools/pybrain/pybrain/tools/functions.py	/^def tanhPrime(x):$/;"	f
target	pybrain/rl/environments/classic/acrobot.py	/^    target = -0.5$/;"	v	class:SimpleAcrobot
target	pybrain/rl/environments/classic/acrobot.py	/^    target = -1.$/;"	v	class:VerySimpleAcrobot
target	pybrain/rl/environments/classic/acrobot.py	/^    target = 1.5$/;"	v	class:AcrobotTask
target	pybrain/rl/environments/classic/acrobot.py	/^    target = 1.95$/;"	v	class:SingleArmSwinger
target	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    target = -0.5$/;"	v	class:SimpleAcrobot
target	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    target = -1.$/;"	v	class:VerySimpleAcrobot
target	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    target = 1.5$/;"	v	class:AcrobotTask
target	tools/pybrain/pybrain/rl/environments/classic/acrobot.py	/^    target = 1.95$/;"	v	class:SingleArmSwinger
targetline	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^    targetline = plot(trnSequenceTarget,"r-") # plot the targets$/;"	v
task	enac.py	/^task = RobotMotionTask(env, senRange=senRange)$/;"	v
task	examples/ENAC.py	/^task = RobotMotionTask(env, senRange=senRange)$/;"	v
task	examples/ENAC_TL.py	/^task = RobotMotionTask(env, senRange=senRange)$/;"	v
task	examples/LSTDAC.py	/^task = RobotMotionTask(env, senRange=senRange)$/;"	v
task	examples/QLambda_LinFA.py	/^task = SimpleTemporalLogic(env, senRange=senRange)$/;"	v
task	examples/Q_LinFA.py	/^task = SimpleTemporalLogic(env, senRange=senRange)$/;"	v
task	examples/SARSA_TL.py	/^task = RobotMotionTask(env, senRange=senRange)$/;"	v
task	examples/SARSA_TL.py	/^task = SimpleTemporalLogic(env, senRange=senRange)$/;"	v
task	main.py	/^task = RobotMotionTask(env, senRange=senRange)$/;"	v
task	pybrain/tests/optimizationtest.py	/^task = BalanceTask()$/;"	v
task	tools/pybrain/docs/tutorials/rl.py	/^task = MDPMazeTask(environment)$/;"	v
task	tools/pybrain/examples/optimization/optimizerinterface.py	/^task = GoNorthwardTask()$/;"	v
task	tools/pybrain/examples/optimization/optimizers_for_rl.py	/^task = BalanceTask()$/;"	v
task	tools/pybrain/examples/rl/environments/capturegame/evolvingplayer.py	/^task = CaptureGameTask(size, averageOverGames = 40, opponent = KillingPlayer)$/;"	v
task	tools/pybrain/examples/rl/environments/cartpole/cart_all.py	/^        task = BalanceTask(env, 200, desiredValue=None)$/;"	v
task	tools/pybrain/examples/rl/environments/cartpole/cart_cma.py	/^    task = BalanceTask(env, 200, desiredValue=None)$/;"	v
task	tools/pybrain/examples/rl/environments/cartpole/cart_enac.py	/^    task = BalanceTask(env, 200, desiredValue=None)$/;"	v
task	tools/pybrain/examples/rl/environments/cartpole/cart_fem.py	/^    task = BalanceTask(env, 200, desiredValue=None)$/;"	v
task	tools/pybrain/examples/rl/environments/cartpole/cart_nes.py	/^    task = BalanceTask(env, 200, desiredValue=None)$/;"	v
task	tools/pybrain/examples/rl/environments/cartpole/cart_pgpe.py	/^    task = BalanceTask(env, 200, desiredValue=None)$/;"	v
task	tools/pybrain/examples/rl/environments/cartpole/cart_reinf.py	/^    task = BalanceTask(env, 200, desiredValue=None)$/;"	v
task	tools/pybrain/examples/rl/environments/cartpole/play_cartpole.py	/^task = BalanceTask(env, epilen)$/;"	v
task	tools/pybrain/examples/rl/environments/flexcube/flexcube_pgpe.py	/^    task = WalkTask(env)$/;"	v
task	tools/pybrain/examples/rl/environments/flexcube/flexcube_spsa.py	/^    task = WalkTask(env)$/;"	v
task	tools/pybrain/examples/rl/environments/maze/td.py	/^task = MDPMazeTask(env)$/;"	v
task	tools/pybrain/examples/rl/environments/ode/acrobot_fd.py	/^    task = GradualRewardTask(env)$/;"	v
task	tools/pybrain/examples/rl/environments/ode/acrobot_pgpe.py	/^    task = GradualRewardTask(env)$/;"	v
task	tools/pybrain/examples/rl/environments/ode/ccrl_glass_pgpe.py	/^    task = CCRLGlasTask(env)$/;"	v
task	tools/pybrain/examples/rl/environments/ode/ccrl_plate_pgpe.py	/^    task = CCRLPlateTask(env)$/;"	v
task	tools/pybrain/examples/rl/environments/ode/johnnie_pgpe.py	/^    task = StandingTask(env)$/;"	v
task	tools/pybrain/examples/rl/environments/ode/johnnie_reinforce.py	/^    task = StandingTask(env)$/;"	v
task	tools/pybrain/examples/rl/environments/shipsteer/shipbench_pgpe.py	/^    task = GoNorthwardTask(env,maxsteps = 500)$/;"	v
task	tools/pybrain/examples/rl/environments/shipsteer/shipbench_sde.py	/^task = GoNorthwardTask(env=env, maxsteps = maxsteps)$/;"	v
task	tools/pybrain/examples/rl/valuebased/nfq.py	/^task = DiscreteBalanceTask(env, 100)$/;"	v
task	tools/pybrain/examples/rl/valuebased/td.py	/^task = MDPMazeTask(env)$/;"	v
task	tools/pybrain/pybrain/tests/optimizationtest.py	/^task = BalanceTask()$/;"	v
tau	pybrain/rl/environments/cartpole/cartpole.py	/^    tau = 1. \/ 60.   # sec$/;"	v	class:CartPoleLinEnvironment
tau	tools/pybrain/pybrain/rl/environments/cartpole/cartpole.py	/^    tau = 1. \/ 60.   # sec$/;"	v	class:CartPoleLinEnvironment
temperature	pybrain/optimization/hillclimber.py	/^    temperature = 1.$/;"	v	class:StochasticHillClimber
temperature	pybrain/rl/environments/twoplayergames/capturegameplayers/moduledecision.py	/^    temperature = 1.$/;"	v	class:ModuleDecidingPlayer
temperature	pybrain/rl/environments/twoplayergames/gomokuplayers/moduledecision.py	/^    temperature = 1.$/;"	v	class:ModuleDecidingPlayer
temperature	pybrain/tools/rankingfunctions.py	/^    temperature = 10.$/;"	v	class:ExponentialRanking
temperature	tools/pybrain/pybrain/optimization/hillclimber.py	/^    temperature = 1.$/;"	v	class:StochasticHillClimber
temperature	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/moduledecision.py	/^    temperature = 1.$/;"	v	class:ModuleDecidingPlayer
temperature	tools/pybrain/pybrain/rl/environments/twoplayergames/gomokuplayers/moduledecision.py	/^    temperature = 1.$/;"	v	class:ModuleDecidingPlayer
temperature	tools/pybrain/pybrain/tools/rankingfunctions.py	/^    temperature = 10.$/;"	v	class:ExponentialRanking
temperature_decay	pybrain/rl/agents/linearfa.py	/^    temperature_decay = 0.99 # per episode$/;"	v	class:LinearFA_Agent
temperature_decay	tools/pybrain/pybrain/rl/agents/linearfa.py	/^    temperature_decay = 0.99 # per episode$/;"	v	class:LinearFA_Agent
templates_path	tools/pybrain/docs/sphinx/conf.py	/^templates_path = ['_templates']$/;"	v
test	pybrain/optimization/distributionbased/rank1.py	/^def test():$/;"	f
test	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^def test():$/;"	f
testAgent	pybrain/tools/rlgluebridge.py	/^    def testAgent(self, agent):$/;"	m	class:RlCompBenchmark
testAgent	pybrain/tools/rlgluebridge.py	/^def testAgent(path, agent, port=DEFAULT_PORT):$/;"	f
testAgent	tools/pybrain/pybrain/tools/rlgluebridge.py	/^    def testAgent(self, agent):$/;"	m	class:RlCompBenchmark
testAgent	tools/pybrain/pybrain/tools/rlgluebridge.py	/^def testAgent(path, agent, port=DEFAULT_PORT):$/;"	f
testAll	pybrain/tests/optimizationtest.py	/^def testAll(tests, allalgos, tolerant=True):$/;"	f
testAll	tools/pybrain/pybrain/tests/optimizationtest.py	/^def testAll(tests, allalgos, tolerant=True):$/;"	f
testContinuousInterface	pybrain/tests/optimizationtest.py	/^def testContinuousInterface(algo):$/;"	f
testContinuousInterface	tools/pybrain/pybrain/tests/optimizationtest.py	/^def testContinuousInterface(algo):$/;"	f
testEquivalence	pybrain/tests/unittests/_test_equivalence_to_ctypes.py	/^def testEquivalence(net):$/;"	f
testEquivalence	tools/pybrain/pybrain/tests/unittests/_test_equivalence_to_ctypes.py	/^def testEquivalence(net):$/;"	f
testIBP	pybrain/tools/ibp.py	/^def testIBP():$/;"	f
testIBP	tools/pybrain/pybrain/tools/ibp.py	/^def testIBP():$/;"	f
testImport	pybrain/tests/runtests.py	/^def testImport(module_name):$/;"	f
testImport	tools/pybrain/pybrain/tests/runtests.py	/^def testImport(module_name):$/;"	f
testImportanceMixing	pybrain/auxiliary/importancemixing.py	/^def testImportanceMixing(popsize = 5000, forcedRefresh = 0.0):$/;"	f
testImportanceMixing	tools/pybrain/pybrain/auxiliary/importancemixing.py	/^def testImportanceMixing(popsize = 5000, forcedRefresh = 0.0):$/;"	f
testInterface	pybrain/tests/optimizationtest.py	/^def testInterface(algo):$/;"	f
testInterface	tools/pybrain/pybrain/tests/optimizationtest.py	/^def testInterface(algo):$/;"	f
testMinMax	pybrain/tests/optimizationtest.py	/^def testMinMax(algo):$/;"	f
testMinMax	tools/pybrain/pybrain/tests/optimizationtest.py	/^def testMinMax(algo):$/;"	f
testOnArray	pybrain/auxiliary/gaussprocess.py	/^    def testOnArray(self, arr):$/;"	m	class:GaussianProcess
testOnArray	tools/pybrain/pybrain/auxiliary/gaussprocess.py	/^    def testOnArray(self, arr):$/;"	m	class:GaussianProcess
testOnClassData	pybrain/supervised/trainers/backprop.py	/^    def testOnClassData(self, dataset=None, verbose=False,$/;"	m	class:BackpropTrainer
testOnClassData	tools/pybrain/pybrain/supervised/trainers/backprop.py	/^    def testOnClassData(self, dataset=None, verbose=False,$/;"	m	class:BackpropTrainer
testOnData	pybrain/supervised/trainers/backprop.py	/^    def testOnData(self, dataset=None, verbose=False):$/;"	m	class:BackpropTrainer
testOnData	tools/pybrain/pybrain/supervised/trainers/backprop.py	/^    def testOnData(self, dataset=None, verbose=False):$/;"	m	class:BackpropTrainer
testOnEvolvable	pybrain/tests/optimizationtest.py	/^def testOnEvolvable(algo):$/;"	f
testOnEvolvable	tools/pybrain/pybrain/tests/optimizationtest.py	/^def testOnEvolvable(algo):$/;"	f
testOnModuleAndTask	pybrain/tests/optimizationtest.py	/^def testOnModuleAndTask(algo):$/;"	f
testOnModuleAndTask	tools/pybrain/pybrain/tests/optimizationtest.py	/^def testOnModuleAndTask(algo):$/;"	f
testOnSequenceData	pybrain/tools/validation.py	/^def testOnSequenceData(module, dataset):$/;"	f
testOnSequenceData	tools/pybrain/pybrain/tools/validation.py	/^def testOnSequenceData(module, dataset):$/;"	f
testRewardFunction	pybrain/tools/mixtures/mixtureofgaussian.py	/^    def testRewardFunction(self, x, typ, noise=0.000001):$/;"	m	class:MixtureOfGaussians
testRewardFunction	tools/pybrain/pybrain/tools/mixtures/mixtureofgaussian.py	/^    def testRewardFunction(self, x, typ, noise=0.000001):$/;"	m	class:MixtureOfGaussians
testSimple	pybrain/rl/learners/valuebased/linearfa.py	/^    def testSimple(self):        $/;"	m	class:LearningTester
testSimple	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    def testSimple(self):        $/;"	m	class:LearningTester
testSingleAction	pybrain/rl/learners/valuebased/linearfa.py	/^    def testSingleAction(self):        $/;"	m	class:LearningTester
testSingleAction	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    def testSingleAction(self):        $/;"	m	class:LearningTester
testSingleState	pybrain/rl/learners/valuebased/linearfa.py	/^    def testSingleState(self):$/;"	m	class:LearningTester
testSingleState	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    def testSingleState(self):$/;"	m	class:LearningTester
testSingleStateFullDiscounted	pybrain/rl/learners/valuebased/linearfa.py	/^    def testSingleStateFullDiscounted(self):$/;"	m	class:LearningTester
testSingleStateFullDiscounted	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    def testSingleStateFullDiscounted(self):$/;"	m	class:LearningTester
testTraining	tools/pybrain/examples/supervised/backprop/backpropanbncn.py	/^def testTraining():$/;"	f
testTraining	tools/pybrain/examples/supervised/backprop/backpropxor.py	/^def testTraining():$/;"	f
test_Actor	learners/LSTDACLearner.py	/^    def test_Actor(self):$/;"	m	class:LSTDACLearnerTestCase
test_Critic	learners/LSTDACLearner.py	/^    def test_Critic(self):$/;"	m	class:LSTDACLearnerTestCase
test_GetAllowNSTP	task/RobotMotionTask.py	/^    def test_GetAllowNSTP(self):$/;"	m	class:RobotMotionTaskTestCase
test_GetNSS	task/RobotMotionTask.py	/^    def test_GetNSS(self):$/;"	m	class:RobotMotionTaskTestCase
test_calBasisFuncValA	policy/BoltzmanAC.py	/^    def test_calBasisFuncValA(self):$/;"	m	class:BoltzmanPolicyTestCase
test_calSecondBasisFuncVal	policy/BoltzmanAC.py	/^    def test_calSecondBasisFuncVal(self):$/;"	m	class:BoltzmanPolicyTestCase
test_getActionProb	policy/BoltzmanAC.py	/^    def test_getActionProb(self):$/;"	m	class:BoltzmanPolicyTestCase
test_getFeatureList	task/RobotMotionTask.py	/^    def test_getFeatureList(self):$/;"	m	class:RobotMotionTaskTestCase
test_getObservation	task/RobotMotionTask.py	/^    def test_getObservation(self):$/;"	m	class:RobotMotionTaskTestCase
test_suite	tools/pybrain/setup.py	/^    test_suite='pybrain.tests.runtests.make_test_suite',$/;"	v
testagent	tools/pybrain/examples/rl/valuebased/nfq.py	/^testagent = LearningAgent(module, None)$/;"	v
testnes	pybrain/tools/aptativeresampling.py	/^def testnes():$/;"	f
testnes	tools/pybrain/pybrain/tools/aptativeresampling.py	/^def testnes():$/;"	f
tests	pybrain/tests/optimizationtest.py	/^    tests = [testInterface,$/;"	v
tests	tools/pybrain/pybrain/tests/optimizationtest.py	/^    tests = [testInterface,$/;"	v
tf	pybrain/rl/environments/functions/transformations.py	/^        def tf(x):$/;"	f	function:TranslateFunction.__init__
tf	tools/pybrain/pybrain/rl/environments/functions/transformations.py	/^        def tf(x):$/;"	f	function:TranslateFunction.__init__
th	examples/problem_settings.py	/^th = 1e-2$/;"	v
th	settings.py	/^th = 1e-2$/;"	v
theparams	tools/pybrain/docs/tutorials/blackboxoptimization.py	/^    theparams = buildNetwork(thetask.outdim, thetask.indim, bias=False)    $/;"	v
theparams	tools/pybrain/docs/tutorials/blackboxoptimization.py	/^    theparams = randn(3)$/;"	v
theta	policy/BoltzmanAC.py	/^    theta = property(fget = get_theta, fset = set_theta)$/;"	v	class:BoltzmanPolicy
thetask	tools/pybrain/docs/tutorials/blackboxoptimization.py	/^    thetask = BalanceTask()$/;"	v
thetask	tools/pybrain/docs/tutorials/blackboxoptimization.py	/^    thetask = SphereFunction(3)$/;"	v
thirty_six_degrees	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	46;"	d	file:
thirty_six_degrees	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	46;"	d	file:
threaded	pybrain/utilities.py	/^def threaded(callback=lambda * args, **kwargs: None, daemonic=False):$/;"	f
threaded	tools/pybrain/pybrain/utilities.py	/^def threaded(callback=lambda * args, **kwargs: None, daemonic=False):$/;"	f
ticks	tools/pybrain/docs/tutorials/fnn.py	/^ticks = arange(-3., 6., 0.2)$/;"	v
timeBoundExecution	pybrain/rl/learners/meta/levinsearch.py	/^def timeBoundExecution(algo, maxtime):$/;"	f
timeBoundExecution	tools/pybrain/pybrain/rl/learners/meta/levinsearch.py	/^def timeBoundExecution(algo, maxtime):$/;"	f
tmp	tools/pybrain/docs/html/_static/searchtools.js	/^    var tmp = query.split(\/\\s+\/);$/;"	v
toBeMinimized	pybrain/rl/environments/fitnessevaluator.py	/^    toBeMinimized = False$/;"	v	class:FitnessEvaluator
toBeMinimized	pybrain/rl/environments/functions/function.py	/^    toBeMinimized = True$/;"	v	class:FunctionEnvironment
toBeMinimized	pybrain/rl/environments/functions/unbounded.py	/^    toBeMinimized = True$/;"	v	class:UnboundedFunctionEnvironment
toBeMinimized	tools/pybrain/pybrain/rl/environments/fitnessevaluator.py	/^    toBeMinimized = False$/;"	v	class:FitnessEvaluator
toBeMinimized	tools/pybrain/pybrain/rl/environments/functions/function.py	/^    toBeMinimized = True$/;"	v	class:FunctionEnvironment
toBeMinimized	tools/pybrain/pybrain/rl/environments/functions/unbounded.py	/^    toBeMinimized = True$/;"	v	class:UnboundedFunctionEnvironment
today_fmt	tools/pybrain/docs/sphinx/conf.py	/^today_fmt = '%B %d, %Y'$/;"	v
top	pybrain/rl/environments/ode/tools/xmltools.py	/^    def top(self):$/;"	m	class:XMLstruct
top	tools/pybrain/pybrain/rl/environments/ode/tools/xmltools.py	/^    def top(self):$/;"	m	class:XMLstruct
topFraction	pybrain/tools/rankingfunctions.py	/^    topFraction = 0.1$/;"	v	class:TopSelection
topFraction	pybrain/tools/rankingfunctions.py	/^    topFraction = 0.2$/;"	v	class:TopLinearRanking
topFraction	tools/pybrain/pybrain/tools/rankingfunctions.py	/^    topFraction = 0.1$/;"	v	class:TopSelection
topFraction	tools/pybrain/pybrain/tools/rankingfunctions.py	/^    topFraction = 0.2$/;"	v	class:TopLinearRanking
topProportion	pybrain/optimization/populationbased/ga.py	/^    topProportion = 0.2$/;"	v	class:GA
topProportion	pybrain/optimization/populationbased/multiobjective/nsga2.py	/^    topProportion = 0.5$/;"	v	class:MultiObjectiveGA
topProportion	tools/pybrain/pybrain/optimization/populationbased/ga.py	/^    topProportion = 0.2$/;"	v	class:GA
topProportion	tools/pybrain/pybrain/optimization/populationbased/multiobjective/nsga2.py	/^    topProportion = 0.5$/;"	v	class:MultiObjectiveGA
topology	pybrain/rl/environments/mazes/tasks/cheesemaze.py	/^    topology = array([[1] * 7,$/;"	v	class:CheeseMaze
topology	pybrain/rl/environments/mazes/tasks/maze.py	/^    topology = None$/;"	v	class:MazeTask
topology	pybrain/rl/environments/mazes/tasks/maze.py	/^    topology = array([[1] * 5,$/;"	v	class:TrivialMaze
topology	pybrain/rl/environments/mazes/tasks/maze4x3.py	/^    topology = array([[1] * 6,$/;"	v	class:FourByThreeMaze
topology	pybrain/rl/environments/mazes/tasks/maze89state.py	/^    topology = array([[1]*9,$/;"	v	class:EightyNineStateMaze
topology	pybrain/rl/environments/mazes/tasks/shuttle.py	/^    topology = array([[1] * 7,$/;"	v	class:ShuttleDocking
topology	tools/pybrain/pybrain/rl/environments/mazes/tasks/cheesemaze.py	/^    topology = array([[1] * 7,$/;"	v	class:CheeseMaze
topology	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze.py	/^    topology = None$/;"	v	class:MazeTask
topology	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze.py	/^    topology = array([[1] * 5,$/;"	v	class:TrivialMaze
topology	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze4x3.py	/^    topology = array([[1] * 6,$/;"	v	class:FourByThreeMaze
topology	tools/pybrain/pybrain/rl/environments/mazes/tasks/maze89state.py	/^    topology = array([[1]*9,$/;"	v	class:EightyNineStateMaze
topology	tools/pybrain/pybrain/rl/environments/mazes/tasks/shuttle.py	/^    topology = array([[1] * 7,$/;"	v	class:ShuttleDocking
topologyMutate	pybrain/structure/evolvables/maskedparameters.py	/^    def topologyMutate(self):$/;"	m	class:MaskedParameters
topologyMutate	pybrain/structure/evolvables/topology.py	/^    def topologyMutate(self):$/;"	m	class:TopologyEvolvable
topologyMutate	tools/pybrain/pybrain/structure/evolvables/maskedparameters.py	/^    def topologyMutate(self):$/;"	m	class:MaskedParameters
topologyMutate	tools/pybrain/pybrain/structure/evolvables/topology.py	/^    def topologyMutate(self):$/;"	m	class:TopologyEvolvable
totalIterations	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^int totalIterations;$/;"	v
totalIterations	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^int totalIterations;$/;"	v
tourn	tools/pybrain/examples/rl/environments/capturegame/minitournament.py	/^tourn = Tournament(game, agents)$/;"	v
tournament	pybrain/optimization/populationbased/ga.py	/^    tournament = False$/;"	v	class:GA
tournament	tools/pybrain/pybrain/optimization/populationbased/ga.py	/^    tournament = False$/;"	v	class:GA
tournamentSize	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    tournamentSize = None$/;"	v	class:Coevolution
tournamentSize	pybrain/optimization/populationbased/ga.py	/^    tournamentSize = 2$/;"	v	class:GA
tournamentSize	pybrain/tools/rankingfunctions.py	/^    tournamentSize = 2$/;"	v	class:TournamentSelection
tournamentSize	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    tournamentSize = None$/;"	v	class:Coevolution
tournamentSize	tools/pybrain/pybrain/optimization/populationbased/ga.py	/^    tournamentSize = 2$/;"	v	class:GA
tournamentSize	tools/pybrain/pybrain/tools/rankingfunctions.py	/^    tournamentSize = 2$/;"	v	class:TournamentSelection
trace	examples/ENAC.py	/^trace = dict(epsiode=[], rp=[])$/;"	v
trace	examples/LSTDAC.py	/^trace = dict(epsiode=[], rp=[])$/;"	v
trace	examples/QLambda_LinFA.py	/^trace = dict(epsiode=[], rp=[])$/;"	v
trace	examples/Q_LinFA.py	/^trace = dict(epsiode=[], rp=[])$/;"	v
trace	examples/SARSA_TL.py	/^trace = dict(epsiode=[], rp=[])$/;"	v
trace	main.py	/^trace = dict(i=[], rp=[])$/;"	v
trace	pybrain/utilities.py	/^def trace(func):$/;"	f
trace	tools/pybrain/pybrain/utilities.py	/^def trace(func):$/;"	f
train	pybrain/supervised/trainers/backprop.py	/^    def train(self):$/;"	m	class:BackpropTrainer
train	pybrain/supervised/trainers/evolino.py	/^    def train(self):$/;"	m	class:EvolinoTrainer
train	pybrain/supervised/trainers/rprop.py	/^    def train(self):$/;"	m	class:RPropMinusTrainer
train	pybrain/supervised/trainers/svmtrainer.py	/^    def train(self, search=False, **kwargs):$/;"	m	class:SVMTrainer
train	pybrain/supervised/trainers/trainer.py	/^    def train(self):$/;"	m	class:Trainer
train	pybrain/unsupervised/trainers/deepbelief.py	/^    def train(self):$/;"	m	class:DeepBeliefTrainer
train	pybrain/unsupervised/trainers/rbm.py	/^    def train(self):$/;"	m	class:RbmGibbsTrainer
train	tools/pybrain/pybrain/supervised/trainers/backprop.py	/^    def train(self):$/;"	m	class:BackpropTrainer
train	tools/pybrain/pybrain/supervised/trainers/evolino.py	/^    def train(self):$/;"	m	class:EvolinoTrainer
train	tools/pybrain/pybrain/supervised/trainers/rprop.py	/^    def train(self):$/;"	m	class:RPropMinusTrainer
train	tools/pybrain/pybrain/supervised/trainers/svmtrainer.py	/^    def train(self, search=False, **kwargs):$/;"	m	class:SVMTrainer
train	tools/pybrain/pybrain/supervised/trainers/trainer.py	/^    def train(self):$/;"	m	class:Trainer
train	tools/pybrain/pybrain/unsupervised/trainers/deepbelief.py	/^    def train(self):$/;"	m	class:DeepBeliefTrainer
train	tools/pybrain/pybrain/unsupervised/trainers/rbm.py	/^    def train(self):$/;"	m	class:RbmGibbsTrainer
trainEpochs	pybrain/supervised/trainers/trainer.py	/^    def trainEpochs(self, epochs=1, *args, **kwargs):$/;"	m	class:Trainer
trainEpochs	tools/pybrain/pybrain/supervised/trainers/trainer.py	/^    def trainEpochs(self, epochs=1, *args, **kwargs):$/;"	m	class:Trainer
trainOnDataset	pybrain/auxiliary/gaussprocess.py	/^    def trainOnDataset(self, dataset):$/;"	m	class:GaussianProcess
trainOnDataset	pybrain/supervised/trainers/evolino.py	/^    def trainOnDataset(self, *args, **kwargs):$/;"	m	class:EvolinoTrainer
trainOnDataset	pybrain/supervised/trainers/trainer.py	/^    def trainOnDataset(self, dataset, *args, **kwargs):$/;"	m	class:Trainer
trainOnDataset	pybrain/unsupervised/trainers/rbm.py	/^    def trainOnDataset(self, dataset):$/;"	m	class:RbmGibbsTrainer
trainOnDataset	tools/pybrain/pybrain/auxiliary/gaussprocess.py	/^    def trainOnDataset(self, dataset):$/;"	m	class:GaussianProcess
trainOnDataset	tools/pybrain/pybrain/supervised/trainers/evolino.py	/^    def trainOnDataset(self, *args, **kwargs):$/;"	m	class:EvolinoTrainer
trainOnDataset	tools/pybrain/pybrain/supervised/trainers/trainer.py	/^    def trainOnDataset(self, dataset, *args, **kwargs):$/;"	m	class:Trainer
trainOnDataset	tools/pybrain/pybrain/unsupervised/trainers/rbm.py	/^    def trainOnDataset(self, dataset):$/;"	m	class:RbmGibbsTrainer
trainRbm	pybrain/unsupervised/trainers/deepbelief.py	/^    def trainRbm(self, rbm, dataset):$/;"	m	class:DeepBeliefTrainer
trainRbm	tools/pybrain/pybrain/unsupervised/trainers/deepbelief.py	/^    def trainRbm(self, rbm, dataset):$/;"	m	class:DeepBeliefTrainer
trainUntilConvergence	pybrain/supervised/trainers/backprop.py	/^    def trainUntilConvergence(self, dataset=None, maxEpochs=None, verbose=None,$/;"	m	class:BackpropTrainer
trainUntilConvergence	tools/pybrain/pybrain/supervised/trainers/backprop.py	/^    def trainUntilConvergence(self, dataset=None, maxEpochs=None, verbose=None,$/;"	m	class:BackpropTrainer
trainWith	pybrain/rl/learners/valuebased/linearfa.py	/^    def trainWith(self, algo, data):$/;"	m	class:LearningTester
trainWith	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    def trainWith(self, algo, data):$/;"	m	class:LearningTester
trainer	tools/pybrain/docs/tutorials/fnn.py	/^trainer = BackpropTrainer(fnn, dataset=trndata, momentum=0.1, verbose=True, weightdecay=0.01)$/;"	v
trainer	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^trainer = EvolinoTrainer($/;"	v
trainer	tools/pybrain/examples/supervised/neuralnets+svm/example_fnn.py	/^trainer = BackpropTrainer( fnn, dataset=trndata, momentum=0.1, verbose=True, weightdecay=0.01)$/;"	v
trainer	tools/pybrain/examples/supervised/neuralnets+svm/example_rnn.py	/^trainer = RPropMinusTrainer( rnn, dataset=trndata, verbose=True )$/;"	v
trainer	tools/pybrain/examples/supervised/neuralnets+svm/example_svm.py	/^trainer = SVMTrainer( svm, trndata )$/;"	v
trainer	tools/pybrain/examples/unsupervised/rbm.py	/^trainer = RbmBernoulliTrainer(rbm, ds, cfg)$/;"	v
trainers	pybrain/unsupervised/trainers/deepbelief.py	/^    trainers = {$/;"	v	class:DeepBeliefTrainer
trainers	tools/pybrain/pybrain/unsupervised/trainers/deepbelief.py	/^    trainers = {$/;"	v	class:DeepBeliefTrainer
trapFlag	environments/TrapMaze.py	/^    trapFlag = -1$/;"	v	class:TrapMaze
trialFinished	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^extern int trialFinished()$/;"	f
trialFinished	pybrain/rl/environments/cartpole/fast_version/cartpolewrap.pyx	/^    cdef int trialFinished()$/;"	f
trialFinished	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	/^extern int trialFinished()$/;"	f
trialFinished	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpolewrap.pyx	/^    cdef int trialFinished()$/;"	f
triu2flat	pybrain/utilities.py	/^def triu2flat(m):$/;"	f
triu2flat	tools/pybrain/pybrain/utilities.py	/^def triu2flat(m):$/;"	f
trnData	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^trnData = generateSuperimposedSineData(sinefreqs, trnInputSpace)$/;"	v
trnInputSpace	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^trnInputSpace = numpy.arange( 0*scale , 190*scale , stepsize )$/;"	v
trnSequence	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^trnSequence = trnData.getField('target')$/;"	v
trnSequenceOutput	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^    trnSequenceOutput = net.extrapolate(trnSequenceWashout, len(trnSequenceTarget))$/;"	v
trnSequenceTarget	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^trnSequenceTarget  = trnSequence[separatorIdx:]$/;"	v
trnSequenceWashout	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^trnSequenceWashout = trnSequence[0:separatorIdx]$/;"	v
trndata	tools/pybrain/examples/supervised/neuralnets+svm/example_fnn.py	/^trndata = generateClassificationData(250)$/;"	v
trndata	tools/pybrain/examples/supervised/neuralnets+svm/example_rnn.py	/^trndata = generateNoisySines(50, 40)$/;"	v
trndata	tools/pybrain/examples/supervised/neuralnets+svm/example_svm.py	/^trndata = generateClassificationData(20, nClasses=2)$/;"	v
trnresult	tools/pybrain/docs/tutorials/fnn.py	/^    trnresult = percentError(trainer.testOnClassData(),$/;"	v
trnresult	tools/pybrain/examples/supervised/neuralnets+svm/example_fnn.py	/^    trnresult = percentError( trainer.testOnClassData(),$/;"	v
trnresult	tools/pybrain/examples/supervised/neuralnets+svm/example_rnn.py	/^    trnresult = 100. * (1.0-testOnSequenceData(rnn, trndata))$/;"	v
trnresult	tools/pybrain/examples/supervised/neuralnets+svm/example_svm.py	/^trnresult = percentError( svm.activateOnDataset(trndata), trndata['target'] )$/;"	v
tstData	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^tstData = generateSuperimposedSineData(sinefreqs, tstInputSpace)$/;"	v
tstInputSpace	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^tstInputSpace = numpy.arange( 400*scale , 540*scale , stepsize)$/;"	v
tstSequence	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^tstSequence = tstData.getField('target')$/;"	v
tstSequenceOutput	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^    tstSequenceOutput = net.extrapolate(tstSequenceWashout, len(tstSequenceTarget))$/;"	v
tstSequenceTarget	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^tstSequenceTarget  = tstSequence[separatorIdx:]$/;"	v
tstSequenceWashout	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^tstSequenceWashout = tstSequence[0:separatorIdx]$/;"	v
tstdata	tools/pybrain/examples/supervised/neuralnets+svm/example_fnn.py	/^tstdata = generateClassificationData(100)$/;"	v
tstdata	tools/pybrain/examples/supervised/neuralnets+svm/example_rnn.py	/^tstdata = generateNoisySines(50, 20)$/;"	v
tstdata	tools/pybrain/examples/supervised/neuralnets+svm/example_svm.py	/^tstdata = generateClassificationData(100, nClasses=2)$/;"	v
tstresult	tools/pybrain/docs/tutorials/fnn.py	/^    tstresult = percentError(trainer.testOnClassData($/;"	v
tstresult	tools/pybrain/examples/supervised/neuralnets+svm/example_fnn.py	/^    tstresult = percentError( trainer.testOnClassData($/;"	v
tstresult	tools/pybrain/examples/supervised/neuralnets+svm/example_rnn.py	/^    tstresult = 100. * (1.0-testOnSequenceData(rnn, tstdata))$/;"	v
tstresult	tools/pybrain/examples/supervised/neuralnets+svm/example_svm.py	/^tstresult = percentError( svm.activateOnDataset(tstdata), tstdata['target'] )$/;"	v
tupleRemoveItem	pybrain/utilities.py	/^def tupleRemoveItem(tup, index):$/;"	f
tupleRemoveItem	tools/pybrain/pybrain/utilities.py	/^def tupleRemoveItem(tup, index):$/;"	f
twelve_degrees	pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	44;"	d	file:
twelve_degrees	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpole.cpp	44;"	d	file:
uSize	examples/problem_settings.py	/^uSize = 4  # Control Size$/;"	v
uSize	settings.py	/^uSize = 4  # Control Size$/;"	v
uniformBaseline	pybrain/optimization/distributionbased/rank1.py	/^    uniformBaseline = True$/;"	v	class:Rank1NES
uniformBaseline	pybrain/optimization/distributionbased/snes.py	/^    uniformBaseline = True$/;"	v	class:SNES
uniformBaseline	pybrain/optimization/distributionbased/xnes.py	/^    uniformBaseline = True$/;"	v	class:XNES
uniformBaseline	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^    uniformBaseline = True$/;"	v	class:Rank1NES
uniformBaseline	tools/pybrain/pybrain/optimization/distributionbased/snes.py	/^    uniformBaseline = True$/;"	v	class:SNES
uniformBaseline	tools/pybrain/pybrain/optimization/distributionbased/xnes.py	/^    uniformBaseline = True$/;"	v	class:XNES
unlinkFields	pybrain/datasets/dataset.py	/^    def unlinkFields(self, unlinklist=None):$/;"	m	class:DataSet
unlinkFields	tools/pybrain/pybrain/datasets/dataset.py	/^    def unlinkFields(self, unlinklist=None):$/;"	m	class:DataSet
unsafeRegion	examples/problem_settings.py	/^            (17, 47, 9, 3)]$/;"	v
unsafeRegion	settings.py	/^            (17, 47, 9, 3)]$/;"	v
unsafeStates	examples/problem_settings.py	/^    unsafeStates = [ [3, 2], [2, 3] ]$/;"	v
unsafeStates	examples/problem_settings.py	/^    unsafeStates = []$/;"	v
unsafeStates	settings.py	/^    unsafeStates = [ [3, 2], [2, 3] ]$/;"	v
unsafeStates	settings.py	/^    unsafeStates = []$/;"	v
up	pybrain/rl/environments/ode/tools/xmltools.py	/^    def up(self, steps=1):$/;"	m	class:XMLstruct
up	tools/pybrain/pybrain/rl/environments/ode/tools/xmltools.py	/^    def up(self, steps=1):$/;"	m	class:XMLstruct
update	pybrain/rl/environments/simple/environment.py	/^    def update(self):$/;"	m	class:SimpleEnvironment
update	pybrain/tools/plotting/multiline.py	/^    def update(self):$/;"	m	class:MultilinePlotter
update	tools/pybrain/pybrain/rl/environments/simple/environment.py	/^    def update(self):$/;"	m	class:SimpleEnvironment
update	tools/pybrain/pybrain/tools/plotting/multiline.py	/^    def update(self):$/;"	m	class:MultilinePlotter
updateClients	pybrain/rl/environments/ode/environment.py	/^    def updateClients(self):$/;"	m	class:ODEEnvironment
updateClients	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    def updateClients(self):$/;"	m	class:ODEEnvironment
updateData	pybrain/rl/environments/cartpole/renderer.py	/^    def updateData(self, data):$/;"	m	class:CartPoleRenderer
updateData	pybrain/rl/environments/ode/viewer.py	/^    def updateData(self):$/;"	m	class:ODEViewer
updateData	pybrain/rl/environments/renderer.py	/^    def updateData(self):$/;"	m	class:Renderer
updateData	pybrain/rl/environments/simple/renderer.py	/^    def updateData(self, data):$/;"	m	class:SimpleRenderer
updateData	tools/pybrain/pybrain/rl/environments/cartpole/renderer.py	/^    def updateData(self, data):$/;"	m	class:CartPoleRenderer
updateData	tools/pybrain/pybrain/rl/environments/ode/viewer.py	/^    def updateData(self):$/;"	m	class:ODEViewer
updateData	tools/pybrain/pybrain/rl/environments/renderer.py	/^    def updateData(self):$/;"	m	class:Renderer
updateData	tools/pybrain/pybrain/rl/environments/simple/renderer.py	/^    def updateData(self, data):$/;"	m	class:SimpleRenderer
updateRenderer	pybrain/rl/environments/flexcube/environment.py	/^    def updateRenderer(self):$/;"	m	class:FlexCubeEnvironment
updateRenderer	pybrain/rl/environments/shipsteer/shipsteer.py	/^    def updateRenderer(self):$/;"	m	class:ShipSteeringEnvironment
updateRenderer	tools/pybrain/pybrain/rl/environments/flexcube/environment.py	/^    def updateRenderer(self):$/;"	m	class:FlexCubeEnvironment
updateRenderer	tools/pybrain/pybrain/rl/environments/shipsteer/shipsteer.py	/^    def updateRenderer(self):$/;"	m	class:ShipSteeringEnvironment
updateSensor	pybrain/rl/environments/flexcube/sensors.py	/^    def updateSensor(self, pos, vel, dist, center, step, wEdges):$/;"	m	class:Sensors
updateSensor	pybrain/rl/environments/flexcube/sensors.py	/^    def updateSensor(self, pos, vel, dist, center, step, wEdges):$/;"	m	class:defaultSensor
updateSensor	tools/pybrain/pybrain/rl/environments/flexcube/sensors.py	/^    def updateSensor(self, pos, vel, dist, center, step, wEdges):$/;"	m	class:Sensors
updateSensor	tools/pybrain/pybrain/rl/environments/flexcube/sensors.py	/^    def updateSensor(self, pos, vel, dist, center, step, wEdges):$/;"	m	class:defaultSensor
updateTau	pybrain/rl/learners/directsearch/rwr.py	/^    def updateTau(self, R, U):$/;"	m	class:RWR
updateTau	tools/pybrain/pybrain/rl/learners/directsearch/rwr.py	/^    def updateTau(self, R, U):$/;"	m	class:RWR
updateValue	pybrain/structure/modules/table.py	/^    def updateValue(self, row, column, value):$/;"	m	class:Table
updateValue	tools/pybrain/pybrain/structure/modules/table.py	/^    def updateValue(self, row, column, value):$/;"	m	class:Table
updater	pybrain/unsupervised/trainers/rbm.py	/^    def updater(self, pos, neg, poshb, neghb, posvb, negvb):$/;"	m	class:RbmBernoulliTrainer
updater	pybrain/unsupervised/trainers/rbm.py	/^    def updater(self, pos, neg, poshb, neghb, posvb, negvb):$/;"	m	class:RbmGaussTrainer
updater	pybrain/unsupervised/trainers/rbm.py	/^    def updater(self, pos, neg, poshb, neghb, posvb, negvb):$/;"	m	class:RbmGibbsTrainer
updater	tools/pybrain/pybrain/unsupervised/trainers/rbm.py	/^    def updater(self, pos, neg, poshb, neghb, posvb, negvb):$/;"	m	class:RbmBernoulliTrainer
updater	tools/pybrain/pybrain/unsupervised/trainers/rbm.py	/^    def updater(self, pos, neg, poshb, neghb, posvb, negvb):$/;"	m	class:RbmGaussTrainer
updater	tools/pybrain/pybrain/unsupervised/trainers/rbm.py	/^    def updater(self, pos, neg, poshb, neghb, posvb, negvb):$/;"	m	class:RbmGibbsTrainer
url	tools/pybrain/setup.py	/^    url="http:\/\/pybrain.org",$/;"	v
useAnticipatedMeanShift	pybrain/optimization/distributionbased/fem.py	/^    useAnticipatedMeanShift = False$/;"	v	class:FEM
useAnticipatedMeanShift	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^    useAnticipatedMeanShift = False$/;"	v	class:FEM
useGraphics	tools/pybrain/examples/rl/environments/shipsteer/shipbench_sde.py	/^    useGraphics = False$/;"	v
useGraphics	tools/pybrain/examples/rl/environments/shipsteer/shipbench_sde.py	/^    useGraphics = eval(sys.argv[1])$/;"	v
useNetworks	pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    useNetworks = False$/;"	v	class:RelativeGomokuTask
useNetworks	pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    useNetworks = False$/;"	v	class:RelativeCaptureTask
useNetworks	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    useNetworks = False$/;"	v	class:RelativeGomokuTask
useNetworks	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    useNetworks = False$/;"	v	class:RelativeCaptureTask
useSharedSampling	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    useSharedSampling = False$/;"	v	class:Coevolution
useSharedSampling	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    useSharedSampling = False$/;"	v	class:Coevolution
userAgent	tools/pybrain/docs/html/_static/jquery.js	/^while(elem=second[i++])first[pos++]=elem;return first;},unique:function(array){var ret=[],done={};try{for(var i=0,length=array.length;i<length;i++){var id=jQuery.data(array[i]);if(!done[id]){done[id]=true;ret.push(array[i]);}}}catch(e){ret=array;}return ret;},grep:function(elems,callback,inv){var ret=[];for(var i=0,length=elems.length;i<length;i++)if(!inv!=!callback(elems[i],i))ret.push(elems[i]);return ret;},map:function(elems,callback){var ret=[];for(var i=0,length=elems.length;i<length;i++){var value=callback(elems[i],i);if(value!=null)ret[ret.length]=value;}return ret.concat.apply([],ret);}});var userAgent=navigator.userAgent.toLowerCase();jQuery.browser={version:(userAgent.match(\/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/)||[])[1],safari:\/webkit\/.test(userAgent),opera:\/opera\/.test(userAgent),msie:\/msie\/.test(userAgent)&&!\/opera\/.test(userAgent),mozilla:\/mozilla\/.test(userAgent)&&!\/(compatible|webkit)\/.test(userAgent)};var styleFloat=jQuery.browser.msie?"styleFloat":"cssFloat";jQuery.extend({boxModel:!jQuery.browser.msie||document.compatMode=="CSS1Compat",props:{"for":"htmlFor","class":"className","float":styleFloat,cssFloat:styleFloat,styleFloat:styleFloat,readonly:"readOnly",maxlength:"maxLength",cellspacing:"cellSpacing"}});jQuery.each({parent:function(elem){return elem.parentNode;},parents:function(elem){return jQuery.dir(elem,"parentNode");},next:function(elem){return jQuery.nth(elem,2,"nextSibling");},prev:function(elem){return jQuery.nth(elem,2,"previousSibling");},nextAll:function(elem){return jQuery.dir(elem,"nextSibling");},prevAll:function(elem){return jQuery.dir(elem,"previousSibling");},siblings:function(elem){return jQuery.sibling(elem.parentNode.firstChild,elem);},children:function(elem){return jQuery.sibling(elem.firstChild);},contents:function(elem){return jQuery.nodeName(elem,"iframe")?elem.contentDocument||elem.contentWindow.document:jQuery.makeArray(elem.childNodes);}},function(name,fn){jQuery.fn[name]=function(selector){var ret=jQuery.map(this,fn);if(selector&&typeof selector=="string")ret=jQuery.multiFilter(selector,ret);return this.pushStack(jQuery.unique(ret));};});jQuery.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(name,original){jQuery.fn[name]=function(){var args=arguments;return this.each(function(){for(var i=0,length=args.length;i<length;i++)jQuery(args[i])[original](this);});};});jQuery.each({removeAttr:function(name){jQuery.attr(this,name,"");if(this.nodeType==1)this.removeAttribute(name);},addClass:function(classNames){jQuery.className.add(this,classNames);},removeClass:function(classNames){jQuery.className.remove(this,classNames);},toggleClass:function(classNames){jQuery.className[jQuery.className.has(this,classNames)?"remove":"add"](this,classNames);},remove:function(selector){if(!selector||jQuery.filter(selector,[this]).r.length){jQuery("*",this).add(this).each(function(){jQuery.event.remove(this);jQuery.removeData(this);});if(this.parentNode)this.parentNode.removeChild(this);}},empty:function(){jQuery(">*",this).remove();while(this.firstChild)this.removeChild(this.firstChild);}},function(name,fn){jQuery.fn[name]=function(){return this.each(fn,arguments);};});jQuery.each(["Height","Width"],function(i,name){var type=name.toLowerCase();jQuery.fn[type]=function(size){return this[0]==window?jQuery.browser.opera&&document.body["client"+name]||jQuery.browser.safari&&window["inner"+name]||document.compatMode=="CSS1Compat"&&document.documentElement["client"+name]||document.body["client"+name]:this[0]==document?Math.max(Math.max(document.body["scroll"+name],document.documentElement["scroll"+name]),Math.max(document.body["offset"+name],document.documentElement["offset"+name])):size==undefined?(this.length?jQuery.css(this[0],type):null):this.css(type,size.constructor==String?size:size+"px");};});function num(elem,prop){return elem[0]&&parseInt(jQuery.curCSS(elem[0],prop,true),10)||0;}var chars=jQuery.browser.safari&&parseInt(jQuery.browser.version)<417?"(?:[\\\\w*_-]|\\\\\\\\.)":"(?:[\\\\w\\u0128-\\uFFFF*_-]|\\\\\\\\.)",quickChild=new RegExp("^>\\\\s*("+chars+"+)"),quickID=new RegExp("^("+chars+"+)(#)("+chars+"+)"),quickClass=new RegExp("^([#.]?)("+chars+"*)");jQuery.extend({expr:{"":function(a,i,m){return m[2]=="*"||jQuery.nodeName(a,m[2]);},"#":function(a,i,m){return a.getAttribute("id")==m[2];},":":{lt:function(a,i,m){return i<m[3]-0;},gt:function(a,i,m){return i>m[3]-0;},nth:function(a,i,m){return m[3]-0==i;},eq:function(a,i,m){return m[3]-0==i;},first:function(a,i){return i==0;},last:function(a,i,m,r){return i==r.length-1;},even:function(a,i){return i%2==0;},odd:function(a,i){return i%2;},"first-child":function(a){return a.parentNode.getElementsByTagName("*")[0]==a;},"last-child":function(a){return jQuery.nth(a.parentNode.lastChild,1,"previousSibling")==a;},"only-child":function(a){return!jQuery.nth(a.parentNode.lastChild,2,"previousSibling");},parent:function(a){return a.firstChild;},empty:function(a){return!a.firstChild;},contains:function(a,i,m){return(a.textContent||a.innerText||jQuery(a).text()||"").indexOf(m[3])>=0;},visible:function(a){return"hidden"!=a.type&&jQuery.css(a,"display")!="none"&&jQuery.css(a,"visibility")!="hidden";},hidden:function(a){return"hidden"==a.type||jQuery.css(a,"display")=="none"||jQuery.css(a,"visibility")=="hidden";},enabled:function(a){return!a.disabled;},disabled:function(a){return a.disabled;},checked:function(a){return a.checked;},selected:function(a){return a.selected||jQuery.attr(a,"selected");},text:function(a){return"text"==a.type;},radio:function(a){return"radio"==a.type;},checkbox:function(a){return"checkbox"==a.type;},file:function(a){return"file"==a.type;},password:function(a){return"password"==a.type;},submit:function(a){return"submit"==a.type;},image:function(a){return"image"==a.type;},reset:function(a){return"reset"==a.type;},button:function(a){return"button"==a.type||jQuery.nodeName(a,"button");},input:function(a){return\/input|select|textarea|button\/i.test(a.nodeName);},has:function(a,i,m){return jQuery.find(m[3],a).length;},header:function(a){return\/h\\d\/i.test(a.nodeName);},animated:function(a){return jQuery.grep(jQuery.timers,function(fn){return a==fn.elem;}).length;}}},parse:[\/^(\\[) *@?([\\w-]+) *([!*$^~=]*) *('?"?)(.*?)\\4 *\\]\/,\/^(:)([\\w-]+)\\("?'?(.*?(\\(.*?\\))?[^(]*?)"?'?\\)\/,new RegExp("^([:.#]*)("+chars+"+)")],multiFilter:function(expr,elems,not){var old,cur=[];while(expr&&expr!=old){old=expr;var f=jQuery.filter(expr,elems,not);expr=f.t.replace(\/^\\s*,\\s*\/,"");cur=not?elems=f.r:jQuery.merge(cur,f.r);}return cur;},find:function(t,context){if(typeof t!="string")return[t];if(context&&context.nodeType!=1&&context.nodeType!=9)return[];context=context||document;var ret=[context],done=[],last,nodeName;while(t&&last!=t){var r=[];last=t;t=jQuery.trim(t);var foundToken=false,re=quickChild,m=re.exec(t);if(m){nodeName=m[1].toUpperCase();for(var i=0;ret[i];i++)for(var c=ret[i].firstChild;c;c=c.nextSibling)if(c.nodeType==1&&(nodeName=="*"||c.nodeName.toUpperCase()==nodeName))r.push(c);ret=r;t=t.replace(re,"");if(t.indexOf(" ")==0)continue;foundToken=true;}else{re=\/^([>+~])\\s*(\\w*)\/i;if((m=re.exec(t))!=null){r=[];var merge={};nodeName=m[2].toUpperCase();m=m[1];for(var j=0,rl=ret.length;j<rl;j++){var n=m=="~"||m=="+"?ret[j].nextSibling:ret[j].firstChild;for(;n;n=n.nextSibling)if(n.nodeType==1){var id=jQuery.data(n);if(m=="~"&&merge[id])break;if(!nodeName||n.nodeName.toUpperCase()==nodeName){if(m=="~")merge[id]=true;r.push(n);}if(m=="+")break;}}ret=r;t=jQuery.trim(t.replace(re,""));foundToken=true;}}if(t&&!foundToken){if(!t.indexOf(",")){if(context==ret[0])ret.shift();done=jQuery.merge(done,ret);r=ret=[context];t=" "+t.substr(1,t.length);}else{var re2=quickID;var m=re2.exec(t);if(m){m=[0,m[2],m[3],m[1]];}else{re2=quickClass;m=re2.exec(t);}m[2]=m[2].replace(\/\\\\\/g,"");var elem=ret[ret.length-1];if(m[1]=="#"&&elem&&elem.getElementById&&!jQuery.isXMLDoc(elem)){var oid=elem.getElementById(m[2]);if((jQuery.browser.msie||jQuery.browser.opera)&&oid&&typeof oid.id=="string"&&oid.id!=m[2])oid=jQuery('[@id="'+m[2]+'"]',elem)[0];ret=r=oid&&(!m[3]||jQuery.nodeName(oid,m[3]))?[oid]:[];}else{for(var i=0;ret[i];i++){var tag=m[1]=="#"&&m[3]?m[3]:m[1]!=""||m[0]==""?"*":m[2];if(tag=="*"&&ret[i].nodeName.toLowerCase()=="object")tag="param";r=jQuery.merge(r,ret[i].getElementsByTagName(tag));}if(m[1]==".")r=jQuery.classFilter(r,m[2]);if(m[1]=="#"){var tmp=[];for(var i=0;r[i];i++)if(r[i].getAttribute("id")==m[2]){tmp=[r[i]];break;}r=tmp;}ret=r;}t=t.replace(re2,"");}}if(t){var val=jQuery.filter(t,r);ret=r=val.r;t=jQuery.trim(val.t);}}if(t)ret=[];if(ret&&context==ret[0])ret.shift();done=jQuery.merge(done,ret);return done;},classFilter:function(r,m,not){m=" "+m+" ";var tmp=[];for(var i=0;r[i];i++){var pass=(" "+r[i].className+" ").indexOf(m)>=0;if(!not&&pass||not&&!pass)tmp.push(r[i]);}return tmp;},filter:function(t,r,not){var last;while(t&&t!=last){last=t;var p=jQuery.parse,m;for(var i=0;p[i];i++){m=p[i].exec(t);if(m){t=t.substring(m[0].length);m[2]=m[2].replace(\/\\\\\/g,"");break;}}if(!m)break;if(m[1]==":"&&m[2]=="not")r=isSimple.test(m[3])?jQuery.filter(m[3],r,true).r:jQuery(r).not(m[3]);else if(m[1]==".")r=jQuery.classFilter(r,m[2],not);else if(m[1]=="["){var tmp=[],type=m[3];for(var i=0,rl=r.length;i<rl;i++){var a=r[i],z=a[jQuery.props[m[2]]||m[2]];if(z==null||\/href|src|selected\/.test(m[2]))z=jQuery.attr(a,m[2])||'';if((type==""&&!!z||type=="="&&z==m[5]||type=="!="&&z!=m[5]||type=="^="&&z&&!z.indexOf(m[5])||type=="$="&&z.substr(z.length-m[5].length)==m[5]||(type=="*="||type=="~=")&&z.indexOf(m[5])>=0)^not)tmp.push(a);}r=tmp;}else if(m[1]==":"&&m[2]=="nth-child"){var merge={},tmp=[],test=\/(-?)(\\d*)n((?:\\+|-)?\\d*)\/.exec(m[3]=="even"&&"2n"||m[3]=="odd"&&"2n+1"||!\/\\D\/.test(m[3])&&"0n+"+m[3]||m[3]),first=(test[1]+(test[2]||1))-0,last=test[3]-0;for(var i=0,rl=r.length;i<rl;i++){var node=r[i],parentNode=node.parentNode,id=jQuery.data(parentNode);if(!merge[id]){var c=1;for(var n=parentNode.firstChild;n;n=n.nextSibling)if(n.nodeType==1)n.nodeIndex=c++;merge[id]=true;}var add=false;if(first==0){if(node.nodeIndex==last)add=true;}else if((node.nodeIndex-last)%first==0&&(node.nodeIndex-last)\/first>=0)add=true;if(add^not)tmp.push(node);}r=tmp;}else{var fn=jQuery.expr[m[1]];if(typeof fn=="object")fn=fn[m[2]];if(typeof fn=="string")fn=eval("false||function(a,i){return "+fn+";}");r=jQuery.grep(r,function(elem,i){return fn(elem,i,m,r);},not);}}return{r:r,t:t};},dir:function(elem,dir){var matched=[],cur=elem[dir];while(cur&&cur!=document){if(cur.nodeType==1)matched.push(cur);cur=cur[dir];}return matched;},nth:function(cur,result,dir,elem){result=result||1;var num=0;for(;cur;cur=cur[dir])if(cur.nodeType==1&&++num==result)break;return cur;},sibling:function(n,elem){var r=[];for(;n;n=n.nextSibling){if(n.nodeType==1&&n!=elem)r.push(n);}return r;}});jQuery.event={add:function(elem,types,handler,data){if(elem.nodeType==3||elem.nodeType==8)return;if(jQuery.browser.msie&&elem.setInterval)elem=window;if(!handler.guid)handler.guid=this.guid++;if(data!=undefined){var fn=handler;handler=this.proxy(fn,function(){return fn.apply(this,arguments);});handler.data=data;}var events=jQuery.data(elem,"events")||jQuery.data(elem,"events",{}),handle=jQuery.data(elem,"handle")||jQuery.data(elem,"handle",function(){if(typeof jQuery!="undefined"&&!jQuery.event.triggered)return jQuery.event.handle.apply(arguments.callee.elem,arguments);});handle.elem=elem;jQuery.each(types.split(\/\\s+\/),function(index,type){var parts=type.split(".");type=parts[0];handler.type=parts[1];var handlers=events[type];if(!handlers){handlers=events[type]={};if(!jQuery.event.special[type]||jQuery.event.special[type].setup.call(elem)===false){if(elem.addEventListener)elem.addEventListener(type,handle,false);else if(elem.attachEvent)elem.attachEvent("on"+type,handle);}}handlers[handler.guid]=handler;jQuery.event.global[type]=true;});elem=null;},guid:1,global:{},remove:function(elem,types,handler){if(elem.nodeType==3||elem.nodeType==8)return;var events=jQuery.data(elem,"events"),ret,index;if(events){if(types==undefined||(typeof types=="string"&&types.charAt(0)=="."))for(var type in events)this.remove(elem,type+(types||""));else{if(types.type){handler=types.handler;types=types.type;}jQuery.each(types.split(\/\\s+\/),function(index,type){var parts=type.split(".");type=parts[0];if(events[type]){if(handler)delete events[type][handler.guid];else$/;"	v
validate	pybrain/tools/validation.py	/^    def validate(cls, valfunc, module, dataset):$/;"	m	class:ModuleValidator
validate	pybrain/tools/validation.py	/^    def validate(self):$/;"	m	class:CrossValidator
validate	tools/pybrain/pybrain/tools/validation.py	/^    def validate(cls, valfunc, module, dataset):$/;"	m	class:ModuleValidator
validate	tools/pybrain/pybrain/tools/validation.py	/^    def validate(self):$/;"	m	class:CrossValidator
validationProportion	pybrain/rl/learners/directsearch/rwr.py	/^    validationProportion = 0.33$/;"	v	class:RWR
validationProportion	tools/pybrain/pybrain/rl/learners/directsearch/rwr.py	/^    validationProportion = 0.33$/;"	v	class:RWR
valueLearningRate	pybrain/rl/learners/directsearch/rwr.py	/^    valueLearningRate = None$/;"	v	class:RWR
valueLearningRate	tools/pybrain/pybrain/rl/learners/directsearch/rwr.py	/^    valueLearningRate = None$/;"	v	class:RWR
valueMomentum	pybrain/rl/learners/directsearch/rwr.py	/^    valueMomentum = None$/;"	v	class:RWR
valueMomentum	tools/pybrain/pybrain/rl/learners/directsearch/rwr.py	/^    valueMomentum = None$/;"	v	class:RWR
vanillaScale	pybrain/optimization/distributionbased/ves.py	/^    vanillaScale = False$/;"	v	class:VanillaGradientEvolutionStrategies
vanillaScale	tools/pybrain/pybrain/optimization/distributionbased/ves.py	/^    vanillaScale = False$/;"	v	class:VanillaGradientEvolutionStrategies
varianceCutoff	pybrain/optimization/distributionbased/rank1.py	/^    varianceCutoff = 1e-20            $/;"	v	class:Rank1NES
varianceCutoff	pybrain/optimization/distributionbased/snes.py	/^    varianceCutoff = 1e-20$/;"	v	class:SNES
varianceCutoff	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^    varianceCutoff = 1e-20            $/;"	v	class:Rank1NES
varianceCutoff	tools/pybrain/pybrain/optimization/distributionbased/snes.py	/^    varianceCutoff = 1e-20$/;"	v	class:SNES
vectorformat	pybrain/datasets/dataset.py	/^    vectorformat = property(getVectorFormat, setVectorFormat, None, "vectorformat can be '1d', '2d' or 'list'")$/;"	v	class:DataSet
vectorformat	tools/pybrain/pybrain/datasets/dataset.py	/^    vectorformat = property(getVectorFormat, setVectorFormat, None, "vectorformat can be '1d', '2d' or 'list'")$/;"	v	class:DataSet
velDif	pybrain/rl/environments/flexcube/objects3d.py	/^    def velDif(self, vect, dif, soll):$/;"	m	class:Objects3D
velDif	tools/pybrain/pybrain/rl/environments/flexcube/objects3d.py	/^    def velDif(self, vect, dif, soll):$/;"	m	class:Objects3D
verbose	pybrain/optimization/optimizer.py	/^    verbose = False$/;"	v	class:BlackBoxOptimizer
verbose	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    verbose = False$/;"	v	class:Coevolution
verbose	pybrain/rl/environments/twoplayergames/capturegameplayers/clientwrapper.py	/^    verbose = False$/;"	v	class:ClientCapturePlayer
verbose	pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    verbose = False$/;"	v	class:RelativeGomokuTask
verbose	pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    verbose = False$/;"	v	class:RelativeCaptureTask
verbose	pybrain/rl/learners/directsearch/rwr.py	/^    verbose = True$/;"	v	class:RWR
verbose	pybrain/rl/learners/valuebased/linearfa.py	/^    verbose = False$/;"	v	class:LearningTester
verbose	tools/pybrain/pybrain/optimization/optimizer.py	/^    verbose = False$/;"	v	class:BlackBoxOptimizer
verbose	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    verbose = False$/;"	v	class:Coevolution
verbose	tools/pybrain/pybrain/rl/environments/twoplayergames/capturegameplayers/clientwrapper.py	/^    verbose = False$/;"	v	class:ClientCapturePlayer
verbose	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativegomokutask.py	/^    verbose = False$/;"	v	class:RelativeGomokuTask
verbose	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/relativetask.py	/^    verbose = False$/;"	v	class:RelativeCaptureTask
verbose	tools/pybrain/pybrain/rl/learners/directsearch/rwr.py	/^    verbose = True$/;"	v	class:RWR
verbose	tools/pybrain/pybrain/rl/learners/valuebased/linearfa.py	/^    verbose = False$/;"	v	class:LearningTester
verboseGaps	pybrain/optimization/distributionbased/rank1.py	/^    verboseGaps = 1$/;"	v	class:Rank1NES
verboseGaps	tools/pybrain/pybrain/optimization/distributionbased/rank1.py	/^    verboseGaps = 1$/;"	v	class:Rank1NES
verbosity	pybrain/rl/environments/ode/environment.py	/^    verbosity = 0$/;"	v	class:ODEEnvironment
verbosity	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^    verbosity = 2)$/;"	v
verbosity	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    verbosity = 0$/;"	v	class:ODEEnvironment
version	pybrain/rl/environments/cartpole/fast_version/cartpolecompile.py	/^    version = platform.mac_ver()$/;"	v
version	tools/pybrain/docs/sphinx/conf.py	/^version = '0.3'$/;"	v
version	tools/pybrain/pybrain/rl/environments/cartpole/fast_version/cartpolecompile.py	/^    version = platform.mac_ver()$/;"	v
version	tools/pybrain/setup.py	/^    version="0.3.1",$/;"	v
viewOnFlatLayer	pybrain/structure/modulemesh.py	/^    def viewOnFlatLayer(layer, dimensions, name = None):$/;"	m	class:ModuleMesh
viewOnFlatLayer	tools/pybrain/pybrain/structure/modulemesh.py	/^    def viewOnFlatLayer(layer, dimensions, name = None):$/;"	m	class:ModuleMesh
visEnvMat	examples/ENAC.py	/^visEnvMat = envMatrix$/;"	v
visEnvMat	examples/QLambda_LinFA.py	/^visEnvMat = envMatrix$/;"	v
visEnvMat	examples/Q_LinFA.py	/^visEnvMat = envMatrix$/;"	v
visEnvMat	examples/SARSA_TL.py	/^visEnvMat = envMatrix$/;"	v
visEnvMat	main.py	/^visEnvMat = envMatrix$/;"	v
visibleDim	pybrain/structure/networks/rbm.py	/^    def visibleDim(self):$/;"	m	class:Rbm
visibleDim	tools/pybrain/pybrain/structure/networks/rbm.py	/^    def visibleDim(self):$/;"	m	class:Rbm
vopt	pybrain/rl/environments/functions/multimodal.py	/^    vopt = 0.397887$/;"	v	class:BraninFunction
vopt	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    vopt = 0.397887$/;"	v	class:BraninFunction
w	pybrain/rl/environments/ode/environment.py	/^    w = ODEEnvironment()$/;"	v
w	pybrain/rl/environments/ode/instances/acrobot.py	/^    w = AcrobotEnvironment()$/;"	v
w	pybrain/rl/environments/ode/instances/ccrl.py	/^    w = CCRLEnvironment()$/;"	v
w	pybrain/rl/environments/ode/instances/johnnie.py	/^    w = JohnnieEnvironment()$/;"	v
w	tools/pybrain/pybrain/rl/environments/ode/environment.py	/^    w = ODEEnvironment()$/;"	v
w	tools/pybrain/pybrain/rl/environments/ode/instances/acrobot.py	/^    w = AcrobotEnvironment()$/;"	v
w	tools/pybrain/pybrain/rl/environments/ode/instances/ccrl.py	/^    w = CCRLEnvironment()$/;"	v
w	tools/pybrain/pybrain/rl/environments/ode/instances/johnnie.py	/^    w = JohnnieEnvironment()$/;"	v
wDecay	pybrain/optimization/finitedifference/pgpe.py	/^    wDecay = 0.0$/;"	v	class:PGPE
wDecay	tools/pybrain/pybrain/optimization/finitedifference/pgpe.py	/^    wDecay = 0.0$/;"	v	class:PGPE
waitScreenCapturing	pybrain/rl/environments/ode/viewer.py	/^    def waitScreenCapturing(self):$/;"	m	class:ODEViewer
waitScreenCapturing	tools/pybrain/pybrain/rl/environments/ode/viewer.py	/^    def waitScreenCapturing(self):$/;"	m	class:ODEViewer
wallFlag	environments/TrapMaze.py	/^    wallFlag = 1$/;"	v	class:TrapMaze
washout	pybrain/structure/modules/evolinonetwork.py	/^    def washout(self, sequence):$/;"	m	class:EvolinoNetwork
washout	tools/pybrain/pybrain/structure/modules/evolinonetwork.py	/^    def washout(self, sequence):$/;"	m	class:EvolinoNetwork
weightInitializer	pybrain/supervised/trainers/evolino.py	/^    weightInitializer = property(lambda self: self._weightInitializer)$/;"	v	class:EvolinoTrainer
weightInitializer	tools/pybrain/pybrain/supervised/trainers/evolino.py	/^    weightInitializer = property(lambda self: self._weightInitializer)$/;"	v	class:EvolinoTrainer
whichBuffers	pybrain/structure/connections/full.py	/^    def whichBuffers(self, paramIndex):$/;"	m	class:FullConnection
whichBuffers	tools/pybrain/pybrain/structure/connections/full.py	/^    def whichBuffers(self, paramIndex):$/;"	m	class:FullConnection
whichNeuron	pybrain/structure/modules/lstm.py	/^    def whichNeuron(self, inputIndex = None, outputIndex = None):$/;"	m	class:LSTMLayer
whichNeuron	pybrain/structure/modules/mdlstm.py	/^    def whichNeuron(self, inputIndex=None, outputIndex=None):$/;"	m	class:MDLSTMLayer
whichNeuron	pybrain/structure/modules/neuronlayer.py	/^    def whichNeuron(self, inputIndex=None, outputIndex=None):$/;"	m	class:NeuronLayer
whichNeuron	tools/pybrain/pybrain/structure/modules/lstm.py	/^    def whichNeuron(self, inputIndex = None, outputIndex = None):$/;"	m	class:LSTMLayer
whichNeuron	tools/pybrain/pybrain/structure/modules/mdlstm.py	/^    def whichNeuron(self, inputIndex=None, outputIndex=None):$/;"	m	class:MDLSTMLayer
whichNeuron	tools/pybrain/pybrain/structure/modules/neuronlayer.py	/^    def whichNeuron(self, inputIndex=None, outputIndex=None):$/;"	m	class:NeuronLayer
winProp	pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    def winProp(self, h):$/;"	m	class:HandicapCaptureTask
winProp	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/handicaptask.py	/^    def winProp(self, h):$/;"	m	class:HandicapCaptureTask
window.console	tools/pybrain/docs/html/_static/doctools.js	/^  for (var i = 0; i < names.length; ++i)$/;"	f
windowSequenceEval	pybrain/tools/datasettools.py	/^def windowSequenceEval(DS, winsz, result):$/;"	f
windowSequenceEval	tools/pybrain/pybrain/tools/datasettools.py	/^def windowSequenceEval(DS, winsz, result):$/;"	f
windowSize	pybrain/optimization/distributionbased/fem.py	/^    windowSize = 50$/;"	v	class:FEM
windowSize	tools/pybrain/pybrain/optimization/distributionbased/fem.py	/^    windowSize = 50$/;"	v	class:FEM
winnerReward	pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^    winnerReward = 1.$/;"	v	class:CaptureGameTask
winnerReward	pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^    winnerReward = 1.$/;"	v	class:GomokuTask
winnerReward	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/capturetask.py	/^    winnerReward = 1.$/;"	v	class:CaptureGameTask
winnerReward	tools/pybrain/pybrain/rl/environments/twoplayergames/tasks/gomokutask.py	/^    winnerReward = 1.$/;"	v	class:GomokuTask
wrapped	util.py	/^    def wrapped(*args, **kwargs):$/;"	f	function:debug
write	pybrain/rl/environments/ode/tools/xmltools.py	/^    def write(self, file, depth=0):$/;"	m	class:XMLstruct
write	tools/pybrain/pybrain/rl/environments/ode/tools/xmltools.py	/^    def write(self, file, depth=0):$/;"	m	class:XMLstruct
writeArgs	pybrain/tools/customxml/networkwriter.py	/^    def writeArgs(self, node, argdict):$/;"	m	class:NetworkWriter
writeArgs	tools/pybrain/pybrain/tools/customxml/networkwriter.py	/^    def writeArgs(self, node, argdict):$/;"	m	class:NetworkWriter
writeAttrDict	pybrain/tools/customxml/handling.py	/^    def writeAttrDict(self, node, adict, transform = None):$/;"	m	class:XMLHandling
writeAttrDict	tools/pybrain/pybrain/tools/customxml/handling.py	/^    def writeAttrDict(self, node, adict, transform = None):$/;"	m	class:XMLHandling
writeBuildable	pybrain/tools/customxml/networkwriter.py	/^    def writeBuildable(self, rootnode, m):$/;"	m	class:NetworkWriter
writeBuildable	tools/pybrain/pybrain/tools/customxml/networkwriter.py	/^    def writeBuildable(self, rootnode, m):$/;"	m	class:NetworkWriter
writeConnection	pybrain/tools/customxml/networkwriter.py	/^    def writeConnection(self, rootnode, c, recurrent):$/;"	m	class:NetworkWriter
writeConnection	tools/pybrain/pybrain/tools/customxml/networkwriter.py	/^    def writeConnection(self, rootnode, c, recurrent):$/;"	m	class:NetworkWriter
writeCustomParameters	pybrain/rl/environments/ode/tools/xodetools.py	/^    def writeCustomParameters(self, f):$/;"	m	class:XODEfile
writeCustomParameters	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def writeCustomParameters(self, f):$/;"	m	class:XODEfile
writeDoubles	pybrain/tools/customxml/handling.py	/^    def writeDoubles(self, node, l, precision = 6):$/;"	m	class:XMLHandling
writeDoubles	tools/pybrain/pybrain/tools/customxml/handling.py	/^    def writeDoubles(self, node, l, precision = 6):$/;"	m	class:XMLHandling
writeMatrix	pybrain/tools/customxml/handling.py	/^    def writeMatrix(self, node, m, precision = 6):$/;"	m	class:XMLHandling
writeMatrix	tools/pybrain/pybrain/tools/customxml/handling.py	/^    def writeMatrix(self, node, m, precision = 6):$/;"	m	class:XMLHandling
writeModule	pybrain/tools/customxml/networkwriter.py	/^    def writeModule(self, rootnode, m, inmodule, outmodule):$/;"	m	class:NetworkWriter
writeModule	tools/pybrain/pybrain/tools/customxml/networkwriter.py	/^    def writeModule(self, rootnode, m, inmodule, outmodule):$/;"	m	class:NetworkWriter
writeNetwork	pybrain/tools/customxml/networkwriter.py	/^    def writeNetwork(self, net, netroot):$/;"	m	class:NetworkWriter
writeNetwork	tools/pybrain/pybrain/tools/customxml/networkwriter.py	/^    def writeNetwork(self, net, netroot):$/;"	m	class:NetworkWriter
writeParams	pybrain/tools/customxml/networkwriter.py	/^    def writeParams(self, node, params):$/;"	m	class:NetworkWriter
writeParams	tools/pybrain/pybrain/tools/customxml/networkwriter.py	/^    def writeParams(self, node, params):$/;"	m	class:NetworkWriter
writeToFile	pybrain/tools/customxml/networkwriter.py	/^    def writeToFile(net, filename):$/;"	m	class:NetworkWriter
writeToFile	tools/pybrain/pybrain/tools/customxml/networkwriter.py	/^    def writeToFile(net, filename):$/;"	m	class:NetworkWriter
writeXODE	pybrain/rl/environments/ode/tools/xodetools.py	/^    def writeXODE(self, filename=None):$/;"	m	class:XODEfile
writeXODE	tools/pybrain/pybrain/rl/environments/ode/tools/xodetools.py	/^    def writeXODE(self, filename=None):$/;"	m	class:XODEfile
wtRatio	pybrain/supervised/trainers/evolino.py	/^    wtRatio = property(lambda self: self._wtRatio)$/;"	v	class:EvolinoTrainer
wtRatio	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^    wtRatio = wtRatio,$/;"	v
wtRatio	tools/pybrain/examples/supervised/evolino/superimposed_sine.py	/^wtRatio = 1.\/3.$/;"	v
wtRatio	tools/pybrain/pybrain/supervised/trainers/evolino.py	/^    wtRatio = property(lambda self: self._wtRatio)$/;"	v	class:EvolinoTrainer
x	pybrain/auxiliary/gaussprocess.py	/^    x = mgrid[-3:3:0.2]$/;"	v	class:GaussianProcess
x	pybrain/optimization/populationbased/coevolution/coevolution.py	/^    x = Coevolution(None, [None], populationSize=1)$/;"	v	class:Coevolution
x	pybrain/tools/mixtures/mixtureofgaussian.py	/^    x = -4.0 + float(i) * 8.0 \/ 1000.0$/;"	v
x	pybrain/tools/mixtures/mogpuremax.py	/^    x = -4.0 + float(i) * 8.0 \/ 1000.0$/;"	v
x	pybrain/tools/plotting/ciaoplot.py	/^    x = array(range(100))$/;"	v	class:CiaoPlot
x	tools/pybrain/examples/rl/environments/shipsteer/shipbench_sde.py	/^x = 0$/;"	v
x	tools/pybrain/examples/unsupervised/gp.py	/^x = mgrid[-3:3:0.2]$/;"	v
x	tools/pybrain/pybrain/auxiliary/gaussprocess.py	/^    x = mgrid[-3:3:0.2]$/;"	v	class:GaussianProcess
x	tools/pybrain/pybrain/optimization/populationbased/coevolution/coevolution.py	/^    x = Coevolution(None, [None], populationSize=1)$/;"	v	class:Coevolution
x	tools/pybrain/pybrain/tools/mixtures/mixtureofgaussian.py	/^    x = -4.0 + float(i) * 8.0 \/ 1000.0$/;"	v
x	tools/pybrain/pybrain/tools/mixtures/mogpuremax.py	/^    x = -4.0 + float(i) * 8.0 \/ 1000.0$/;"	v
x	tools/pybrain/pybrain/tools/plotting/ciaoplot.py	/^    x = array(range(100))$/;"	v	class:CiaoPlot
x0	tools/pybrain/examples/optimization/multiobjective/nsga2.py	/^x0 = zeros(f.indim)$/;"	v
x0	tools/pybrain/examples/optimization/optimizerinterface.py	/^x0 = [2.1, 4]$/;"	v
xRange	examples/problem_settings.py	/^xRange = np.arange(-100, 400, 20)$/;"	v
xRange	settings.py	/^xRange = np.arange(-100, 400, 20)$/;"	v
xa1	pybrain/tests/optimizationtest.py	/^xa1 = array(xlist1)$/;"	v
xa1	tools/pybrain/pybrain/tests/optimizationtest.py	/^xa1 = array(xlist1)$/;"	v
xa100	pybrain/tests/optimizationtest.py	/^xa100 = array(xlist100)$/;"	v
xa100	tools/pybrain/pybrain/tests/optimizationtest.py	/^xa100 = array(xlist100)$/;"	v
xa2	pybrain/tests/optimizationtest.py	/^xa2 = array(xlist2)$/;"	v
xa2	tools/pybrain/pybrain/tests/optimizationtest.py	/^xa2 = array(xlist2)$/;"	v
xdim	pybrain/rl/environments/functions/function.py	/^    xdim = None$/;"	v	class:FunctionEnvironment
xdim	pybrain/rl/environments/functions/multiobjective.py	/^    xdim = 1$/;"	v	class:SchBenchmark
xdim	pybrain/rl/environments/functions/multiobjective.py	/^    xdim = 2$/;"	v	class:PolBenchmark
xdim	pybrain/rl/environments/functions/multiobjective.py	/^    xdim = 3$/;"	v	class:FonBenchmark
xdim	pybrain/rl/environments/functions/multiobjective.py	/^    xdim = 3$/;"	v	class:KurBenchmark
xdim	tools/pybrain/pybrain/rl/environments/functions/function.py	/^    xdim = None$/;"	v	class:FunctionEnvironment
xdim	tools/pybrain/pybrain/rl/environments/functions/multiobjective.py	/^    xdim = 1$/;"	v	class:SchBenchmark
xdim	tools/pybrain/pybrain/rl/environments/functions/multiobjective.py	/^    xdim = 2$/;"	v	class:PolBenchmark
xdim	tools/pybrain/pybrain/rl/environments/functions/multiobjective.py	/^    xdim = 3$/;"	v	class:FonBenchmark
xdim	tools/pybrain/pybrain/rl/environments/functions/multiobjective.py	/^    xdim = 3$/;"	v	class:KurBenchmark
xdimMax	pybrain/rl/environments/functions/function.py	/^    xdimMax = None$/;"	v	class:FunctionEnvironment
xdimMax	pybrain/rl/environments/functions/multimodal.py	/^    xdimMax = 2$/;"	v	class:BraninFunction
xdimMax	pybrain/rl/environments/functions/multiobjective.py	/^    xdimMax = 1$/;"	v	class:SchBenchmark
xdimMax	tools/pybrain/pybrain/rl/environments/functions/function.py	/^    xdimMax = None$/;"	v	class:FunctionEnvironment
xdimMax	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    xdimMax = 2$/;"	v	class:BraninFunction
xdimMax	tools/pybrain/pybrain/rl/environments/functions/multiobjective.py	/^    xdimMax = 1$/;"	v	class:SchBenchmark
xdimMin	pybrain/rl/environments/functions/function.py	/^    xdimMin = 1$/;"	v	class:FunctionEnvironment
xdimMin	pybrain/rl/environments/functions/multimodal.py	/^    xdimMin = 2$/;"	v	class:MultiModalFunction
xdimMin	pybrain/rl/environments/functions/unimodal.py	/^    xdimMin = 2$/;"	v	class:CigarFunction
xdimMin	pybrain/rl/environments/functions/unimodal.py	/^    xdimMin = 2$/;"	v	class:GlasmachersFunction
xdimMin	pybrain/rl/environments/functions/unimodal.py	/^    xdimMin = 2$/;"	v	class:TabletFunction
xdimMin	tools/pybrain/pybrain/rl/environments/functions/function.py	/^    xdimMin = 1$/;"	v	class:FunctionEnvironment
xdimMin	tools/pybrain/pybrain/rl/environments/functions/multimodal.py	/^    xdimMin = 2$/;"	v	class:MultiModalFunction
xdimMin	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^    xdimMin = 2$/;"	v	class:CigarFunction
xdimMin	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^    xdimMin = 2$/;"	v	class:GlasmachersFunction
xdimMin	tools/pybrain/pybrain/rl/environments/functions/unimodal.py	/^    xdimMin = 2$/;"	v	class:TabletFunction
xlist1	pybrain/tests/optimizationtest.py	/^xlist1 = [2.]$/;"	v
xlist1	tools/pybrain/pybrain/tests/optimizationtest.py	/^xlist1 = [2.]$/;"	v
xlist100	pybrain/tests/optimizationtest.py	/^xlist100 = list(range(12, 112))$/;"	v
xlist100	tools/pybrain/pybrain/tests/optimizationtest.py	/^xlist100 = list(range(12, 112))$/;"	v
xlist2	pybrain/tests/optimizationtest.py	/^xlist2 = [0.2, 10]$/;"	v
xlist2	tools/pybrain/pybrain/tests/optimizationtest.py	/^xlist2 = [0.2, 10]$/;"	v
xmlInvariance	pybrain/tests/helpers.py	/^def xmlInvariance(n, forwardpasses = 1):$/;"	f
xmlInvariance	tools/pybrain/pybrain/tests/helpers.py	/^def xmlInvariance(n, forwardpasses = 1):$/;"	f
xopt	pybrain/rl/environments/functions/function.py	/^    xopt = None$/;"	v	class:FunctionEnvironment
xopt	tools/pybrain/pybrain/rl/environments/functions/function.py	/^    xopt = None$/;"	v	class:FunctionEnvironment
y	pybrain/auxiliary/gaussprocess.py	/^    y = 0.1 * x ** 2 + x + 1$/;"	v	class:GaussianProcess
y	tools/pybrain/examples/unsupervised/gp.py	/^y = 0.1*x**2 + x + 1$/;"	v
y	tools/pybrain/pybrain/auxiliary/gaussprocess.py	/^    y = 0.1 * x ** 2 + x + 1$/;"	v	class:GaussianProcess
yRange	examples/problem_settings.py	/^yRange = np.arange(-300, 200, 20)$/;"	v
yRange	settings.py	/^yRange = np.arange(-300, 200, 20)$/;"	v
ydim	pybrain/rl/environments/functions/multiobjective.py	/^    ydim = 2 # by default$/;"	v	class:MultiObjectiveFunction
ydim	tools/pybrain/pybrain/rl/environments/functions/multiobjective.py	/^    ydim = 2 # by default$/;"	v	class:MultiObjectiveFunction
z	pybrain/auxiliary/gaussprocess.py	/^    z = cos(x) * sin(y)$/;"	v	class:GaussianProcess
z	pybrain/auxiliary/gaussprocess.py	/^    z = sin(x) + 0.5 * cos(y)$/;"	v	class:GaussianProcess
z	tools/pybrain/examples/unsupervised/gp.py	/^z = cos(x)*sin(y)$/;"	v
z	tools/pybrain/examples/unsupervised/gp.py	/^z = sin(x) + 0.5*cos(y)$/;"	v
z	tools/pybrain/pybrain/auxiliary/gaussprocess.py	/^    z = cos(x) * sin(y)$/;"	v	class:GaussianProcess
z	tools/pybrain/pybrain/auxiliary/gaussprocess.py	/^    z = sin(x) + 0.5 * cos(y)$/;"	v	class:GaussianProcess
